{"version":3,"sources":["webpack:///static/js/10.71ddc33c878e02c4f923.js","webpack:///src/views/platform/target/template/dataBase.vue","webpack:///./src/views/platform/target/target.vue?b51b","webpack:///./src/util/dataUtil.js","webpack:///./src/views/platform/target/target.vue?3b2e","webpack:///./src/views/platform/target/template/calculation.vue","webpack:///./src/views/platform/target/template/calculation.vue?9772","webpack:///src/views/platform/target/target.vue","webpack:///src/views/platform/target/template/calculation.vue","webpack:///./src/views/platform/target/target.vue?46f0","webpack:///./src/views/platform/target/template/dataBase.vue","webpack:///./src/views/platform/target/target.vue","webpack:///./src/views/platform/target/template/dataBase.vue?1bf3"],"names":["webpackJsonp","29sq","module","__webpack_exports__","__webpack_require__","props","value","type","Object","Boolean","default","Number","String","data","dbSourceList","dbInterfaceList","dbForm","source","expression","watch","handler","valueObj","this","$emit","deep","methods","resetData","getDBSourse","_this","$ajax","then","res","records","getTargetInterface","_this2","get","params","$nextTick","getData","_this3","checkExpression","updated","mounted","GHae","render","_vm","_h","$createElement","_c","_self","attrs","slot","icon","on","click","$event","dialogVisible","_v","inline","model","searchForm","formdata","label","callback","$$v","$set","targetTypeData","defaultExpandAll","entOrgData","auto-complete","filterable","size","placeholder","_l","item","index","key","dataText","parseInt","dataValue","getTbList","ref","colums","colsData","table-list","tableList","search-data","showSelection","callBack","property","width","align","fixed","scopedSlots","_u","fn","scope","editTb","row","delTb","staticClass","title","visible","update:visible","close","closeDialog","label-width","addForm","rules","prop","change","getTargetUnitList","_s","identifyValue","identify","directives","name","rawName","valueMethod","disabled","editExpression","saveDialog","expressionTitle","sourceDialogVisible","expressionClose","target-type","displace","_e","setExpression","staticRenderFns","esExports","KbJL","getTableDataTest","dataLst1","equipType","equipTypeName","dataLst2","id","dataLst3","equipId","time","dataTime","obj","num","dataArray","relation","uniqueField","column","field","formula","children","totalX","totalY","d1","Date","getTableData","d2","console","log","getTime","concatObject","o","n","i","__WEBPACK_IMPORTED_MODULE_2__util__","p","hasOwnProperty","concatArray","dataList1","dataList2","relationList","list","dataList1Obj","j","length","obj1","k","obj2","rightData","push","fieldFormulaAnalysis","fieldFormula","reg","rst","lastIndex","rstArr1","exec","getExpressionField","columns","fieldObj","count","open","ringRatio","sum","avg","max","min","countReg","totalXReg","openReg","ringRatioReg","sumReg","avgReg","maxReg","minReg","Array","test","fieldSub","fieldSubObj","fields","toString","getAllColumn","allColumns","curColumn","childs","concat","getTotalXValue","rstDataList","columnX","colObj","rstDataArray","rstkeys","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default","suffix","match","countField","maxField","minField","sumField","avgField","countLst","maxData","minData","sumData","avgSumData","avgCount","record","indexOf","replace","rField","dataFields","xDataField","sort","curDataDateF","lastDataDateF","scaleR","avgData","vKeys","eval","getTotalYValue","totaoYCol","formulaRaw","countFieldArr","maxFieldArr","minFieldArr","sumFieldArr","avgFieldArr","ki","getDataByOperation","allDataArr","dataObj","curDataList","keys","uniqueDataList","totalXF","getShowDataList","rstList","ele","forEach","unique","getShowFieldDataList","rstAllColumns","rstLst","dataValue_key","haveFormulaColumns","isExistsFields","columnIndexObj","colField","map","dataRst","dataRecord","dataKey","showColumn","dataFieldKey","splice","recordKeys","arr","mapKeys","dataLst","openRecordNotOperation","curDataArr","showDataField","openF","openCol","openChildren","childFieldObj","keyField","openFValue","childField","dataField","RegExp","JSON","parse","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default","dataValueKey","undefined","getTableDataByManyArray","dataArrays","relations","fieldLeft","split","fieldRight","objData","arr1","newArr","leftF","itemRight","newData","openColumn","childrenCol","childrenOpenObj","kk","showResult","dataCount","uniqueEle","substring","totalX01","totalKey","allTotalX","totalXFields","totalXObj","newTotalX","dataFieldX","totalXCurCol","getTableDataByOneArray","d","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__","NADl","exports","content","locals","VVME","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_calculation_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_1174c510_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_calculation_vue__","normalizeComponent","Component","WQVX","expressionForm","expressionRules","readonly","rows","nativeOn","keydown","handleKeyDown","keyUpElement","backSpace","clearAll","tab-click","handleClick","expressTableActive","getTargetTb","selectRow","YjpV","__WEBPACK_IMPORTED_MODULE_1__util_util_js__","__WEBPACK_IMPORTED_MODULE_2__template_calculation__","__WEBPACK_IMPORTED_MODULE_3__template_dataBase__","__WEBPACK_IMPORTED_MODULE_4__util_util__","__WEBPACK_IMPORTED_MODULE_5__util_dataUtil__","components","daCalculation","dataBase","unitOptions","stateOptions","targetCycleOptions","valueMethodOptions","targetType","orgId","targetCycle","currentPage","pageSize","sortable","3","5","8","0","1","2","4","subStr","shortName","unit","rate","dataUpperLimit","dataLowerLimit","effectiveUpperLimit","effectiveLowerLimit","dataDisplayPrecisions","state","valueSource","valueContent","sourceId","dependence","indirectDependence","showSort","calculationLevel","eachValidate","required","maxString","number","trigger","expressionObj","computed","urlType","getTargetTypeTree","val","me","url","method","status","parentTreeObj","getTargetTypeList","toObj","$each","getOrgTree","paramsObj","isAll","groupBys","getOrgList","unitType","_this4","loadingTarget","$refs","formName","resetFields","_this5","validate","valid","$message","success","answerMsg","error","_this6","$confirm","confirmButtonText","cancelButtonText","delete","_this7","targetExpression","expressionTrue","level","indirect_dependence","targetDBsourse","getMeterEnergy","orgIds","energyIds","cycle","startTime","endTime","isCount","rstTableData","YkxX","__WEBPACK_IMPORTED_MODULE_0__util_util__","expressionBtn","expressTableUrl","expressAttr","expressTrueAttr","expressWrap","imeDisabled","expressionForm.expression","element","keyBoard","temp","tempTrue","expressionTb","form","post","matchChar","str","lastTarget","sameTaget","target","lastIndexOf","dataTrue","ZSZL","version","sources","names","mappings","file","sourcesContent","sourceRoot","aeOv","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_dataBase_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_1050f97c_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_dataBase_vue__","al5a","injectStyle","ssrContext","defineProperty","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_target_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_6b969656_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_target_vue__","__vue_styles__","hkW3","value-key","；:label"],"mappings":"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ACAF,WAEErB,MAAO,OAAQ+C,KAAM,OAAQlB,MAAO,OAAQkS,UOvrEpD,IAAA/T,MAAA,OAAA+C,KAAA,YAAAlB,MAAA,OAAAkS,UACA,IPurEQ/T,MOrrER,OPsrEQ+C,KOrrER,aPsrEQlB,MOrrER,OPsrEQkS,UOrrER,EPsrEQ/P,cAEAhE,MOprER,OPqrEQ+C,KOprER,QPqrEQlB,MOprER,OPqrEQkS,UOprER,EPqrEQ/P,cAEAhE,MOnrER,OPorEQ+C,KOnrER,cPorEQlB,MOnrER,OPorEQkS,UOnrER,EPorEQ/P,UACEgQ,EOnrEV,IPorEUC,EOnrEV,IPorEUC,EOjrEV,OAVAlU,MAAA,OAAA+C,KAAA,OAAAlB,MAAA,OAAAkS,UAWA,IPmrEQ/T,MOjrER,OPkrEQ+C,KOjrER,cPkrEQlB,MOjrER,OPkrEQkS,UOjrER,EPkrEQ/P,UACEmQ,EOjrEV,OPkrEUC,EOjrEV,QPkrEUC,EOjrEV,OPkrEUL,EOjrEV,OPkrEUM,EO/qEV,WPkrEQtU,MOhrER,MPirEQ+C,KOhrER,cPirEQlB,MOhrER,OPirEQ0S,QOhrER,EPirEQR,UO/qER,IANA/T,MAAA,KAAA+C,KAAA,eAAAlB,MAAA,OAAAkS,UAQA,IP+qEMrU,eO9qEN,EP+qEMmD,SACES,KO9qER,GP+qEQkR,UO9qER,GP+qEQd,WO9qER,GP+qEQC,MO9qER,GP+qEQC,YO9qER,EP+qEQa,KO9qER,GP+qEQC,KO9qER,EP+qEQC,eO9qER,eP+qEQC,eO9qER,gBP+qEQC,oBO9qER,eP+qEQC,oBO9qER,gBP+qEQC,sBO9qER,IP+qEQC,OO9qER,EP+qEQxR,YO9qER,EP+qEQyR,YO9qER,GP+qEQC,aO9qER,GP+qEQC,SO9qER,KP+qEQC,WO9qER,GP+qEQC,mBO9qER,GP+qEQC,SO9qER,GP+qEQC,iBO7qER,IP+qEMzS,MAAOtF,KAAKgY,cACVlS,MAAQmS,UAAU,EAAMC,UO9qEhC,MP+qEQlB,WAAakB,UO9qErB,MP+qEQhB,MAAQiB,QO9qEhB,GP+qEQjC,YAAc+B,UAAYA,UAAU,EAAMG,QO9qElD,WP+qEQjC,OAAS8B,UO9qEj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,EAAoB+J,EAAE4M,EAA+D,GAAGzV,KOprE1IqF,WPwrEIqB,cAAe,WAEb,OADA1G,KAAKqG,qBOrrEX,EPsrEcrG,KAAKqF,QOrrEnBW,aPsrEQ,IOrrER,GPurEUhG,KAAKqF,QAAQoS,YAAczX,KAAKJ,WOrrE1C+a,ePsrEU3a,KAAKqF,QAAQ0S,iBAAmB/X,KAAKJ,WOrrE/Cgb,MPsrEU5a,KAAKqF,QAAQqS,aAAe1X,KAAKJ,WOrrE3CA,WPsrEUI,KAAKqF,QAAQuS,WAAa5X,KAAKJ,WOrrEzCgY,WPsrEU5X,KAAKqF,QAAQwS,mBAAqB7X,KAAKJ,WOrrEjDiY,kBACA,MPsrEQ,KOrrER,GPsrEU,GAAIrQ,GAAMxH,KAAK0Z,MAAMoB,eOrrE/B5Z,iBPsrEUlB,MAAKqF,QAAQoS,YAAcjQ,EOrrErC5H,WPsrEUI,KAAKqF,QAAQsS,SAAWnQ,EOrrElC7H,SPyrEI2G,gBAAiB,WACf,OAAQtG,KAAKqF,QOrrEnBW,aPsrEQ,IOrrER,GPsrEUhG,KAAK0Z,MAAMgB,iBOrrErBta,WACA,MPsrEQ,KOrrER,GPwrEQ,IOrrER,GPsrEUJ,KAAK0Z,MAAMoB,eOrrErB1a,cP28GI2a,eAAgB,WACd/a,KAAKO,OACHoY,IOtrER,oCPurEQC,OOtrER,MPurEQ9X,QACEiE,MOtrEV,SPurEUiW,OOtrEV,GPurEUC,UOtrEV,GPurEUC,MOtrEV,EPurEUC,UOtrEV,aPurEUC,QOtrEV,aPurEUC,SOtrEV,EPurEUhC,SOrrEV,UAZA7Y,KAAA,SAAAC,GPosEQ,GAAIA,EAAIlB,KAAKsZ,OOtrErB,CPurEU,GAAItZ,GAAOkB,EAAIlB,KOtrEzBmB,QPurEc8G,GACFC,IOtrEZ,EPurEYC,WOtrEZnI,GPurEYoI,YACAC,aOtrEZ,YPurEYC,SACEC,MOrrEd,WPsrEcC,QOrrEd,GPsrEcC,SOprEd,OPsrEcF,MOprEd,UPqrEcC,QOprEd,kBPqrEcC,WACEF,MOnrEhB,cPorEgBC,QOnrEhB,qBPorEgBC,SO/qEhB,SPkrEYC,SACEH,MOhrEd,WPirEcC,QOhrEd,KPirEcC,SO/qEd,OPirEcF,MO/qEd,UP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","file":"static/js/10.71ddc33c878e02c4f923.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ \"29sq\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    value: {\n      type: [Object, Boolean]\n    },\n    type: {\n      default: [Number, String]\n    }\n  },\n  data: function data() {\n    return {\n      dbSourceList: [],\n      dbInterfaceList: [],\n      dbForm: {\n        source: \"\",\n        expression: \"\"\n      }\n    };\n  },\n\n  watch: {\n    dbForm: {\n      handler: function handler(valueObj) {\n        this.$emit(\"input\", valueObj);\n      },\n\n      deep: true\n    }\n  },\n  methods: {\n    resetData: function resetData() {\n      this.dbForm = {\n        source: \"\",\n        expression: \"\"\n      };\n    },\n    getDBSourse: function getDBSourse() {\n      var _this = this;\n\n      this.$ajax(\"rest/target/targetDbSource\").then(function (res) {\n        _this.dbSourceList = res.data.records;\n      });\n    },\n    getTargetInterface: function getTargetInterface() {\n      var _this2 = this;\n\n      this.$ajax.get(\"rest/target/targetInterface\", { params: {} }).then(function (res) {\n        _this2.$nextTick(function () {\n          _this2.dbInterfaceList = res.data.records;\n        });\n      });\n    },\n    getData: function getData() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        _this3.type === 1 ? _this3.getDBSourse() : _this3.getTargetInterface();\n      });\n    },\n\n    // 校验表达式准确性\n    checkExpression: function checkExpression() {\n      return this.dbForm;\n      //   form.valueSource = this.expressionForm.expressionTrue;\n      //   this.$ajax.post(\"\", form).then(res => {\n      //     if (res.data.status) {\n      //       this.$emit(\"input\", this.dbForm);\n      //     } else {\n      //       this.$message.error(res.data.answerMsg);\n      //     }\n      //   });\n    }\n  },\n  updated: function updated() {\n    // this.getData();\n  },\n  mounted: function mounted() {\n    // this.getDBSourse();\n    // this.getTargetInterface();\n  }\n});\n\n/***/ }),\n\n/***/ \"GHae\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('da-manage-page', [_c('div', {\n    attrs: {\n      \"slot\": \"button\"\n    },\n    slot: \"button\"\n  }, [_c('el-button', {\n    attrs: {\n      \"icon\": \"my-zengjia\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.dialogVisible = true;\n      }\n    }\n  }, [_vm._v(\"新增\")])], 1), _vm._v(\" \"), _c('el-form', {\n    attrs: {\n      \"slot\": \"search\",\n      \"inline\": true,\n      \"model\": _vm.searchForm.formdata\n    },\n    slot: \"search\"\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"指标名称\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: (_vm.searchForm.formdata.name),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"name\", $$v)\n      },\n      expression: \"searchForm.formdata.name\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标类型\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.targetTypeData,\n      \"defaultExpandAll\": true\n    },\n    model: {\n      value: (_vm.searchForm.formdata.targetType),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"targetType\", $$v)\n      },\n      expression: \"searchForm.formdata.targetType\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"组织机构\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.entOrgData,\n      \"defaultExpandAll\": true\n    },\n    model: {\n      value: (_vm.searchForm.formdata.orgId),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"orgId\", $$v)\n      },\n      expression: \"searchForm.formdata.orgId\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标周期\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"filterable\": \"\",\n      \"size\": \"medium\",\n      \"placeholder\": \"请选择\"\n    },\n    model: {\n      value: (_vm.searchForm.formdata.targetCycle),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"targetCycle\", $$v)\n      },\n      expression: \"searchForm.formdata.targetCycle\"\n    }\n  }, _vm._l((_vm.targetCycleOptions), function(item, index) {\n    return _c('el-option', {\n      key: index,\n      attrs: {\n        \"label\": item.dataText,\n        \"value\": parseInt(item.dataValue)\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"取值方式\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"filterable\": \"\",\n      \"size\": \"medium\",\n      \"placeholder\": \"请选择\"\n    },\n    model: {\n      value: (_vm.searchForm.formdata.valueMethod),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"valueMethod\", $$v)\n      },\n      expression: \"searchForm.formdata.valueMethod\"\n    }\n  }, _vm._l((_vm.valueMethodOptions), function(item, index) {\n    return _c('el-option', {\n      key: index,\n      attrs: {\n        \"label\": item.dataText,\n        \"value\": parseInt(item.dataValue)\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('el-form-item', [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.getTbList\n    }\n  }, [_vm._v(\"查询\")])], 1)], 1), _vm._v(\" \"), _c('da-table', {\n    ref: \"table\",\n    attrs: {\n      \"slot\": \"content\",\n      \"colums\": _vm.colsData,\n      \"table-list\": _vm.tableList,\n      \"search-data\": _vm.searchForm,\n      \"showSelection\": false\n    },\n    on: {\n      \"callBack\": _vm.getTbList\n    },\n    slot: \"content\"\n  }, [_c('el-table-column', {\n    attrs: {\n      \"slot\": \"operation\",\n      \"property\": \"operation\",\n      \"label\": \"操作\",\n      \"width\": \"150\",\n      \"align\": \"center\",\n      \"fixed\": \"right\"\n    },\n    slot: \"operation\",\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              _vm.editTb(scope.row)\n            }\n          }\n        }, [_vm._v(\"编辑\")]), _vm._v(\" \"), _c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              _vm.delTb(scope.row)\n            }\n          }\n        }, [_vm._v(\"删除\")])]\n      }\n    }])\n  })], 1)], 1), _vm._v(\" \"), _c('da-dialog', {\n    staticClass: \"target-dialog\",\n    attrs: {\n      \"title\": _vm.title,\n      \"visible\": _vm.dialogVisible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.dialogVisible = $event\n      },\n      \"close\": function($event) {\n        _vm.closeDialog('addForm')\n      }\n    }\n  }, [_c('el-form', {\n    ref: \"addForm\",\n    staticClass: \"fm-line-50p clearfix\",\n    attrs: {\n      \"label-width\": \"100px\",\n      \"model\": _vm.addForm,\n      \"rules\": _vm.rules\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"指标名称\",\n      \"prop\": \"name\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.name),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"name\", $$v)\n      },\n      expression: \"addForm.name\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标简称\",\n      \"prop\": \"shortName\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.shortName),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"shortName\", $$v)\n      },\n      expression: \"addForm.shortName\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"组织机构\",\n      \"prop\": \"orgId\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.entOrgData,\n      \"defaultExpandAll\": true\n    },\n    model: {\n      value: (_vm.addForm.orgId),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"orgId\", $$v)\n      },\n      expression: \"addForm.orgId\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标类型\",\n      \"prop\": \"targetType\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.targetTypeData,\n      \"defaultExpandAll\": true\n    },\n    on: {\n      \"change\": _vm.getTargetUnitList\n    },\n    model: {\n      value: (_vm.addForm.targetType),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"targetType\", $$v)\n      },\n      expression: \"addForm.targetType\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标周期\",\n      \"prop\": \"targetCycle\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.addForm.targetCycle),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"targetCycle\", $$v)\n      },\n      expression: \"addForm.targetCycle\"\n    }\n  }, _vm._l((_vm.targetCycleOptions), function(item) {\n    return _c('el-radio', {\n      key: item.dataValue,\n      attrs: {\n        \"label\": parseInt(item.dataValue)\n      }\n    }, [_vm._v(_vm._s(item.dataText))])\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标单位\",\n      \"prop\": \"unit\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"filterable\": \"\",\n      \"placeholder\": \"请选择\"\n    },\n    model: {\n      value: (_vm.addForm.unit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"unit\", $$v)\n      },\n      expression: \"addForm.unit\"\n    }\n  }, _vm._l((_vm.unitOptions), function(item, index) {\n    return _c('el-option', {\n      key: index,\n      attrs: {\n        \"label\": item.identifyValue,\n        \"value\": item.identify\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"单位换算倍率\",\n      \"prop\": \"rate\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.rate),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"rate\", $$v)\n      },\n      expression: \"addForm.rate\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"数据上限\",\n      \"prop\": \"dataUpperLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.dataUpperLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dataUpperLimit\", $$v)\n      },\n      expression: \"addForm.dataUpperLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"数据下限\",\n      \"prop\": \"dataLowerLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.dataLowerLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dataLowerLimit\", $$v)\n      },\n      expression: \"addForm.dataLowerLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"统计上限\",\n      \"prop\": \"effectiveUpperLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.effectiveUpperLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"effectiveUpperLimit\", $$v)\n      },\n      expression: \"addForm.effectiveUpperLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"统计下限\",\n      \"prop\": \"effectiveLowerLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.effectiveLowerLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"effectiveLowerLimit\", $$v)\n      },\n      expression: \"addForm.effectiveLowerLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"显示位数\",\n      \"prop\": \"dataDisplayPrecisions\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.dataDisplayPrecisions),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dataDisplayPrecisions\", $$v)\n      },\n      expression: \"addForm.dataDisplayPrecisions\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"正常使用\",\n      \"prop\": \"state\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.addForm.state),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"state\", $$v)\n      },\n      expression: \"addForm.state\"\n    }\n  }, _vm._l((_vm.stateOptions), function(item) {\n    return _c('el-radio', {\n      key: item.dataValue,\n      attrs: {\n        \"label\": item.dataValue\n      }\n    }, [_vm._v(_vm._s(item.dataText))])\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    staticClass: \"fm-item-100p\",\n    attrs: {\n      \"label\": \"取值方式\",\n      \"prop\": \"valueMethod\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.addForm.valueMethod),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"valueMethod\", $$v)\n      },\n      expression: \"addForm.valueMethod\"\n    }\n  }, _vm._l((_vm.valueMethodOptions), function(item) {\n    return _c('el-radio', {\n      key: item.dataValue,\n      attrs: {\n        \"label\": parseInt(item.dataValue)\n      }\n    }, [_vm._v(_vm._s(item.dataText))])\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.addForm.valueMethod !== '0'),\n      expression: \"addForm.valueMethod!=='0'\"\n    }],\n    staticClass: \"fm-item-100p\",\n    attrs: {\n      \"label\": \"表达式\",\n      \"prop\": \"valueSource\"\n    }\n  }, [_c('div', {\n    staticClass: \"target-flex\"\n  }, [_c('el-input', {\n    attrs: {\n      \"row\": 6,\n      \"type\": \"textarea\"\n    },\n    model: {\n      value: (_vm.addForm.valueSource),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"valueSource\", $$v)\n      },\n      expression: \"addForm.valueSource\"\n    }\n  }), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"target-valuesource-btn\",\n    attrs: {\n      \"disabled\": _vm.addForm.valueMethod === '0' || !_vm.addForm.valueMethod\n    },\n    on: {\n      \"click\": _vm.editExpression\n    }\n  }, [_vm._v(\"重置\")])], 1)]), _vm._v(\" \"), _c('el-form-item', {\n    staticClass: \"fm-item-100p\",\n    attrs: {\n      \"label\": \"描述\",\n      \"prop\": \"valueContent\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"row\": 6,\n      \"type\": \"textarea\"\n    },\n    model: {\n      value: (_vm.addForm.valueContent),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"valueContent\", $$v)\n      },\n      expression: \"addForm.valueContent\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.addForm.valueMethod === 1),\n      expression: \"addForm.valueMethod===1\"\n    }],\n    attrs: {\n      \"label\": \"数据源\",\n      \"prop\": \"sourceId\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.sourceId),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"sourceId\", $$v)\n      },\n      expression: \"addForm.sourceId\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"直接依赖\",\n      \"prop\": \"dependence\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"disabled\": \"\"\n    },\n    model: {\n      value: (_vm.addForm.dependence),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dependence\", $$v)\n      },\n      expression: \"addForm.dependence\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"间接依赖\",\n      \"prop\": \"indirectDependence\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"disabled\": \"\"\n    },\n    model: {\n      value: (_vm.addForm.indirectDependence),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"indirectDependence\", $$v)\n      },\n      expression: \"addForm.indirectDependence\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"显示顺序\",\n      \"prop\": \"showSort\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.showSort),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"showSort\", $$v)\n      },\n      expression: \"addForm.showSort\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"dialog-footer\",\n    attrs: {\n      \"slot\": \"footer\"\n    },\n    slot: \"footer\"\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.saveDialog('addForm')\n      }\n    }\n  }, [_vm._v(\"确 定\")]), _vm._v(\" \"), _c('el-button', {\n    on: {\n      \"click\": function($event) {\n        _vm.dialogVisible = false\n      }\n    }\n  }, [_vm._v(\"取 消\")])], 1)], 1), _vm._v(\" \"), _c('da-dialog', {\n    attrs: {\n      \"title\": _vm.expressionTitle,\n      \"visible\": _vm.sourceDialogVisible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.sourceDialogVisible = $event\n      },\n      \"close\": _vm.expressionClose\n    }\n  }, [(_vm.addForm.valueMethod === 3) ? _c('da-calculation', {\n    ref: \"targetExpression\",\n    attrs: {\n      \"target-type\": _vm.colsData[2].displace\n    },\n    model: {\n      value: (_vm.expression),\n      callback: function($$v) {\n        _vm.expression = $$v\n      },\n      expression: \"expression\"\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.addForm.valueMethod === 1 || _vm.addForm.valueMethod === 2) ? _c('data-base', {\n    ref: \"targetDBsourse\",\n    attrs: {\n      \"type\": _vm.addForm.valueMethod\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c('div', {\n    staticClass: \"dialog-footer\",\n    attrs: {\n      \"slot\": \"footer\"\n    },\n    slot: \"footer\"\n  }, [(_vm.addForm.valueMethod === 3) ? _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.checkExpression()\n      }\n    }\n  }, [_vm._v(\"校验\")]) : _vm._e(), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\",\n      \"disabled\": _vm.addForm.valueMethod === 3 && _vm.expression === false\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setExpression()\n      }\n    }\n  }, [_vm._v(\"保存\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.sourceDialogVisible = false\n      }\n    }\n  }, [_vm._v(\"关闭\")])], 1)], 1)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"KbJL\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export getTableDataTest */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getTableDataByOneArray; });\n/* unused harmony export getTableDataByManyArray */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(\"3cXf\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__ = __webpack_require__(\"ZLEe\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(\"yt7g\");\n\n\n\n/**\r\n * 测试方法，obj结构可参照该方法中的obj\r\n */\nfunction getTableDataTest() {\n    var dataLst1 = [{ equipType: 1, equipTypeName: \"中央空调\" }, { equipType: 2, equipTypeName: \"抽风机\" }, { equipType: 3, equipTypeName: \"新风机\" }];\n    var dataLst2 = [{ id: 1, name: \"中央空调1#\", type: 1 }, { id: 2, name: \"中央空调2#\", type: 1 }, { id: 3, name: \"抽风机1#\", type: 2 }, { id: 4, name: \"抽风机2#\", type: 2 }, { id: 5, name: \"新风机1#\", type: 3 }];\n    var dataLst3 = [{\n        id: 1,\n        equipId: 1,\n        time: \"2018-04\",\n        dataTime: \"2018-04-01\",\n        dataValue: 52.6\n    }, {\n        id: 2,\n        equipId: 1,\n        time: \"2018-05\",\n        dataTime: \"2018-05-01\",\n        dataValue: 56.3\n    }, {\n        id: 3,\n        equipId: 2,\n        time: \"2018-04\",\n        dataTime: \"2018-04-01\",\n        dataValue: 65.6\n    }, {\n        id: 4,\n        equipId: 2,\n        time: \"2018-05\",\n        dataTime: \"2018-05-01\",\n        dataValue: 64.2\n    }, {\n        id: 5,\n        equipId: 3,\n        time: \"2018-04\",\n        dataTime: \"2018-04-01\",\n        dataValue: 83.6\n    }, {\n        id: 6,\n        equipId: 3,\n        time: \"2018-05\",\n        dataTime: \"2018-05-01\",\n        dataValue: 76.6\n    }, {\n        id: 7,\n        equipId: 4,\n        time: \"2018-04\",\n        dataTime: \"2018-04-01\",\n        dataValue: 42.6\n    }, {\n        id: 8,\n        equipId: 4,\n        time: \"2018-05\",\n        dataTime: \"2018-05-01\",\n        dataValue: 47.6\n    }, {\n        id: 9,\n        equipId: 5,\n        time: \"2018-04\",\n        dataTime: \"2018-04-01\",\n        dataValue: 95.6\n    }, {\n        id: 10,\n        equipId: 5,\n        time: \"2018-05\",\n        dataTime: \"2018-05-01\",\n        dataValue: 88.6\n    }];\n    var obj = {\n        num: 3,\n        dataArray: [dataLst1, dataLst2, dataLst3],\n        relation: [\"equipType,type\", \"id,equipId\"],\n        uniqueField: [\"equipTypeName\"],\n        column: [{\n            field: \"equipTypeName\",\n            formula: \"\",\n            children: null\n        }, {\n            field: \"equipId\",\n            formula: \"COUNT([equipId])\",\n            children: null\n        }, {\n            field: \"time\",\n            formula: \"OPEN([time])\",\n            children: [{\n                field: \"dataValue\",\n                formula: \"SUM([dataValue])\",\n                children: null\n            }, {\n                field: \"scale\",\n                formula: \"SUM([dataValue])/TOTALX([dataValue])\",\n                children: null\n            }]\n        }, {\n            field: \"ringRatio\",\n            formula: \"RINGRATIO([dataValue])\",\n            children: null\n        }],\n        totalX: [{\n            field: \"equipTypeName\",\n            formula: \"设备合计\",\n            children: null\n        }, {\n            field: \"equipId\",\n            formula: \"SUM([equipId])\",\n            children: null\n        }, {\n            field: \"time\",\n            formula: \"\",\n            children: [{\n                field: \"dataValue\",\n                formula: \"SUM([dataValue])\",\n                children: null\n            }, {\n                field: \"scale\",\n                formula: \"1\",\n                children: null\n            }]\n        }, {\n            field: \"ringRatio\",\n            formula: \"RINGRATIO([dataValue])\",\n            children: null\n        }],\n        totalY: [{\n            field: \"totalDataValue\",\n            formula: \"SUM([dataValue])\",\n            children: null\n        }]\n    };\n    var d1 = new Date();\n    getTableData(obj);\n    var d2 = new Date();\n    console.log(\"运算时间：\" + (d2.getTime() - d1.getTime()) + \"毫秒。\");\n}\n\n/**\r\n * 对象复制，针对不同属性\r\n * @param o 对象，合并时以该对象为准\r\n * @param n 被合并对象，合并时以牺牲对象为准\r\n */\nfunction concatObject(o, n) {\n    var obj = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(o);\n    for (var p in n) {\n        if (n.hasOwnProperty(p) && !obj.hasOwnProperty(p)) {\n            obj[p] = n[p];\n        }\n    }\n    return obj;\n}\n\n/**\r\n * 如果两个对象存在相同属性，并且字段值一致，则合并\r\n * @param dataList1 数组1，返回结果以该数组为准\r\n * @param dataList2 数组2，用来合并的数组\r\n * @param relationList 根据那些字段来合并\r\n */\nfunction concatArray(dataList1, dataList2, relationList) {\n    var list = [];\n    var dataList1Obj = {};\n    for (var j = 0; j < dataList1.length; j++) {\n        var obj1 = dataList1[j];\n        var key = \"\";\n        for (var k = 0; k < relationList.length; k++) {\n            key += obj1[relationList[k]];\n        }\n        dataList1Obj[key] = obj1;\n    }\n    var dataList2Obj = {};\n    for (var _j = 0; _j < dataList2.length; _j++) {\n        var obj2 = dataList2[_j];\n        var _key = \"\";\n        for (var _k = 0; _k < relationList.length; _k++) {\n            _key += obj2[relationList[_k]];\n        }\n        var rightData = dataList1Obj[_key];\n        list.push(concatObject(obj2, rightData));\n    }\n    return list;\n}\n\n/**\r\n * 公式解析\r\n * @param fieldFormula 字段的公式\r\n * @param reg 匹配的正则式\r\n */\nfunction fieldFormulaAnalysis(fieldFormula, reg) {\n    var rst = [];\n    var lastIndex = 1;\n    reg.lastIndex = 0;\n    while (lastIndex) {\n        var rstArr1 = reg.exec(fieldFormula);\n        if (rstArr1 != null) {\n            rst.push(rstArr1[1]);\n        }\n        lastIndex = reg.lastIndex;\n    }\n    return rst;\n}\n\n/**\r\n * 得到公式中的字段\r\n * @param columns 需要显示的字段数组\r\n */\nfunction getExpressionField(columns) {\n    var fieldObj = {\n        count: [],\n        totalX: [],\n        open: [],\n        ringRatio: [],\n        sum: [],\n        avg: [],\n        max: [],\n        min: []\n    };\n    // 统计数量正则式\n    var countReg = /COUNT\\(\\[(\\w+)\\]\\)/g;\n    // 统计正则式\n    var totalXReg = /TOTALX\\(\\[(\\w+)\\]\\)/g;\n    // 展开正则式\n    var openReg = /OPEN\\(\\[(\\w+)\\]\\)/g;\n    // 求比例正则式\n    var ringRatioReg = /RINGRATIO\\(\\[(\\w+)\\]\\)/g;\n    // 求和正则式\n    var sumReg = /SUM\\(\\[(\\w+)\\]\\)/g;\n    // 平均值正则式\n    var avgReg = /AVG\\(\\[(\\w+)\\]\\)/g;\n    // 最大值正则式\n    var maxReg = /MAX\\(\\[(\\w+)\\]\\)/g;\n    // 最小值正则式\n    var minReg = /MIN\\(\\[(\\w+)\\]\\)/g;\n    if (columns instanceof Array) {\n        for (var i = 0; i < columns.length; i++) {\n            var item = columns[i];\n            // 得到所有的统计数量字段\n            if (countReg.test(item.formula)) {\n                var fieldSub = fieldFormulaAnalysis(item.formula, countReg);\n                var fieldSubObj = { index: i, fields: fieldSub.toString() };\n                fieldObj.count.push(fieldSubObj);\n            }\n            // 得到所有的统计字段\n            if (totalXReg.test(item.formula)) {\n                var _fieldSub = fieldFormulaAnalysis(item.formula, totalXReg);\n                var _fieldSubObj = { index: i, fields: _fieldSub.toString() };\n                fieldObj.totalX.push(_fieldSubObj);\n            }\n            // 得到所有的展开字段\n            if (openReg.test(item.formula)) {\n                var _fieldSub2 = fieldFormulaAnalysis(item.formula, openReg);\n                var _fieldSubObj2 = { index: i, fields: _fieldSub2.toString() };\n                fieldObj.open.push(_fieldSubObj2);\n            }\n            // 得到所有的比例字段\n            if (ringRatioReg.test(item.formula)) {\n                var _fieldSub3 = fieldFormulaAnalysis(item.formula, ringRatioReg);\n                var _fieldSubObj3 = { index: i, fields: _fieldSub3.toString() };\n                fieldObj.ringRatio.push(_fieldSubObj3);\n            }\n            // 得到所有的求和字段\n            if (sumReg.test(item.formula)) {\n                var _fieldSub4 = fieldFormulaAnalysis(item.formula, sumReg);\n                var _fieldSubObj4 = { index: i, fields: _fieldSub4.toString() };\n                fieldObj.sum.push(_fieldSubObj4);\n            }\n            // 得到所有的平均值字段\n            if (avgReg.test(item.formula)) {\n                var _fieldSub5 = fieldFormulaAnalysis(item.formula, avgReg);\n                var _fieldSubObj5 = { index: i, fields: _fieldSub5.toString() };\n                fieldObj.avg.push(_fieldSubObj5);\n            }\n            // 得到所有的最大值字段\n            if (maxReg.test(item.formula)) {\n                var _fieldSub6 = fieldFormulaAnalysis(item.formula, maxReg);\n                var _fieldSubObj6 = { index: i, fields: _fieldSub6.toString() };\n                fieldObj.max.push(_fieldSubObj6);\n            }\n            // 得到所有的最小值字段\n            if (minReg.test(item.formula)) {\n                var _fieldSub7 = fieldFormulaAnalysis(item.formula, minReg);\n                var _fieldSubObj7 = { index: i, fields: _fieldSub7.toString() };\n                fieldObj.min.push(_fieldSubObj7);\n            }\n        }\n    } else {\n        var _item = columns;\n        var _i = 0;\n        // 得到所有的统计数量字段\n        if (countReg.test(_item.formula)) {\n            var _fieldSub8 = fieldFormulaAnalysis(_item.formula, countReg);\n            var _fieldSubObj8 = { index: _i, fields: _fieldSub8.toString() };\n            fieldObj.count.push(_fieldSubObj8);\n        }\n        // 得到所有的统计字段\n        if (totalXReg.test(_item.formula)) {\n            var _fieldSub9 = fieldFormulaAnalysis(_item.formula, totalXReg);\n            var _fieldSubObj9 = { index: _i, fields: _fieldSub9.toString() };\n            fieldObj.totalX.push(_fieldSubObj9);\n        }\n        // 得到所有的展开字段\n        if (openReg.test(_item.formula)) {\n            var _fieldSub10 = fieldFormulaAnalysis(_item.formula, openReg);\n            var _fieldSubObj10 = { index: _i, fields: _fieldSub10.toString() };\n            fieldObj.open.push(_fieldSubObj10);\n        }\n        // 得到所有的比例字段\n        if (ringRatioReg.test(_item.formula)) {\n            var _fieldSub11 = fieldFormulaAnalysis(_item.formula, ringRatioReg);\n            var _fieldSubObj11 = { index: _i, fields: _fieldSub11.toString() };\n            fieldObj.ringRatio.push(_fieldSubObj11);\n        }\n        // 得到所有的求和字段\n        if (sumReg.test(_item.formula)) {\n            var _fieldSub12 = fieldFormulaAnalysis(_item.formula, sumReg);\n            var _fieldSubObj12 = { index: _i, fields: _fieldSub12.toString() };\n            fieldObj.sum.push(_fieldSubObj12);\n        }\n        // 得到所有的平均值字段\n        if (avgReg.test(_item.formula)) {\n            var _fieldSub13 = fieldFormulaAnalysis(_item.formula, avgReg);\n            var _fieldSubObj13 = { index: _i, fields: _fieldSub13.toString() };\n            fieldObj.avg.push(_fieldSubObj13);\n        }\n        // 得到所有的最大值字段\n        if (maxReg.test(_item.formula)) {\n            var _fieldSub14 = fieldFormulaAnalysis(_item.formula, maxReg);\n            var _fieldSubObj14 = { index: _i, fields: _fieldSub14.toString() };\n            fieldObj.max.push(_fieldSubObj14);\n        }\n        // 得到所有的最小值字段\n        if (minReg.test(_item.formula)) {\n            var _fieldSub15 = fieldFormulaAnalysis(_item.formula, minReg);\n            var _fieldSubObj15 = { index: _i, fields: _fieldSub15.toString() };\n            fieldObj.min.push(_fieldSubObj15);\n        }\n    }\n    return fieldObj;\n}\n\n/**\r\n * 根据字段数组（包含字字段）得到所有的字段数组，将子字段也放在列表中\r\n * @param columns 原始显示字段\r\n */\nfunction getAllColumn(columns) {\n    // 遍历字段，将子字段展开，找到最终不显示的字段\n    var allColumns = [];\n    for (var i = 0; i < columns.length; i++) {\n        var curColumn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(columns[i]);\n        allColumns.push(curColumn);\n        if (curColumn.children && curColumn.children.length > 0) {\n            var childs = getAllColumn(curColumn.children) || [];\n            allColumns = allColumns.concat(childs);\n        }\n    }\n    return allColumns;\n}\n\n/**\r\n * X轴数据计算\r\n * @param rstDataList 结果数据数组，里面包含已经计算好的字段值，用于X轴的求和等处理\r\n * @param totalX 展开后并增加类似\"[2018-01]\"的X轴字段数组\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param columnX 当前需要计算的X轴字段\r\n */\nfunction getTotalXValue(rstDataList, totalX, allColumns, columnX) {\n    var formula = columnX.formula;\n    if (!formula) {\n        return \"\";\n    }\n    var colObj = getExpressionField(columnX);\n    if (colObj.open && colObj.open.length > 0) {\n        return \"\";\n    }\n    var rstDataArray = [];\n    var rstkeys = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(rstDataList);\n    for (var i = 0; i < rstkeys.length; i++) {\n        rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\n    }\n    var field = columnX.field;\n    var suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\n\n    var countField = colObj.count && colObj.count.length > 0 ? colObj.count[0].fields + suffix : \"\";\n    var maxField = colObj.max && colObj.max.length > 0 ? colObj.max[0].fields + suffix : \"\";\n    var minField = colObj.min && colObj.min.length > 0 ? colObj.min[0].fields + suffix : \"\";\n    var sumField = colObj.sum && colObj.sum.length > 0 ? colObj.sum[0].fields + suffix : \"\";\n    var avgField = colObj.avg && colObj.avg.length > 0 ? colObj.avg[0].fields + suffix : \"\";\n    var countLst = \",\";\n    var count = 0;\n    var maxData = rstDataArray[0][maxField] || \"\";\n    var minData = rstDataArray[0][minField] || \"\";\n    var sumData = 0;\n    // 平均值的和值\n    var avgSumData = 0;\n    // 平均值叠加的数量\n    var avgCount = 0;\n    for (var _i2 = 0; _i2 < rstDataArray.length - 1; _i2++) {\n        var record = rstDataArray[_i2];\n        if (countField && countLst.indexOf(\",\" + record[countField] + \",\") == -1) {\n            countLst += record[countField] + \",\";\n            count++;\n        }\n        if (maxField && maxData < record[maxField]) {\n            maxData = record[maxField];\n        }\n        if (minField && minData > record[minField]) {\n            minData = record[minField];\n        }\n        if (sumField && record[sumField]) {\n            sumData += record[sumField];\n        }\n        if (avgField && record[avgField]) {\n            avgSumData += record[avgField];\n            avgCount++;\n        }\n    }\n    if (colObj.count && colObj.count.length > 0) {\n        formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\n    }\n    if (colObj.ringRatio && colObj.ringRatio.length > 0) {\n        // 针对结果数据进行环比、同比\n        var rField = colObj.ringRatio[0].fields;\n        var dataFields = [];\n        for (var k = 0; k < allColumns.length; k++) {\n            if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\n                var xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\n                if (xDataField == rField) {\n                    dataFields.push(allColumns[k].field);\n                }\n            }\n        }\n        if (!dataFields || dataFields.length < 2) {\n            formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\n        } else {\n            dataFields.sort();\n            var _record = rstDataArray[rstDataArray.length - 1];\n            var curDataDateF = dataFields[dataFields.length - 1];\n            var lastDataDateF = dataFields[dataFields.length - 2];\n            var scaleR = _record[curDataDateF] / _record[lastDataDateF] - 1;\n            formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\n        }\n    }\n    if (colObj.sum && colObj.sum.length > 0) {\n        formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\n    }\n    if (colObj.avg && colObj.avg.length > 0) {\n        var avgData = avgSumData / avgCount;\n        formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\n    }\n    if (colObj.max && colObj.max.length > 0) {\n        formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\n    }\n    if (colObj.min && colObj.min.length > 0) {\n        formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\n    }\n    if (colObj.totalX && colObj.totalX.length > 0) {\n        formula = formula.replace(/TOTALX\\(\\[(\\w+)\\]\\)/g, rstDataArray[rstDataArray.length - 1][colObj.totalX[0].fields]);\n    }\n    // 替换没有函数的字段\n    if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n        var vKeys = formula.match(/\\[(.+)\\]/g);\n        formula = formula.replace(/\\(\\[(\\w+)\\]\\)/g, rstDataArray[0][vKeys[0] + suffix]);\n    }\n    // 后续需要修改eval(formula)该四则运算\n    var data = eval(formula);\n    return data;\n}\n\n/**\r\n * Y轴数据计算\r\n * @param totalY  X轴字段数组\r\n * @param allColumns  展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param rstDataArray  出了Y轴未计算，其他已经计算好的数组\r\n */\nfunction getTotalYValue(totalY, allColumns, rstDataArray) {\n    for (var i = 0; i < totalY.length; i++) {\n        var totaoYCol = totalY[i];\n        var formulaRaw = totaoYCol.formula;\n        var colObj = getExpressionField(totaoYCol);\n        var countField = colObj.count && colObj.count.length > 0 ? colObj.count[0].fields : \"\";\n        var maxField = colObj.max && colObj.max.length > 0 ? colObj.max[0].fields : \"\";\n        var minField = colObj.min && colObj.min.length > 0 ? colObj.min[0].fields : \"\";\n        var sumField = colObj.sum && colObj.sum.length > 0 ? colObj.sum[0].fields : \"\";\n        var avgField = colObj.avg && colObj.avg.length > 0 ? colObj.avg[0].fields : \"\";\n        var countFieldArr = [];\n        var maxFieldArr = [];\n        var minFieldArr = [];\n        var sumFieldArr = [];\n        var avgFieldArr = [];\n        for (var j = 0; j < allColumns.length; j++) {\n            var column = allColumns[j].field.replace(/\\[(.+)\\]/g, \"\");\n            if (column == countField) {\n                countFieldArr.push(allColumns[j].field);\n            }\n            if (column == maxField) {\n                maxFieldArr.push(allColumns[j].field);\n            }\n            if (column == minField) {\n                minFieldArr.push(allColumns[j].field);\n            }\n            if (column == sumField) {\n                sumFieldArr.push(allColumns[j].field);\n            }\n            if (column == avgField) {\n                avgFieldArr.push(allColumns[j].field);\n            }\n        }\n        for (var ki = 0; ki < rstDataArray.length; ki++) {\n            var formula = formulaRaw;\n            var record = rstDataArray[ki];\n            var countLst = \",\";\n            var count = 0;\n            var maxData = record[maxFieldArr[0]] || \"\";\n            var minData = record[minFieldArr[0]] || \"\";\n            var sumData = 0;\n            // 平均值的和值\n            var avgSumData = 0;\n            // 平均值叠加的数量\n            var avgCount = 0;\n            if (colObj.count && colObj.count.length > 0) {\n                for (var k = 0; k < countFieldArr.length; k++) {\n                    if (countField && countLst.indexOf(\",\" + record[countFieldArr[k]] + \",\") == -1) {\n                        countLst += record[countFieldArr[k]] + \",\";\n                        count++;\n                    }\n                }\n                formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\n            }\n            if (colObj.ringRatio && colObj.ringRatio.length > 0) {\n                // 最后处理\n            }\n            if (colObj.sum && colObj.sum.length > 0) {\n                for (var _k2 = 0; _k2 < sumFieldArr.length; _k2++) {\n                    if (sumField && record[sumFieldArr[_k2]]) {\n                        sumData += record[sumFieldArr[_k2]];\n                    }\n                }\n                formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\n            }\n            if (colObj.avg && colObj.avg.length > 0) {\n                for (var _k3 = 0; _k3 < avgFieldArr.length; _k3++) {\n                    if (avgField && record[avgFieldArr[_k3]]) {\n                        avgSumData += record[avgFieldArr[_k3]];\n                        avgCount++;\n                    }\n                }\n                var avgData = avgSumData / avgCount;\n                formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\n            }\n            if (colObj.max && colObj.max.length > 0) {\n                for (var _k4 = 0; _k4 < maxFieldArr.length; _k4++) {\n                    if (maxField && record[maxFieldArr[_k4]]) {\n                        maxData = maxData < record[maxFieldArr[_k4]] ? record[maxFieldArr[_k4]] : maxData;\n                    }\n                }\n                formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\n            }\n            if (colObj.min && colObj.min.length > 0) {\n                for (var _k5 = 0; _k5 < minFieldArr.length; _k5++) {\n                    if (minField && record[minFieldArr[_k5]]) {\n                        minData = minData > record[minFieldArr[_k5]] ? record[minFieldArr[_k5]] : minData;\n                    }\n                }\n                formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\n            }\n            if (colObj.totalX && colObj.totalX.length > 0) {\n                // let totalXR=rstDataArray[rstDataArray.length-1];\n                // let totalXF = colObj.totalX[0].fields + suffix;\n                // formula = formula.replace(\n                //   /TOTALX\\(\\[(\\w+)\\]\\)/g,\n                //   rstDataList[totalX[0].formula][totalXF]\n                // );\n                // 后续需要改进\n                formula = formula.replace(/TOTALX\\(\\[(\\w+)\\]\\)/g, 1);\n            }\n            // 替换没有函数的字段\n            if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n                formula = formula.replace(/\\(\\[(\\w+)\\]\\)/g, record[totaoYCol.field]);\n            }\n            // 后续需要修改eval(formula)该四则运算\n            var data = eval(formula);\n            rstDataArray[ki][totaoYCol.field] = data;\n        }\n    }\n    return rstDataArray;\n}\n\n/**\r\n * 运算函数求值\r\n * @param allDataArr 所有的数据\r\n * @param dataObj 使用唯一性字段作为key的object\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param column 当前处理的字段\r\n * @param colObj 字段column的formula解析后的object\r\n * @param totalX X轴显示字段数组\r\n * @param rstDataList 已经处理的数据，根据column处理后的数据需要粘贴在该数据后面\r\n */\nfunction getDataByOperation(allDataArr, dataObj, allColumns, column, colObj, totalX, rstDataList) {\n    if (colObj.open && colObj.open.length > 0) {\n        return rstDataList;\n    }\n    // formula=\"SUM([dataValue])/[totalX[dataVlue]\"\n    var curDataList = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(rstDataList);\n    var keys = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(dataObj);\n    var field = column.field;\n    var suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\n    for (var i = 0; i < keys.length; i++) {\n        var uniqueDataList = dataObj[keys[i]];\n        var countField = colObj.count && colObj.count.length > 0 ? colObj.count[0].fields + suffix : \"\";\n        var maxField = colObj.max && colObj.max.length > 0 ? colObj.max[0].fields + suffix : \"\";\n        var minField = colObj.min && colObj.min.length > 0 ? colObj.min[0].fields + suffix : \"\";\n        var sumField = colObj.sum && colObj.sum.length > 0 ? colObj.sum[0].fields + suffix : \"\";\n        var avgField = colObj.avg && colObj.avg.length > 0 ? colObj.avg[0].fields + suffix : \"\";\n        var countLst = \",\";\n        var count = 0;\n        var maxData = uniqueDataList[0][maxField] || \"\";\n        var minData = uniqueDataList[0][minField] || \"\";\n        var sumData = 0;\n        // 平均值的和值\n        var avgSumData = 0;\n        // 平均值叠加的数量\n        var avgCount = 0;\n        var formula = column.formula;\n        for (var j = 0; j < uniqueDataList.length; j++) {\n            var record = uniqueDataList[j];\n            if (countField && countLst.indexOf(\",\" + record[countField] + \",\") == -1) {\n                countLst += record[countField] + \",\";\n                count++;\n            }\n            if (maxField && maxData < record[maxField]) {\n                maxData = record[maxField];\n            }\n            if (minField && minData > record[minField]) {\n                minData = record[minField];\n            }\n            if (sumField && record[sumField]) {\n                sumData += record[sumField];\n            }\n            if (avgField && record[avgField]) {\n                avgSumData += record[avgField];\n                avgCount++;\n            }\n        }\n        if (colObj.count && colObj.count.length > 0) {\n            formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\n        }\n        if (colObj.ringRatio && colObj.ringRatio.length > 0) {\n            // 针对结果数据进行环比、同比\n            var rField = colObj.ringRatio[0].fields;\n            var dataFields = [];\n            for (var k = 0; k < allColumns.length; k++) {\n                if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\n                    var xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\n                    if (xDataField == rField) {\n                        dataFields.push(allColumns[k].field);\n                    }\n                }\n            }\n            if (!dataFields || dataFields.length < 2) {\n                formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\n            } else {\n                dataFields.sort();\n                var curDataDateF = dataFields[dataFields.length - 1];\n                var lastDataDateF = dataFields[dataFields.length - 2];\n                var scaleR = curDataList[keys[i]][curDataDateF] / curDataList[keys[i]][lastDataDateF] - 1;\n                formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\n            }\n        }\n        if (colObj.sum && colObj.sum.length > 0) {\n            formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\n        }\n        if (colObj.avg && colObj.avg.length > 0) {\n            var avgData = avgSumData / avgCount;\n            formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\n        }\n        if (colObj.max && colObj.max.length > 0) {\n            formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\n        }\n        if (colObj.min && colObj.min.length > 0) {\n            formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\n        }\n        if (colObj.totalX && colObj.totalX.length > 0) {\n            var totalXF = colObj.totalX[0].fields + suffix;\n            formula = formula.replace(/TOTALX\\(\\[(\\w+)\\]\\)/g, rstDataList[totalX[0].formula][totalXF]);\n        }\n        // 替换没有函数的字段\n        if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n            var vKeys = formula.match(/\\[(.+)\\]/g);\n            formula = formula.replace(/\\(\\[(\\w+)\\]\\)/g, uniqueDataList[0][vKeys[0] + suffix]);\n        }\n        // 后续需要修改eval(formula)该四则运算\n        var data = eval(formula);\n        curDataList[keys[i]][field] = data;\n    }\n    return curDataList;\n}\n\n/**\r\n * 得到最终展示的数据数组\r\n * @param allDataArr 所有结果的数据\r\n * @param dataObj 使用唯一性字段作为key的object\r\n * @param uniqueField 唯一字段数组\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param column 当前处理的字段\r\n * @param rstDataList 所有结果的数据，用唯一性字段作为key的数组对象\r\n * @param totalX X轴显示字段数组\r\n * @param columnX 当前需要计算的X轴字段\r\n */\nfunction getShowDataList(allDataArr, dataObj, uniqueField, allColumns, column, rstDataList, totalX, columnX) {\n    var formula = column.formula;\n    var rstList = {};\n    if (!formula || formula == null) {\n        var _loop = function _loop(i) {\n            // 唯一字段和当前字段组成的Object\n            var ele = {};\n            // 字段值\n            var value = allDataArr[i][column.field];\n            // 唯一字段组成的key\n            var key = \"\";\n            uniqueField.forEach(function (unique) {\n                key += \"_\" + allDataArr[unique];\n                ele[unique] = allDataArr[unique];\n            });\n            ele[column.field] = value;\n            if (!rstList[key] || rstList[key] == {}) {\n                rstList[key] = ele;\n            }\n        };\n\n        for (var i = 0; i < allDataArr.length - 1; i++) {\n            _loop(i);\n        }\n        var keys = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(rstDataList);\n        for (var i = 0; i < keys.length; i++) {\n            rstDataList[keys[i]] = concatObject(rstDataList[keys[i]], rstList[keys[i]]);\n        }\n        if (columnX) {\n            rstDataList[rstDataList.length - 1][columnX.field] = getTotalXValue(rstDataList, totalX, allColumns, columnX);\n        }\n    } else {\n        var colObj = getExpressionField(column);\n        rstDataList = getDataByOperation(allDataArr, dataObj, allColumns, column, colObj, totalX, rstDataList);\n        if (columnX) {\n            rstDataList[totalX[0].formula][columnX.field] = getTotalXValue(rstDataList, totalX, allColumns, columnX);\n        }\n    }\n    return rstDataList;\n}\n\n/**\r\n * 数据合并，主要是将OPEN的数据进行合并\r\n * @param allDataArr 数据数组\r\n * @param columns 展示字段\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n */\nfunction getShowFieldDataList(allDataArr, columns, allColumns) {\n    var rstAllColumns = [];\n    var rstLst = [];\n    var dataArray = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(allDataArr);\n    // 如果记录为1，那就不需要进行合并\n    if (!dataArray || dataArray.length < 2) {\n        return dataArray;\n    }\n    if (!dataArray[0].dataValue_key) {\n        return dataArray;\n    }\n    var haveFormulaColumns = {};\n    // 用于判断返回显示字段中是否存在该字段\n    var isExistsFields = [];\n    // 用于找到展开后字段的下标\n    var columnIndexObj = {};\n    // 展开后字段的下标\n    var index = 0;\n    for (var i = 0; i < allColumns.length; i++) {\n        if (allColumns[i].formula) {\n            var field = allColumns[i].field;\n            haveFormulaColumns[field] = allColumns[i];\n            isExistsFields.push(field);\n        }\n        var formula = allColumns[i].formula;\n        if (formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n            continue;\n        }\n        columnIndexObj[allColumns[i].field] = index++;\n    }\n    // 先将不需要展开的字段全部放进返回显示字段中\n    for (var j = 0; j < columns.length; j++) {\n        var colField = columns[j].field;\n        var _formula = columns[j].formula;\n        if (_formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(_formula)) {\n            continue;\n        }\n        rstAllColumns.push(columns[j]);\n        isExistsFields.push(colField);\n    }\n    // 将所有非展开字段且存在值的字段值作为key的Object\n    var map = {};\n    for (var _i3 = 0; _i3 < dataArray.length; _i3++) {\n        var dataRst = {};\n        var dataRecord = dataArray[_i3];\n        // 将所有非展开字段且存在值的字段值作为key，便于数组连接\n        var _key2 = \"\";\n        for (var _j2 = 0; _j2 < columns.length; _j2++) {\n            var _colField = columns[_j2].field;\n            dataRst[_colField] = dataRecord[_colField];\n            if (dataRecord[_colField]) {\n                _key2 += \"_\" + dataRecord[_colField];\n            }\n        }\n        if (_key2) {\n            var dataKey = dataRecord.dataValue_key;\n            dataRst.dataValue_key = dataRecord.dataValue_key;\n            dataRst[dataKey] = dataRecord[dataKey];\n            // 生成显示字段\n            var showColumn = {};\n            var dataFieldKey = dataKey.replace(/\\[(.+)\\]/g, \"\");\n            showColumn.field = dataKey;\n            showColumn.formula = haveFormulaColumns[dataFieldKey].formula;\n            showColumn.children = null;\n            if (isExistsFields.indexOf(dataKey) == -1) {\n                var _index = columnIndexObj[dataFieldKey];\n                rstAllColumns.splice(_index, 0, showColumn);\n                isExistsFields.push(dataKey);\n            }\n            var recordKeys = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(dataRecord);\n            if (recordKeys && recordKeys.length > 1) {\n                for (var _j3 = 0; _j3 < recordKeys.length; _j3++) {\n                    if (dataRecord[recordKeys[_j3]] == \"********\" && /\\[(.+)\\]/g.test(recordKeys[_j3])) {\n                        dataRst[recordKeys[_j3]] = dataRecord[recordKeys[_j3]];\n                        // 生成显示字段\n                        var _showColumn = {};\n                        var _dataFieldKey = recordKeys[_j3].replace(/\\[(.+)\\]/g, \"\");\n                        _showColumn.field = recordKeys[_j3];\n                        _showColumn.formula = haveFormulaColumns[_dataFieldKey].formula;\n                        _showColumn.children = null;\n                        if (isExistsFields.indexOf(recordKeys[_j3]) == -1) {\n                            var _index2 = columnIndexObj[_dataFieldKey];\n                            rstAllColumns.splice(_index2, 0, _showColumn);\n                            isExistsFields.push(recordKeys[_j3]);\n                        }\n                    }\n                }\n            }\n            var arr = map[_key2] || [];\n            arr.push(dataRst);\n            map[_key2] = arr;\n        }\n    }\n    // 得到所有的分类，进行连接\n    var mapKeys = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(map);\n    for (var _i4 = 0; _i4 < mapKeys.length; _i4++) {\n        var _arr = map[mapKeys[_i4]] || [];\n        if (_arr.length < 1) {\n            continue;\n        } else if (_arr.length == 1) {\n            rstLst.push(_arr[0]);\n        } else {\n            var dataLst = _arr[0];\n            for (var _j4 = 1; _j4 < _arr.length; _j4++) {\n                dataLst = concatObject(dataLst, _arr[_j4]);\n            }\n            rstLst.push(dataLst);\n        }\n    }\n    var result = { data: rstLst, column: rstAllColumns };\n    return result;\n}\n\n/**\r\n * 展开数据，仅进行数据处理\r\n * 处理结果；类似{ equipType: 1, equipTypeName: \"中央空调\",id: 1, name: \"中央空调1#\", type: 1, equipId: 1, dataValue[2018-05][42]: 522.35, dataValue_key:\"dataValue[2018-05][42]\"}\r\n * @param curDataArr 要处理的数组\r\n * @param columns 显示字段\r\n * @param uniqueField 唯一字段\r\n * @param showDataField 最终显示数据的字段，如 dataValue[2018-04]\r\n */\nfunction openRecordNotOperation(curDataArr, columns, uniqueField, showDataField) {\n    // 最终显示数据的字段showDataField\n    var fieldObj = getExpressionField(columns);\n    var openF = fieldObj.open;\n    if (!openF || openF.length < 1) {\n        return curDataArr;\n    }\n    var openCol = openF[0].fields;\n    if (openCol == \"\" || openCol.indexOf(\",\") > -1) {\n        return curDataArr;\n    }\n    var openChildren = columns[openF[0].index].children || [];\n    // 如果子字段为空，返回\n    if (!openChildren || openChildren.length < 1) {\n        return curDataArr;\n    }\n    var childFieldObj = getExpressionField(openChildren);\n\n    // 改变最终显示字段的字段名，\n    // 如将\"dataValue\"改成\"dataValue[2018-04]\"，其中2018-04为open字段的值\n    // \"dataValue_key\"的值为新数据字段的字段名，如果该字段不存在，说明第一次进来\n    var keyField = fieldObj.open[0].fields;\n    for (var i = 0; i < curDataArr.length; i++) {\n        var openFValue = curDataArr[i][keyField];\n        for (var j = 0; j < openChildren.length; j++) {\n            var childField = openChildren[j].field;\n            if (!curDataArr[i][childField]) {\n                curDataArr[i][childField] = \"********\";\n            }\n            if (childField == showDataField) {\n                var dataField = curDataArr[i].dataValue_key || showDataField;\n                var _key3 = dataField + \"[\" + openFValue + \"]\";\n                var reg = RegExp(dataField, \"g\");\n                curDataArr[i] = JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(curDataArr[i]).replace(reg, _key3));\n                delete curDataArr[i][keyField];\n                curDataArr[i].dataValue_key = _key3;\n            } else {\n                var dataValueKey = curDataArr[i].dataValue_key;\n                var _dataField = \"\";\n                if (dataValueKey) {\n                    var vKeys = dataValueKey.match(/\\[(.+)\\]/g);\n                    _dataField = childField + vKeys[0];\n                    _dataField = _dataField.replace(\"[\" + openFValue + \"]\", \"\");\n                } else {\n                    _dataField = childField;\n                }\n                var _key4 = _dataField + \"[\" + openFValue + \"]\";\n                var _reg = RegExp(_dataField, \"g\");\n                if (curDataArr[i][_dataField] != undefined) {\n                    curDataArr[i] = JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(curDataArr[i]).replace(_reg, _key4));\n                    delete curDataArr[i][_dataField];\n                }\n            }\n        }\n    }\n\n    // 如果子字段中没有需要展开的了，那么直接处理，否则继续递归调用\n    if (!childFieldObj.open || childFieldObj.open.length < 1) {\n        return curDataArr;\n    } else if (childFieldObj.open.length == 1) {\n        //递归调用\n        return openRecordNotOperation(curDataArr, columns, uniqueField, showDataField);\n    } else {\n        return curDataArr;\n    }\n}\n\n/**\r\n * 根据传入的对象，得到表格数据（终极方法）\r\n * @param obj 需要处理的对象，对象结构参照文件开始所示\r\n */\nfunction getTableDataByManyArray(obj) {\n    if (!obj) {\n        return null;\n    }\n    var num = obj.num;\n    var dataArrays = obj.dataArray;\n    var relations = obj.relation;\n    var columns = obj.column;\n    var uniqueField = obj.uniqueField;\n    var totalY = obj.totalY || [];\n    var totalX = obj.totalX || [];\n    if (!num || !dataArrays || !relations || !columns || !uniqueField) {\n        return null;\n    }\n    if (num < 1 || dataArrays.length != num || relations.length != num - 1 || uniqueField.length < 1) {\n        return null;\n    }\n    // 第一步把所有的数组数据连成一个数组\n    var allDataArr = [];\n    if (dataArrays[0] instanceof Array) {\n        dataArrays[0].forEach(function (item) {\n            allDataArr.push(item);\n        });\n    } else if (dataArrays[0] instanceof Object) {\n        allDataArr.push(dataArrays[0]);\n    } else {\n        return;\n    }\n\n    var _loop2 = function _loop2(i) {\n        // \"equipType,type\"中的\"equipType\"\n        var fieldLeft = relations[i].split(\",\")[0];\n        // \"equipType,type\"中的\"type\"\n        var fieldRight = relations[i].split(\",\")[1];\n        // 把右边的数组全部按关联关系分类\n        var objData = {};\n        // 右边的数组，将有关联关系的字段对应的值作为Object的key，便于匹配\n        if (dataArrays[i + 1] instanceof Array) {\n            dataArrays[i + 1].forEach(function (item) {\n                // item[fieldRight] 有关联关系的字段对应的值\n                var arr1 = objData[item[fieldRight]] || [];\n                arr1.push(item);\n                objData[item[fieldRight]] = arr1;\n            });\n        } else if (dataArrays[i + 1] instanceof Object) {\n            objData[dataArrays[i + 1][fieldRight]] = dataArrays[i + 1];\n        } else {\n            return \"continue\";\n        }\n        // 根据关联关系将数组合并\n        var newArr = [];\n        allDataArr.forEach(function (item) {\n            // 找到左边数组的记录关联字段的值\n            var leftF = item[fieldLeft];\n            // 利用左边数组的记录关联字段的值找到右边对应的数组\n            var rightArr = objData[leftF];\n            // 将右边数组的每条记录都复制到左边，结果为m*n条记录\n            rightArr.forEach(function (itemRight) {\n                var newData = concatObject(item, itemRight);\n                newArr.push(newData);\n            });\n        });\n        allDataArr = newArr;\n    };\n\n    for (var i = 0; i < num - 1; i++) {\n        var _ret2 = _loop2(i);\n\n        if (_ret2 === \"continue\") continue;\n    }\n\n    var fieldObj = getExpressionField(columns);\n    // 对分组后的N个数组根据需要展开的字段分成M个数组，只单纯展开\n    if (!fieldObj.open || fieldObj.open.length < 1) {\n        // 如果需要展开的字段为空，那么连接分组后的数组就是实际数组\n        // afterOpenDataObj = allDataArr;\n    } else {\n        // 找到最终字段\n        var openF = fieldObj.open;\n        var openColumn = columns[openF[0].index];\n        var showDataField = \"\";\n        while (openColumn && openColumn.children) {\n            var childrenCol = openColumn.children;\n            var childrenOpenObj = getExpressionField(childrenCol);\n            if (childrenOpenObj.open && childrenOpenObj.open.field && childrenOpenObj.open.field.indexOf(\",\") == -1) {\n                openColumn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(childrenCol);\n            } else {\n                openColumn = null;\n                for (var kk = 0; kk < childrenCol.length; kk++) {\n                    var _key5 = childrenCol[kk].field;\n                    if (allDataArr[0][_key5]) {\n                        showDataField = _key5;\n                    }\n                }\n            }\n        }\n        // 仅仅展开数据\n        allDataArr = openRecordNotOperation(allDataArr, columns, uniqueField, showDataField);\n    }\n\n    // 根据字段计算，就是遍历columns，然后一个字段一个字段拼接\n    // 遍历字段，将子字段展开，找到最终不显示的字段\n    var allColumns = getAllColumn(columns);\n    // OPEN 根据columns将数组整理成需要显示的字段的数组\n    var showResult = getShowFieldDataList(allDataArr, columns, allColumns) || {};\n    allDataArr = showResult.data;\n    allColumns = showResult.column;\n\n    // 对合并的数组进行分类，按需要显示的字段一个个分类，从左至右\n    // 先根据uniqueField分成N个数组\n    var dataObj = {};\n    // 根据唯一性统计数量\n    var dataCount = {};\n    var rstDataList = {};\n    allDataArr.forEach(function (item) {\n        var key = \"\";\n        // if (uniqueField.length < 1) {\n        //   key = \"all\";\n        // } else\n        var uniqueEle = {};\n        if (uniqueField.length = 1) {\n            key = item[uniqueField[0]];\n            uniqueEle[uniqueField[0]] = key;\n        } else {\n            uniqueField.forEach(function (unique) {\n                key += \"_\" + item[unique];\n                uniqueEle[unique] = item[unique];\n            });\n            key = key.substring(1);\n        }\n        var curDataArr = dataObj[key] || [];\n        curDataArr.push(item);\n        dataObj[key] = curDataArr;\n        dataCount[key] = curDataArr.length;\n        if (!rstDataList[key] || rstDataList[key] == {}) {\n            rstDataList[key] = uniqueEle;\n        }\n    });\n    var totalX01 = {};\n    var totalKey = \"\";\n    uniqueField.forEach(function (unique, index) {\n        totalX01[unique] = totalX[index].formula;\n        totalKey += \"_\" + totalX[index].formula;\n    });\n    rstDataList[totalKey.substring(1)] = totalX01;\n\n    // 处理TotalX字段，使其跟显示字段column一致\n    var allTotalX = getAllColumn(totalX) || null;\n    var totalXFields = [];\n    var totalXObj = {};\n    if (allTotalX) {\n        for (var i = 0; i < allTotalX.length; i++) {\n            totalXFields.push(allTotalX[i].field);\n            totalXObj[allTotalX[i].field] = allTotalX[i];\n        }\n    }\n    var newTotalX = [];\n    newTotalX.push(allTotalX[0]);\n    for (var _i5 = uniqueField.length; _i5 < allColumns.length; _i5++) {\n        if (totalXFields.indexOf(allColumns[_i5].field) > -1) {\n            newTotalX.push(totalXObj[allColumns[_i5].field]);\n        } else {\n            var dataFieldX = allColumns[_i5].field;\n            if (/\\[(.+)\\]/g.test(dataFieldX)) {\n                var xDataField = dataFieldX.replace(/\\[(.+)\\]/g, \"\");\n                if (totalXFields.indexOf(xDataField) > -1) {\n                    var totalXCurCol = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(totalXObj[xDataField]);\n                    totalXCurCol.field = dataFieldX;\n                    newTotalX.push(totalXCurCol);\n                }\n            }\n        }\n    }\n    // 唯一字段不需要处理\n    for (var _i6 = uniqueField.length; _i6 < allColumns.length; _i6++) {\n        var columnX = newTotalX && newTotalX[_i6] ? newTotalX[_i6] : null;\n        rstDataList = getShowDataList(allDataArr, dataObj, uniqueField, allColumns, allColumns[_i6], rstDataList, newTotalX, columnX);\n    }\n    // 将结果Object转为数组\n    var rstDataArray = [];\n    var rstkeys = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(rstDataList);\n    for (var _i7 = 0; _i7 < rstkeys.length; _i7++) {\n        rstDataArray = rstDataArray.concat(rstDataList[rstkeys[_i7]]);\n    }\n    if (totalY && totalY.length > 0) {\n        rstDataArray = getTotalYValue(totalY, allColumns, rstDataArray);\n    }\n    return rstDataArray;\n}\n\n/**\r\n * 根据传入的对象，得到表格数据（终极方法）\r\n * @param obj 需要处理的对象，对象结构参照文件开始所示\r\n */\nfunction getTableDataByOneArray(obj) {\n    if (!obj) {\n        return null;\n    }\n    var num = obj.num;\n    var dataArrays = obj.dataArray;\n    var relations = obj.relation;\n    var columns = obj.column;\n    var uniqueField = obj.uniqueField;\n    var totalY = obj.totalY || [];\n    var totalX = obj.totalX || [];\n    if (num != 1 || !dataArrays || !columns || !uniqueField) {\n        return null;\n    }\n    // 第一步把所有的数组数据连成一个数组\n    var allDataArr = dataArrays[0];\n\n    var fieldObj = getExpressionField(columns);\n    // 对分组后的N个数组根据需要展开的字段分成M个数组，只单纯展开\n    if (!fieldObj.open || fieldObj.open.length < 1) {\n        // 如果需要展开的字段为空，那么连接分组后的数组就是实际数组\n        // afterOpenDataObj = allDataArr;\n    } else {\n        // 找到最终字段\n        var openF = fieldObj.open;\n        var openColumn = columns[openF[0].index];\n        var showDataField = \"\";\n        while (openColumn && openColumn.children) {\n            var childrenCol = openColumn.children;\n            var childrenOpenObj = getExpressionField(childrenCol);\n            if (childrenOpenObj.open && childrenOpenObj.open.field && childrenOpenObj.open.field.indexOf(\",\") == -1) {\n                openColumn = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(childrenCol);\n            } else {\n                openColumn = null;\n                for (var kk = 0; kk < childrenCol.length; kk++) {\n                    var _key6 = childrenCol[kk].field;\n                    if (allDataArr[0][_key6]) {\n                        showDataField = _key6;\n                    }\n                }\n            }\n        }\n        // 仅仅展开数据\n        allDataArr = openRecordNotOperation(allDataArr, columns, uniqueField, showDataField);\n    }\n\n    // 根据字段计算，就是遍历columns，然后一个字段一个字段拼接\n    // 遍历字段，将子字段展开，找到最终不显示的字段\n    var allColumns = getAllColumn(columns);\n    // OPEN 根据columns将数组整理成需要显示的字段的数组\n    var showResult = getShowFieldDataList(allDataArr, columns, allColumns) || {};\n    allDataArr = showResult.data;\n    allColumns = showResult.column;\n\n    // 对合并的数组进行分类，按需要显示的字段一个个分类，从左至右\n    // 先根据uniqueField分成N个数组\n    var dataObj = {};\n    // 根据唯一性统计数量\n    var dataCount = {};\n    var rstDataList = {};\n    allDataArr.forEach(function (item) {\n        var key = \"\";\n        // if (uniqueField.length < 1) {\n        //   key = \"all\";\n        // } else\n        var uniqueEle = {};\n        if (uniqueField.length = 1) {\n            key = item[uniqueField[0]];\n            uniqueEle[uniqueField[0]] = key;\n        } else {\n            uniqueField.forEach(function (unique) {\n                key += \"_\" + item[unique];\n                uniqueEle[unique] = item[unique];\n            });\n            key = key.substring(1);\n        }\n        var curDataArr = dataObj[key] || [];\n        curDataArr.push(item);\n        dataObj[key] = curDataArr;\n        dataCount[key] = curDataArr.length;\n        if (!rstDataList[key] || rstDataList[key] == {}) {\n            rstDataList[key] = uniqueEle;\n        }\n    });\n    var totalX01 = {};\n    var totalKey = \"\";\n    uniqueField.forEach(function (unique, index) {\n        totalX01[unique] = totalX[index].formula;\n        totalKey += \"_\" + totalX[index].formula;\n    });\n    rstDataList[totalKey.substring(1)] = totalX01;\n\n    // 处理TotalX字段，使其跟显示字段column一致\n    var allTotalX = getAllColumn(totalX) || null;\n    var totalXFields = [];\n    var totalXObj = {};\n    if (allTotalX) {\n        for (var i = 0; i < allTotalX.length; i++) {\n            totalXFields.push(allTotalX[i].field);\n            totalXObj[allTotalX[i].field] = allTotalX[i];\n        }\n    }\n    var newTotalX = [];\n    newTotalX.push(allTotalX[0]);\n    for (var _i8 = uniqueField.length; _i8 < allColumns.length; _i8++) {\n        if (totalXFields.indexOf(allColumns[_i8].field) > -1) {\n            newTotalX.push(totalXObj[allColumns[_i8].field]);\n        } else {\n            var dataFieldX = allColumns[_i8].field;\n            if (/\\[(.+)\\]/g.test(dataFieldX)) {\n                var xDataField = dataFieldX.replace(/\\[(.+)\\]/g, \"\");\n                if (totalXFields.indexOf(xDataField) > -1) {\n                    var totalXCurCol = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__util__[\"l\" /* deepJSONCopy */])(totalXObj[xDataField]);\n                    totalXCurCol.field = dataFieldX;\n                    newTotalX.push(totalXCurCol);\n                }\n            }\n        }\n    }\n    // 唯一字段不需要处理\n    for (var _i9 = uniqueField.length; _i9 < allColumns.length; _i9++) {\n        var columnX = newTotalX && newTotalX[_i9] ? newTotalX[_i9] : null;\n        rstDataList = getShowDataList(allDataArr, dataObj, uniqueField, allColumns, allColumns[_i9], rstDataList, newTotalX, columnX);\n    }\n    // 将结果Object转为数组\n    var rstDataArray = [];\n    var rstkeys = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(rstDataList);\n    for (var _i10 = 0; _i10 < rstkeys.length; _i10++) {\n        rstDataArray = rstDataArray.concat(rstDataList[rstkeys[_i10]]);\n    }\n    if (totalY && totalY.length > 0) {\n        rstDataArray = getTotalYValue(totalY, allColumns, rstDataArray);\n    }\n    return rstDataArray;\n}\n\n\n\n/***/ }),\n\n/***/ \"NADl\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"ZSZL\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"FIqI\")(\"0022a34e\", content, true, {});\n\n/***/ }),\n\n/***/ \"VVME\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_calculation_vue__ = __webpack_require__(\"YkxX\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_1174c510_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_calculation_vue__ = __webpack_require__(\"WQVX\");\nvar normalizeComponent = __webpack_require__(\"J0+h\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_calculation_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_1174c510_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_calculation_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"WQVX\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('el-form', {\n    attrs: {\n      \"model\": _vm.expressionForm,\n      \"rules\": _vm.expressionRules\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"prop\": \"expression\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"readonly\": \"\",\n      \"type\": \"textarea\",\n      \"rows\": 8\n    },\n    nativeOn: {\n      \"keydown\": function($event) {\n        _vm.handleKeyDown($event)\n      }\n    },\n    model: {\n      value: (_vm.expressionForm.expression),\n      callback: function($$v) {\n        _vm.$set(_vm.expressionForm, \"expression\", $$v)\n      },\n      expression: \"expressionForm.expression\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _vm._l((_vm.expressionBtn), function(item, index) {\n    return _c('el-button', {\n      key: index,\n      on: {\n        \"click\": function($event) {\n          _vm.keyUpElement(item)\n        }\n      }\n    }, [_vm._v(_vm._s(item))])\n  }), _vm._v(\" \"), _c('el-button', {\n    on: {\n      \"click\": _vm.backSpace\n    }\n  }, [_vm._v(\"退格\")]), _vm._v(\" \"), _c('el-button', {\n    on: {\n      \"click\": _vm.clearAll\n    }\n  }, [_vm._v(\"清空\")]), _vm._v(\" \"), _c('el-tabs', {\n    attrs: {\n      \"type\": \"card\"\n    },\n    on: {\n      \"tab-click\": _vm.handleClick\n    },\n    model: {\n      value: (_vm.expressTableActive),\n      callback: function($$v) {\n        _vm.expressTableActive = $$v\n      },\n      expression: \"expressTableActive\"\n    }\n  }, [_c('el-tab-pane', {\n    attrs: {\n      \"label\": \"常量\",\n      \"name\": \"0\"\n    }\n  }, [_vm._v(\"用户管理\")]), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"基础指标\",\n      \"name\": \"1\"\n    }\n  }, [_vm._v(\"配置管理\")])], 1), _vm._v(\" \"), _c('da-table', {\n    ref: \"expressionTb\",\n    attrs: {\n      \"slot\": \"content\",\n      \"colums\": _vm.colsData[_vm.expressTableActive],\n      \"table-list\": _vm.tableList,\n      \"search-data\": _vm.searchForm[_vm.expressTableActive],\n      \"showSelection\": false\n    },\n    on: {\n      \"callBack\": _vm.getTargetTb\n    },\n    slot: \"content\"\n  }, [_c('el-table-column', {\n    attrs: {\n      \"slot\": \"operation\",\n      \"property\": \"operation\",\n      \"label\": \"操作\",\n      \"width\": \"150\",\n      \"align\": \"center\",\n      \"fixed\": \"right\"\n    },\n    slot: \"operation\",\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              _vm.selectRow(scope.row)\n            }\n          }\n        }, [_vm._v(\"选择\")])]\n      }\n    }])\n  })], 1)], 2)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ \"YjpV\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(\"3cXf\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util_js__ = __webpack_require__(\"yt7g\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__template_calculation__ = __webpack_require__(\"VVME\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__template_dataBase__ = __webpack_require__(\"aeOv\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(\"yt7g\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_dataUtil__ = __webpack_require__(\"KbJL\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: \"target\",\n  components: {\n    daCalculation: __WEBPACK_IMPORTED_MODULE_2__template_calculation__[\"a\" /* default */],\n    dataBase: __WEBPACK_IMPORTED_MODULE_3__template_dataBase__[\"a\" /* default */]\n  },\n  data: function data() {\n    return {\n      targetTypeData: [],\n      entOrgData: [],\n      unitOptions: [],\n      stateOptions: [{ dataText: \"正常使用\", dataValue: true }, { dataText: \"停用\", dataValue: false }],\n      targetCycleOptions: [\n      // { dataText: \"小时\", dataValue: \"1\" },\n      // {\n      //   dataText: \"班\",\n      //   dataValue: \"2\"\n      // },\n      { dataText: \"日\", dataValue: \"3\" },\n      // { dataText: \"周\", dataValue: \"4\" },\n      {\n        dataText: \"月\",\n        dataValue: \"5\"\n      },\n      // { dataText: \"季度\", dataValue: \"6\" },\n      // { dataText: \"半年\", dataValue: \"7\" },\n      {\n        dataText: \"年\",\n        dataValue: \"8\"\n      }],\n      valueMethodOptions: [{ dataText: \"手动录入\", dataValue: \"0\" }, {\n        dataText: \"SQL取值\",\n        dataValue: \"1\"\n      }, { dataText: \"接口取值\", dataValue: \"2\" }, { dataText: \"计算取值\", dataValue: \"3\"\n        // { dataText: \"计量点数据\", dataValue: \"4\" }\n      }],\n      // 查询表单\n      searchForm: {\n        formdata: {\n          name: \"\",\n          targetType: \"\",\n          orgId: \"\",\n          targetCycle: \"\",\n          valueMethod: \"\"\n        },\n        currentPage: 1,\n        pageSize: 20\n      },\n      tableList: {}, // 数据列表\n      colsData: [\n      // 表头\n      { label: \"指标名称\", prop: \"name\", align: \"left\", sortable: true }, { label: \"指标简称\", prop: \"shortName\", align: \"left\", sortable: true }, {\n        label: \"指标类型\",\n        prop: \"targetType\",\n        align: \"left\",\n        sortable: true,\n        displace: {}\n      }, {\n        label: \"组织机构\",\n        prop: \"orgId\",\n        align: \"left\",\n        sortable: true,\n        displace: {}\n      }, {\n        label: \"指标周期\",\n        prop: \"targetCycle\",\n        align: \"left\",\n        sortable: true,\n        displace: {\n          3: \"日\",\n          5: \"月\",\n          8: \"年\"\n        }\n      }, { label: \"指标单位\", prop: \"unit\", align: \"left\", sortable: true }, {\n        label: \"取值方式\",\n        prop: \"valueMethod\",\n        align: \"left\",\n        sortable: true,\n        displace: {\n          0: \"手动录入\",\n          1: \"SQL取值\",\n          2: \"接口取值\",\n          3: \"计算取值\",\n          4: \"计量点数据\"\n        }\n      }, {\n        label: \"表达式\",\n        prop: \"valueSource\",\n        align: \"left\",\n        subStr: true,\n        sortable: true\n      }, { label: \"描述\", prop: \"valueContent\", align: \"left\", sortable: true }],\n      dialogVisible: false,\n      addForm: {\n        name: \"\",\n        shortName: \"\",\n        targetType: \"\",\n        orgId: \"\",\n        targetCycle: 3,\n        unit: \"\",\n        rate: 1,\n        dataUpperLimit: \"9999999.9999\",\n        dataLowerLimit: \"-9999999.9999\",\n        effectiveUpperLimit: \"9999999.9999\",\n        effectiveLowerLimit: \"-9999999.9999\",\n        dataDisplayPrecisions: \"2\",\n        state: true,\n        valueMethod: 3,\n        valueSource: \"\",\n        valueContent: \"\",\n        sourceId: \"-1\",\n        dependence: \"\",\n        indirectDependence: \"\",\n        showSort: \"\",\n        calculationLevel: \"\"\n      },\n      rules: this.eachValidate({\n        name: { required: true, maxString: \"60\" },\n        shortName: { maxString: \"60\" },\n        rate: { number: true },\n        targetType: { required: { required: true, trigger: \"change\" } },\n        orgId: { required: true },\n        targetCycle: { required: true },\n        unit: { maxString: \"20\" },\n        valueMethod: { required: true },\n        valueSource: { maxString: \"1800\" },\n        valueContent: { maxString: \"200\" }\n      }),\n      sourceDialogVisible: false,\n      expression: false,\n      expressionObj: {}\n    };\n  },\n\n  computed: {\n    title: function title() {\n      //弹窗标题\n      return this.addForm.id ? \"编辑指标资料\" : \"新增指标资料\";\n    },\n    urlType: function urlType() {\n      //URL请求方式\n      return this.addForm.id ? \"put\" : \"post\";\n    },\n    expressionTitle: function expressionTitle() {\n      var titles = [\"\", \"SQL取值\", \"接口取值\", \"计算取值\"];\n      return titles[this.addForm.valueMethod];\n    }\n  },\n  watch: {},\n  methods: {\n    /**\r\n     * 查询指标类型树\r\n     */\n    getTargetTypeTree: function getTargetTypeTree(val) {\n      var me = this;\n      me.$ajax({\n        url: \"rest/targetData/targetTypeTree\",\n        method: \"get\"\n      }).then(function (res) {\n        if (res.data.status) {\n          me.targetTypeData = res.data.records;\n          //编辑设值\n          if (val != undefined) {\n            //没有parentname时\n            var parentTreeObj = {};\n            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util_js__[\"j\" /* changeTree */])(res.data.records, \"treeCode\", \"name\", parentTreeObj);\n            // this.$refs.parentModuleTree.setText(parentTreeObj[val.parentId]);\n          }\n        }\n      });\n    },\n\n    /**\r\n     * 查询指标类型列表\r\n     */\n    getTargetTypeList: function getTargetTypeList() {\n      var _this = this;\n\n      var me = this;\n      me.$ajax({\n        url: \"rest/target/targetType\",\n        method: \"get\"\n      }).then(function (res) {\n        if (res.data.status) {\n          var toObj = {};\n          _this.$each(res.data.records, function (item) {\n            toObj[item.id] = item.name;\n          });\n          _this.colsData[2].displace = toObj;\n        }\n      });\n    },\n\n    /**\r\n     * 用能对象树\r\n     */\n    getOrgTree: function getOrgTree(val) {\n      var me = this;\n      var paramsObj = { title: \"指标资料\" };\n      paramsObj.isAll = false;\n      paramsObj.groupBys = \"0100000000\";\n      me.$ajax({\n        url: \"rest/analysisData/departTree\",\n        method: \"get\",\n        params: paramsObj\n      }).then(function (res) {\n        if (res.data.status) {\n          me.entOrgData = res.data.records;\n          //编辑设值\n          if (val != undefined) {\n            //没有parentname时\n            var parentTreeObj = {};\n            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__util_util_js__[\"j\" /* changeTree */])(res.data.records, \"treeCode\", \"name\", parentTreeObj);\n            // this.$refs.parentModuleTree.setText(parentTreeObj[val.parentId]);\n          }\n        }\n      });\n    },\n\n    /**\r\n     * 用能对象列表\r\n     */\n    getOrgList: function getOrgList() {\n      var _this2 = this;\n\n      var me = this;\n      var paramsObj = { title: \"指标资料\" };\n      me.$ajax({\n        url: \"rest/analysisData/depart\",\n        method: \"get\",\n        params: paramsObj\n      }).then(function (res) {\n        if (res.data.status) {\n          var toObj = {};\n          _this2.$each(res.data.records, function (item) {\n            toObj[item.id] = item.name;\n          });\n          _this2.colsData[3].displace = toObj;\n        }\n      });\n    },\n\n    // 单位\n    getTargetUnitList: function getTargetUnitList() {\n      var _this3 = this;\n\n      var me = this;\n      me.$ajax({\n        url: \"rest/target/targetUnit\",\n        method: \"get\",\n        params: {\n          unitType: \"\",\n          targetType: this.addForm.targetType\n        }\n      }).then(function (res) {\n        if (res.data.status) {\n          _this3.unitOptions = res.data.records;\n        }\n      });\n    },\n    getTbList: function getTbList() {\n      var _this4 = this;\n\n      var formName = \"table\";\n      this.$ajax.get(\"rest/target/page\", {\n        params: this.searchForm,\n        loadingTarget: this.$refs[formName]\n      }).then(function (res) {\n        if (res.data.status) {\n          _this4.tableList = res.data;\n        }\n      });\n    },\n    editTb: function editTb(row) {\n      this.dialogVisible = true;\n      this.addForm = JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(row));\n    },\n    closeDialog: function closeDialog(formName) {\n      this.$nextTick(function () {\n        this.$refs[formName].resetFields();\n        this.addForm = {\n          name: \"\",\n          shortName: \"\",\n          targetType: \"\",\n          orgId: \"\",\n          targetCycle: 3,\n          unit: \"\",\n          rate: 1,\n          dataUpperLimit: \"9999999.9999\",\n          dataLowerLimit: \"-9999999.9999\",\n          effectiveUpperLimit: \"9999999.9999\",\n          effectiveLowerLimit: \"-9999999.9999\",\n          dataDisplayPrecisions: \"2\",\n          state: true,\n          valueMethod: 3,\n          valueSource: \"\",\n          valueContent: \"\",\n          sourceId: \"-1\",\n          dependence: \"\",\n          indirectDependence: \"\",\n          showSort: \"\",\n          calculationLevel: \"\"\n        };\n      });\n      this.expression = false;\n    },\n    saveDialog: function saveDialog(formName) {\n      var _this5 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          _this5.$ajax[_this5.urlType](\"rest/target\", _this5.addForm).then(function (res) {\n            if (res.data.status) {\n              _this5.$message.success(res.data.answerMsg);\n              _this5.dialogVisible = false;\n              _this5.getTbList();\n            } else {\n              _this5.$message.error(res.data.answerMsg);\n            }\n          });\n        }\n      });\n    },\n    delTb: function delTb(row) {\n      var _this6 = this;\n\n      this.$confirm(\"是否删除该记录?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        _this6.$ajax.delete(\"rest/target\", { params: { id: row.id } }).then(function (res) {\n          if (res.data.status) {\n            _this6.$message.success(res.data.answerMsg);\n            _this6.getTbList();\n          } else {\n            _this6.$message.error(res.data.answerMsg);\n          }\n        });\n      });\n    },\n    editExpression: function editExpression() {\n      var _this7 = this;\n\n      this.sourceDialogVisible = true;\n      this.$nextTick(function () {\n        switch (_this7.addForm.valueMethod) {\n          case 3:\n            _this7.$refs.targetExpression.getData();\n            _this7.expression = {\n              expression: _this7.addForm.valueContent,\n              expressionTrue: _this7.addForm.valueSource,\n              level: _this7.addForm.calculationLevel,\n              dependence: _this7.addForm.dependence,\n              indirect_dependence: _this7.addForm.indirectDependence\n            };\n            break;\n          case 2:\n          case 1:\n            _this7.$refs.targetDBsourse.getData();\n            break;\n        }\n      });\n    },\n\n    // 校验表达式\n    checkExpression: function checkExpression() {\n      this.$refs.targetExpression.checkExpression(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"l\" /* deepJSONCopy */])(this.addForm));\n    },\n\n    // 保存表达式\n    setExpression: function setExpression() {\n      this.sourceDialogVisible = false;\n      switch (this.addForm.valueMethod) {\n        case 3:\n          // this.$set(this.addForm, \"valueSource\", this.expression);\n          this.addForm.valueSource = this.expression.expressionTrue;\n          this.addForm.calculationLevel = this.expression.level;\n          this.addForm.valueContent = this.expression.expression;\n          this.addForm.dependence = this.expression.dependence;\n          this.addForm.indirectDependence = this.expression.indirectDependence;\n          break;\n        case 1:\n          var obj = this.$refs.targetDBsourse.checkExpression();\n          this.addForm.valueSource = obj.expression;\n          this.addForm.sourceId = obj.source;\n          break;\n      }\n    },\n    expressionClose: function expressionClose() {\n      switch (this.addForm.valueMethod) {\n        case 3:\n          this.$refs.targetExpression.resetData();\n          break;\n        case 2:\n          this.$refs.targetDBsourse.resetData();\n          break;\n        case 1:\n          this.$refs.targetDBsourse.resetData();\n          break;\n      }\n    },\n    //,\n    // getTableDataTest() {\n    //   let dataLst1 = [\n    //     { equipType: 1, equipTypeName: \"中央空调\" },\n    //     { equipType: 2, equipTypeName: \"抽风机\" },\n    //     { equipType: 3, equipTypeName: \"新风机\" }\n    //   ];\n    //   let dataLst2 = [\n    //     { id: 1, name: \"中央空调1#\", type: 1 },\n    //     { id: 2, name: \"中央空调2#\", type: 1 },\n    //     { id: 3, name: \"抽风机1#\", type: 2 },\n    //     { id: 4, name: \"抽风机2#\", type: 2 },\n    //     { id: 5, name: \"新风机1#\", type: 3 }\n    //   ];\n    //   let dataLst3 = [\n    //     {\n    //       id: 1,\n    //       equipId: 1,\n    //       time: \"2018-04\",\n    //       dataTime: \"2018-04-01\",\n    //       dataValue: 52.6\n    //     },\n    //     {\n    //       id: 2,\n    //       equipId: 1,\n    //       time: \"2018-05\",\n    //       dataTime: \"2018-05-01\",\n    //       dataValue: 56.3\n    //     },\n    //     {\n    //       id: 3,\n    //       equipId: 2,\n    //       time: \"2018-04\",\n    //       dataTime: \"2018-04-01\",\n    //       dataValue: 65.6\n    //     },\n    //     {\n    //       id: 4,\n    //       equipId: 2,\n    //       time: \"2018-05\",\n    //       dataTime: \"2018-05-01\",\n    //       dataValue: 64.2\n    //     },\n    //     {\n    //       id: 5,\n    //       equipId: 3,\n    //       time: \"2018-04\",\n    //       dataTime: \"2018-04-01\",\n    //       dataValue: 83.6\n    //     },\n    //     {\n    //       id: 6,\n    //       equipId: 3,\n    //       time: \"2018-05\",\n    //       dataTime: \"2018-05-01\",\n    //       dataValue: 76.6\n    //     },\n    //     {\n    //       id: 7,\n    //       equipId: 4,\n    //       time: \"2018-04\",\n    //       dataTime: \"2018-04-01\",\n    //       dataValue: 42.6\n    //     },\n    //     {\n    //       id: 8,\n    //       equipId: 4,\n    //       time: \"2018-05\",\n    //       dataTime: \"2018-05-01\",\n    //       dataValue: 47.6\n    //     },\n    //     {\n    //       id: 9,\n    //       equipId: 5,\n    //       time: \"2018-04\",\n    //       dataTime: \"2018-04-01\",\n    //       dataValue: 95.6\n    //     },\n    //     {\n    //       id: 10,\n    //       equipId: 5,\n    //       time: \"2018-05\",\n    //       dataTime: \"2018-05-01\",\n    //       dataValue: 88.6\n    //     }\n    //   ];\n    //   let obj = {\n    //     num: 3,\n    //     dataArray: [dataLst1, dataLst2, dataLst3],\n    //     relation: [\"equipType,type\", \"id,equipId\"],\n    //     uniqueField: [\"equipTypeName\"],\n    //     column: [\n    //       {\n    //         field: \"equipTypeName\",\n    //         formula: \"\",\n    //         children: null\n    //       },\n    //       {\n    //         field: \"equipId\",\n    //         formula: \"COUNT([equipId])\",\n    //         children: null\n    //       },\n    //       {\n    //         field: \"time\",\n    //         formula: \"OPEN([time])\",\n    //         children: [\n    //           {\n    //             field: \"dataValue\",\n    //             formula: \"SUM([dataValue])\",\n    //             children: null\n    //           },\n    //           {\n    //             field: \"scale\",\n    //             formula: \"SUM([dataValue])/TOTALX([dataValue])\",\n    //             children: null\n    //           }\n    //         ]\n    //       },\n    //       {\n    //         field: \"ringRatio\",\n    //         formula: \"RINGRATIO([dataValue])\",\n    //         children: null\n    //       }\n    //     ],\n    //     totalX: [\n    //       {\n    //         field: \"equipTypeName\",\n    //         formula: \"设备合计\",\n    //         children: null\n    //       },\n    //       {\n    //         field: \"equipId\",\n    //         formula: \"SUM([equipId])\",\n    //         children: null\n    //       },\n    //       {\n    //         field: \"time\",\n    //         formula: \"\",\n    //         children: [\n    //           {\n    //             field: \"dataValue\",\n    //             formula: \"SUM([dataValue])\",\n    //             children: null\n    //           },\n    //           {\n    //             field: \"scale\",\n    //             formula: \"1\",\n    //             children: null\n    //           }\n    //         ]\n    //       },\n    //       {\n    //         field: \"ringRatio\",\n    //         formula: \"RINGRATIO([dataValue])\",\n    //         children: null\n    //       }\n    //     ],\n    //     totalY: [\n    //       {\n    //         field: \"totalDataValue\",\n    //         formula: \"SUM([dataValue])\",\n    //         children: null\n    //       }\n    //     ]\n    //   };\n    //   let d1 = new Date();\n    //   this.getTableData(obj);\n    //   let d2 = new Date();\n    //   console.log(\"运算时间：\" + (d2.getTime() - d1.getTime()) + \"毫秒。\");\n    // },\n    // /**\n    //  * 对象复制，针对不同属性\n    //  * @param o 对象，合并时以该对象为准\n    //  * @param n 被合并对象，合并时以牺牲对象为准\n    //  */\n    // concatObject(o, n) {\n    //   let obj = deepJSONCopy(o);\n    //   for (let p in n) {\n    //     if (n.hasOwnProperty(p) && !obj.hasOwnProperty(p)) {\n    //       obj[p] = n[p];\n    //     }\n    //   }\n    //   return obj;\n    // },\n    // /**\n    //  * 如果两个对象存在相同属性，并且字段值一致，则合并\n    //  * @param dataList1 数组1，返回结果以该数组为准\n    //  * @param dataList2 数组2，用来合并的数组\n    //  * @param relationList 根据那些字段来合并\n    //  */\n    // concatArray(dataList1, dataList2, relationList) {\n    //   let list = [];\n    //   let dataList1Obj = {};\n    //   for (let j = 0; j < dataList1.length; j++) {\n    //     let obj1 = dataList1[j];\n    //     let key = \"\";\n    //     for (let k = 0; k < relationList.length; k++) {\n    //       key += obj1[relationList[k]];\n    //     }\n    //     dataList1Obj[key] = obj1;\n    //   }\n    //   let dataList2Obj = {};\n    //   for (let j = 0; j < dataList2.length; j++) {\n    //     let obj2 = dataList2[j];\n    //     let key = \"\";\n    //     for (let k = 0; k < relationList.length; k++) {\n    //       key += obj2[relationList[k]];\n    //     }\n    //     let rightData = dataList1Obj[key];\n    //     list.push(this.concatObject(obj2, rightData));\n    //   }\n    //   return list;\n    // },\n    // getTableData(obj) {\n    //   if (!obj) {\n    //     return null;\n    //   }\n    //   let num = obj.num;\n    //   let dataArrays = obj.dataArray;\n    //   let relations = obj.relation;\n    //   let columns = obj.column;\n    //   let uniqueField = obj.uniqueField;\n    //   let totalY = obj.totalY || [];\n    //   let totalX = obj.totalX || [];\n    //   if (!num || !dataArrays || !relations || !columns || !uniqueField) {\n    //     return null;\n    //   }\n    //   if (\n    //     num < 1 ||\n    //     dataArrays.length != num ||\n    //     relations.length != num - 1 ||\n    //     uniqueField.length < 1\n    //   ) {\n    //     return null;\n    //   }\n    //   // 第一步把所有的数组数据连成一个数组\n    //   let allDataArr = [];\n    //   if (dataArrays[0] instanceof Array) {\n    //     dataArrays[0].forEach(item => {\n    //       allDataArr.push(item);\n    //     });\n    //   } else if (dataArrays[0] instanceof Object) {\n    //     allDataArr.push(dataArrays[0]);\n    //   } else {\n    //     return;\n    //   }\n    //   for (let i = 0; i < num - 1; i++) {\n    //     // \"equipType,type\"中的\"equipType\"\n    //     let fieldLeft = relations[i].split(\",\")[0];\n    //     // \"equipType,type\"中的\"type\"\n    //     let fieldRight = relations[i].split(\",\")[1];\n    //     // 把右边的数组全部按关联关系分类\n    //     let objData = {};\n    //     // 右边的数组，将有关联关系的字段对应的值作为Object的key，便于匹配\n    //     if (dataArrays[i + 1] instanceof Array) {\n    //       dataArrays[i + 1].forEach(item => {\n    //         // item[fieldRight] 有关联关系的字段对应的值\n    //         let arr1 = objData[item[fieldRight]] || [];\n    //         arr1.push(item);\n    //         objData[item[fieldRight]] = arr1;\n    //       });\n    //     } else if (dataArrays[i + 1] instanceof Object) {\n    //       objData[dataArrays[i + 1][fieldRight]] = dataArrays[i + 1];\n    //     } else {\n    //       continue;\n    //     }\n    //     // 根据关联关系将数组合并\n    //     let newArr = [];\n    //     allDataArr.forEach(item => {\n    //       // 找到左边数组的记录关联字段的值\n    //       let leftF = item[fieldLeft];\n    //       // 利用左边数组的记录关联字段的值找到右边对应的数组\n    //       let rightArr = objData[leftF];\n    //       // 将右边数组的每条记录都复制到左边，结果为m*n条记录\n    //       rightArr.forEach(itemRight => {\n    //         let newData = this.concatObject(item, itemRight);\n    //         newArr.push(newData);\n    //       });\n    //     });\n    //     allDataArr = newArr;\n    //   }\n\n    //   let fieldObj = this.getExpressionField(columns);\n    //   // 对分组后的N个数组根据需要展开的字段分成M个数组，只单纯展开\n    //   if (!fieldObj.open || fieldObj.open.length < 1) {\n    //     // 如果需要展开的字段为空，那么连接分组后的数组就是实际数组\n    //     // afterOpenDataObj = allDataArr;\n    //   } else {\n    //     // 找到最终字段\n    //     let openF = fieldObj.open;\n    //     let openColumn = columns[openF[0].index];\n    //     let showDataField = \"\";\n    //     while (openColumn && openColumn.children) {\n    //       let childrenCol = openColumn.children;\n    //       let childrenOpenObj = this.getExpressionField(childrenCol);\n    //       if (\n    //         childrenOpenObj.open &&\n    //         childrenOpenObj.open.field &&\n    //         childrenOpenObj.open.field.indexOf(\",\") == -1\n    //       ) {\n    //         openColumn = deepJSONCopy(childrenCol);\n    //       } else {\n    //         openColumn = null;\n    //         for (let kk = 0; kk < childrenCol.length; kk++) {\n    //           let key = childrenCol[kk].field;\n    //           if (allDataArr[0][key]) {\n    //             showDataField = key;\n    //           }\n    //         }\n    //       }\n    //     }\n    //     // 仅仅展开数据\n    //     allDataArr = this.openRecordNotOperation(\n    //       allDataArr,\n    //       columns,\n    //       uniqueField,\n    //       showDataField\n    //     );\n    //   }\n\n    //   // 根据字段计算，就是遍历columns，然后一个字段一个字段拼接\n    //   // 遍历字段，将子字段展开，找到最终不显示的字段\n    //   let allColumns = this.getAllColumn(columns);\n    //   // OPEN 根据columns将数组整理成需要显示的字段的数组\n    //   let showResult =\n    //     this.getShowFieldDataList(allDataArr, columns, allColumns) || {};\n    //   allDataArr = showResult.data;\n    //   allColumns = showResult.column;\n\n    //   // 对合并的数组进行分类，按需要显示的字段一个个分类，从左至右\n    //   // 先根据uniqueField分成N个数组\n    //   let dataObj = {};\n    //   // 根据唯一性统计数量\n    //   let dataCount = {};\n    //   let rstDataList = {};\n    //   allDataArr.forEach(item => {\n    //     let key = \"\";\n    //     // if (uniqueField.length < 1) {\n    //     //   key = \"all\";\n    //     // } else\n    //     let uniqueEle = {};\n    //     if ((uniqueField.length = 1)) {\n    //       key = item[uniqueField[0]];\n    //       uniqueEle[uniqueField[0]] = key;\n    //     } else {\n    //       uniqueField.forEach(unique => {\n    //         key += \"_\" + item[unique];\n    //         uniqueEle[unique] = item[unique];\n    //       });\n    //       key = key.substring(1);\n    //     }\n    //     let curDataArr = dataObj[key] || [];\n    //     curDataArr.push(item);\n    //     dataObj[key] = curDataArr;\n    //     dataCount[key] = curDataArr.length;\n    //     if (!rstDataList[key] || rstDataList[key] == {}) {\n    //       rstDataList[key] = uniqueEle;\n    //     }\n    //   });\n    //   let totalX01 = {};\n    //   let totalKey = \"\";\n    //   uniqueField.forEach((unique, index) => {\n    //     totalX01[unique] = totalX[index].formula;\n    //     totalKey += \"_\" + totalX[index].formula;\n    //   });\n    //   rstDataList[totalKey.substring(1)] = totalX01;\n\n    //   // 处理TotalX字段，使其跟显示字段column一致\n    //   let allTotalX = this.getAllColumn(totalX) || null;\n    //   let totalXFields = [];\n    //   let totalXObj = {};\n    //   if (allTotalX) {\n    //     for (let i = 0; i < allTotalX.length; i++) {\n    //       totalXFields.push(allTotalX[i].field);\n    //       totalXObj[allTotalX[i].field] = allTotalX[i];\n    //     }\n    //   }\n    //   let newTotalX = [];\n    //   newTotalX.push(allTotalX[0]);\n    //   for (let i = uniqueField.length; i < allColumns.length; i++) {\n    //     if (totalXFields.indexOf(allColumns[i].field) > -1) {\n    //       newTotalX.push(totalXObj[allColumns[i].field]);\n    //     } else {\n    //       let dataFieldX = allColumns[i].field;\n    //       if (/\\[(.+)\\]/g.test(dataFieldX)) {\n    //         let xDataField = dataFieldX.replace(/\\[(.+)\\]/g, \"\");\n    //         if (totalXFields.indexOf(xDataField) > -1) {\n    //           let totalXCurCol = deepJSONCopy(totalXObj[xDataField]);\n    //           totalXCurCol.field = dataFieldX;\n    //           newTotalX.push(totalXCurCol);\n    //         }\n    //       }\n    //     }\n    //   }\n    //   // 唯一字段不需要处理\n    //   for (let i = uniqueField.length; i < allColumns.length; i++) {\n    //     let columnX = newTotalX && newTotalX[i] ? newTotalX[i] : null;\n    //     rstDataList = this.getShowDataList(\n    //       allDataArr,\n    //       dataObj,\n    //       uniqueField,\n    //       allColumns,\n    //       allColumns[i],\n    //       rstDataList,\n    //       newTotalX,\n    //       columnX\n    //     );\n    //   }\n    //   // 将结果Object转为数组\n    //   let rstDataArray = [];\n    //   let rstkeys = Object.keys(rstDataList);\n    //   for (let i = 0; i < rstkeys.length; i++) {\n    //     rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\n    //   }\n    //   if (totalY && totalY.length > 0) {\n    //     rstDataArray = this.getTotalYValue(totalY, allColumns, rstDataArray);\n    //   }\n    //   return rstDataArray;\n    // },\n    // /**\n    //  * 得到最终展示的数据数组\n    //  */\n    // getShowDataList(\n    //   allDataArr,\n    //   dataObj,\n    //   uniqueField,\n    //   allColumns,\n    //   column,\n    //   rstDataList,\n    //   totalX,\n    //   columnX\n    // ) {\n    //   let formula = column.formula;\n    //   let rstList = {};\n    //   if (!formula || formula == null) {\n    //     for (let i = 0; i < allDataArr.length - 1; i++) {\n    //       // 唯一字段和当前字段组成的Object\n    //       let ele = {};\n    //       // 字段值\n    //       let value = allDataArr[i][column.field];\n    //       // 唯一字段组成的key\n    //       let key = \"\";\n    //       uniqueField.forEach(unique => {\n    //         key += \"_\" + allDataArr[unique];\n    //         ele[unique] = allDataArr[unique];\n    //       });\n    //       ele[column.field] = value;\n    //       if (!rstList[key] || rstList[key] == {}) {\n    //         rstList[key] = ele;\n    //       }\n    //     }\n    //     let keys = Object.keys(rstDataList);\n    //     for (let i = 0; i < keys.length; i++) {\n    //       rstDataList[keys[i]] = this.concatObject(\n    //         rstDataList[keys[i]],\n    //         rstList[keys[i]]\n    //       );\n    //     }\n    //     if (columnX) {\n    //       rstDataList[rstDataList.length - 1][\n    //         columnX.field\n    //       ] = this.getTotalXValue(rstDataList, totalX, allColumns, columnX);\n    //     }\n    //   } else {\n    //     let colObj = this.getExpressionField(column);\n    //     rstDataList = this.getDataByOperation(\n    //       allDataArr,\n    //       dataObj,\n    //       allColumns,\n    //       column,\n    //       colObj,\n    //       totalX,\n    //       rstDataList\n    //     );\n    //     if (columnX) {\n    //       rstDataList[totalX[0].formula][columnX.field] = this.getTotalXValue(\n    //         rstDataList,\n    //         totalX,\n    //         allColumns,\n    //         columnX\n    //       );\n    //     }\n    //   }\n    //   return rstDataList;\n    // },\n    // /**\n    //  * X轴数据计算\n    //  */\n    // getTotalXValue(rstDataList, totalX, allColumns, columnX) {\n    //   let formula = columnX.formula;\n    //   if (!formula) {\n    //     return \"\";\n    //   }\n    //   let colObj = this.getExpressionField(columnX);\n    //   if (colObj.open && colObj.open.length > 0) {\n    //     return \"\";\n    //   }\n    //   let rstDataArray = [];\n    //   let rstkeys = Object.keys(rstDataList);\n    //   for (let i = 0; i < rstkeys.length; i++) {\n    //     rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\n    //   }\n    //   let field = columnX.field;\n    //   let suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\n\n    //   let countField =\n    //     colObj.count && colObj.count.length > 0\n    //       ? colObj.count[0].fields + suffix\n    //       : \"\";\n    //   let maxField =\n    //     colObj.max && colObj.max.length > 0\n    //       ? colObj.max[0].fields + suffix\n    //       : \"\";\n    //   let minField =\n    //     colObj.min && colObj.min.length > 0\n    //       ? colObj.min[0].fields + suffix\n    //       : \"\";\n    //   let sumField =\n    //     colObj.sum && colObj.sum.length > 0\n    //       ? colObj.sum[0].fields + suffix\n    //       : \"\";\n    //   let avgField =\n    //     colObj.avg && colObj.avg.length > 0\n    //       ? colObj.avg[0].fields + suffix\n    //       : \"\";\n    //   let countLst = \",\";\n    //   let count = 0;\n    //   let maxData = rstDataArray[0][maxField] || \"\";\n    //   let minData = rstDataArray[0][minField] || \"\";\n    //   let sumData = 0;\n    //   // 平均值的和值\n    //   let avgSumData = 0;\n    //   // 平均值叠加的数量\n    //   let avgCount = 0;\n    //   for (let i = 0; i < rstDataArray.length - 1; i++) {\n    //     let record = rstDataArray[i];\n    //     if (\n    //       countField &&\n    //       countLst.indexOf(\",\" + record[countField] + \",\") == -1\n    //     ) {\n    //       countLst += record[countField] + \",\";\n    //       count++;\n    //     }\n    //     if (maxField && maxData < record[maxField]) {\n    //       maxData = record[maxField];\n    //     }\n    //     if (minField && minData > record[minField]) {\n    //       minData = record[minField];\n    //     }\n    //     if (sumField && record[sumField]) {\n    //       sumData += record[sumField];\n    //     }\n    //     if (avgField && record[avgField]) {\n    //       avgSumData += record[avgField];\n    //       avgCount++;\n    //     }\n    //   }\n    //   if (colObj.count && colObj.count.length > 0) {\n    //     formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\n    //   }\n    //   if (colObj.ringRatio && colObj.ringRatio.length > 0) {\n    //     // 针对结果数据进行环比、同比\n    //     let rField = colObj.ringRatio[0].fields;\n    //     let dataFields = [];\n    //     for (let k = 0; k < allColumns.length; k++) {\n    //       if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\n    //         let xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\n    //         if (xDataField == rField) {\n    //           dataFields.push(allColumns[k].field);\n    //         }\n    //       }\n    //     }\n    //     if (!dataFields || dataFields.length < 2) {\n    //       formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\n    //     } else {\n    //       dataFields.sort();\n    //       let record = rstDataArray[rstDataArray.length - 1];\n    //       let curDataDateF = dataFields[dataFields.length - 1];\n    //       let lastDataDateF = dataFields[dataFields.length - 2];\n    //       let scaleR = record[curDataDateF] / record[lastDataDateF] - 1;\n    //       formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\n    //     }\n    //   }\n    //   if (colObj.sum && colObj.sum.length > 0) {\n    //     formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\n    //   }\n    //   if (colObj.avg && colObj.avg.length > 0) {\n    //     let avgData = avgSumData / avgCount;\n    //     formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\n    //   }\n    //   if (colObj.max && colObj.max.length > 0) {\n    //     formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\n    //   }\n    //   if (colObj.min && colObj.min.length > 0) {\n    //     formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\n    //   }\n    //   if (colObj.totalX && colObj.totalX.length > 0) {\n    //     formula = formula.replace(\n    //       /TOTALX\\(\\[(\\w+)\\]\\)/g,\n    //       rstDataArray[rstDataArray.length - 1][colObj.totalX[0].fields]\n    //     );\n    //   }\n    //   // 替换没有函数的字段\n    //   if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n    //     let vKeys = formula.match(/\\[(.+)\\]/g);\n    //     formula = formula.replace(\n    //       /\\(\\[(\\w+)\\]\\)/g,\n    //       rstDataArray[0][vKeys[0] + suffix]\n    //     );\n    //   }\n    //   // 后续需要修改eval(formula)该四则运算\n    //   let data = eval(formula);\n    //   return data;\n    // },\n    // /**\n    //  * Y轴数据计算\n    //  */\n    // getTotalYValue(totalY, allColumns, rstDataArray) {\n    //   for (let i = 0; i < totalY.length; i++) {\n    //     let totaoYCol = totalY[i];\n    //     let formula = totaoYCol.formula;\n    //     let colObj = this.getExpressionField(totaoYCol);\n    //     let countField =\n    //       colObj.count && colObj.count.length > 0 ? colObj.count[0].fields : \"\";\n    //     let maxField =\n    //       colObj.max && colObj.max.length > 0 ? colObj.max[0].fields : \"\";\n    //     let minField =\n    //       colObj.min && colObj.min.length > 0 ? colObj.min[0].fields : \"\";\n    //     let sumField =\n    //       colObj.sum && colObj.sum.length > 0 ? colObj.sum[0].fields : \"\";\n    //     let avgField =\n    //       colObj.avg && colObj.avg.length > 0 ? colObj.avg[0].fields : \"\";\n    //     let countFieldArr = [];\n    //     let maxFieldArr = [];\n    //     let minFieldArr = [];\n    //     let sumFieldArr = [];\n    //     let avgFieldArr = [];\n    //     for (let j = 0; j < allColumns.length; j++) {\n    //       let column = allColumns[j].field.replace(/\\[(.+)\\]/g, \"\");\n    //       if (column == countField) {\n    //         countFieldArr.push(allColumns[j].field);\n    //       }\n    //       if (column == maxField) {\n    //         maxFieldArr.push(allColumns[j].field);\n    //       }\n    //       if (column == minField) {\n    //         minFieldArr.push(allColumns[j].field);\n    //       }\n    //       if (column == sumField) {\n    //         sumFieldArr.push(allColumns[j].field);\n    //       }\n    //       if (column == avgField) {\n    //         avgFieldArr.push(allColumns[j].field);\n    //       }\n    //     }\n    //     for (let j = 0; j < rstDataArray.length; j++) {\n    //       let record = rstDataArray[i];\n    //       let countLst = \",\";\n    //       let count = 0;\n    //       let maxData = record[maxFieldArr[0]] || \"\";\n    //       let minData = record[minFieldArr[0]] || \"\";\n    //       let sumData = 0;\n    //       // 平均值的和值\n    //       let avgSumData = 0;\n    //       // 平均值叠加的数量\n    //       let avgCount = 0;\n    //       if (colObj.count && colObj.count.length > 0) {\n    //         for (let k = 0; k < countFieldArr.length; k++) {\n    //           if (\n    //             countField &&\n    //             countLst.indexOf(\",\" + record[countFieldArr[k]] + \",\") == -1\n    //           ) {\n    //             countLst += record[countFieldArr[k]] + \",\";\n    //             count++;\n    //           }\n    //         }\n    //         formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\n    //       }\n    //       if (colObj.ringRatio && colObj.ringRatio.length > 0) {\n    //         // 最后处理\n    //       }\n    //       if (colObj.sum && colObj.sum.length > 0) {\n    //         for (let k = 0; k < sumFieldArr.length; k++) {\n    //           if (sumField && record[sumFieldArr[k]]) {\n    //             sumData += record[sumFieldArr[k]];\n    //           }\n    //         }\n    //         formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\n    //       }\n    //       if (colObj.avg && colObj.avg.length > 0) {\n    //         for (let k = 0; k < avgFieldArr.length; k++) {\n    //           if (avgField && record[avgFieldArr[k]]) {\n    //             avgSumData += record[avgFieldArr[k]];\n    //             avgCount++;\n    //           }\n    //         }\n    //         let avgData = avgSumData / avgCount;\n    //         formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\n    //       }\n    //       if (colObj.max && colObj.max.length > 0) {\n    //         for (let k = 0; k < maxFieldArr.length; k++) {\n    //           if (maxField && record[maxFieldArr[k]]) {\n    //             maxData =\n    //               maxData < record[maxFieldArr[k]]\n    //                 ? record[maxFieldArr[k]]\n    //                 : maxData;\n    //           }\n    //         }\n    //         formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\n    //       }\n    //       if (colObj.min && colObj.min.length > 0) {\n    //         for (let k = 0; k < minFieldArr.length; k++) {\n    //           if (minField && record[minFieldArr[k]]) {\n    //             minData =\n    //               minData > record[minFieldArr[k]]\n    //                 ? record[minFieldArr[k]]\n    //                 : minData;\n    //           }\n    //         }\n    //         formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\n    //       }\n    //       if (colObj.totalX && colObj.totalX.length > 0) {\n    //         // let totalXR=rstDataArray[rstDataArray.length-1];\n    //         // let totalXF = colObj.totalX[0].fields + suffix;\n    //         // formula = formula.replace(\n    //         //   /TOTALX\\(\\[(\\w+)\\]\\)/g,\n    //         //   rstDataList[totalX[0].formula][totalXF]\n    //         // );\n    //         // 后续需要改进\n    //         formula = formula.replace(/TOTALX\\(\\[(\\w+)\\]\\)/g, 1);\n    //       }\n    //       // 替换没有函数的字段\n    //       if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n    //         formula = formula.replace(\n    //           /\\(\\[(\\w+)\\]\\)/g,\n    //           record[totaoYCol.field]\n    //         );\n    //       }\n    //       // 后续需要修改eval(formula)该四则运算\n    //       let data = eval(formula);\n    //       rstDataArray[j][totaoYCol.field] = data;\n    //     }\n    //   }\n    //   return rstDataArray;\n    // },\n    // /**\n    //  * 数据合并，主要是将OPEN的数据进行合并\n    //  * @param allDataArr 数据数组\n    //  * @param columns 展示字段\n    //  */\n    // getShowFieldDataList(allDataArr, columns, allColumns) {\n    //   let rstAllColumns = [];\n    //   let rstLst = [];\n    //   let dataArray = deepJSONCopy(allDataArr);\n    //   // 如果记录为1，那就不需要进行合并\n    //   if (!dataArray || dataArray.length < 2) {\n    //     return dataArray;\n    //   }\n    //   if (!dataArray[0].dataValue_key) {\n    //     return dataArray;\n    //   }\n    //   let haveFormulaColumns = {};\n    //   // 用于判断返回显示字段中是否存在该字段\n    //   let isExistsFields = [];\n    //   // 用于找到展开后字段的下标\n    //   let columnIndexObj = {};\n    //   // 展开后字段的下标\n    //   let index = 0;\n    //   for (let i = 0; i < allColumns.length; i++) {\n    //     if (allColumns[i].formula) {\n    //       let field = allColumns[i].field;\n    //       haveFormulaColumns[field] = allColumns[i];\n    //       isExistsFields.push(field);\n    //     }\n    //     let formula = allColumns[i].formula;\n    //     if (formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n    //       continue;\n    //     }\n    //     columnIndexObj[allColumns[i].field] = index++;\n    //   }\n    //   // 先将不需要展开的字段全部放进返回显示字段中\n    //   for (let j = 0; j < columns.length; j++) {\n    //     let colField = columns[j].field;\n    //     let formula = columns[j].formula;\n    //     if (formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n    //       continue;\n    //     }\n    //     rstAllColumns.push(columns[j]);\n    //     isExistsFields.push(colField);\n    //   }\n    //   // 将所有非展开字段且存在值的字段值作为key的Object\n    //   let map = {};\n    //   for (let i = 0; i < dataArray.length; i++) {\n    //     let dataRst = {};\n    //     let dataRecord = dataArray[i];\n    //     // 将所有非展开字段且存在值的字段值作为key，便于数组连接\n    //     let key = \"\";\n    //     for (let j = 0; j < columns.length; j++) {\n    //       let colField = columns[j].field;\n    //       dataRst[colField] = dataRecord[colField];\n    //       if (dataRecord[colField]) {\n    //         key += \"_\" + dataRecord[colField];\n    //       }\n    //     }\n    //     if (key) {\n    //       let dataKey = dataRecord.dataValue_key;\n    //       dataRst.dataValue_key = dataRecord.dataValue_key;\n    //       dataRst[dataKey] = dataRecord[dataKey];\n    //       // 生成显示字段\n    //       let showColumn = {};\n    //       let dataFieldKey = dataKey.replace(/\\[(.+)\\]/g, \"\");\n    //       showColumn.field = dataKey;\n    //       showColumn.formula = haveFormulaColumns[dataFieldKey].formula;\n    //       showColumn.children = null;\n    //       if (isExistsFields.indexOf(dataKey) == -1) {\n    //         let index = columnIndexObj[dataFieldKey];\n    //         rstAllColumns.splice(index, 0, showColumn);\n    //         isExistsFields.push(dataKey);\n    //       }\n    //       let recordKeys = Object.keys(dataRecord);\n    //       if (recordKeys && recordKeys.length > 1) {\n    //         for (let j = 0; j < recordKeys.length; j++) {\n    //           if (\n    //             dataRecord[recordKeys[j]] == \"********\" &&\n    //             /\\[(.+)\\]/g.test(recordKeys[j])\n    //           ) {\n    //             dataRst[recordKeys[j]] = dataRecord[recordKeys[j]];\n    //             // 生成显示字段\n    //             let showColumn = {};\n    //             let dataFieldKey = recordKeys[j].replace(/\\[(.+)\\]/g, \"\");\n    //             showColumn.field = recordKeys[j];\n    //             showColumn.formula = haveFormulaColumns[dataFieldKey].formula;\n    //             showColumn.children = null;\n    //             if (isExistsFields.indexOf(recordKeys[j]) == -1) {\n    //               let index = columnIndexObj[dataFieldKey];\n    //               rstAllColumns.splice(index, 0, showColumn);\n    //               isExistsFields.push(recordKeys[j]);\n    //             }\n    //           }\n    //         }\n    //       }\n    //       let arr = map[key] || [];\n    //       arr.push(dataRst);\n    //       map[key] = arr;\n    //     }\n    //   }\n    //   // 得到所有的分类，进行连接\n    //   let mapKeys = Object.keys(map);\n    //   for (let i = 0; i < mapKeys.length; i++) {\n    //     let arr = map[mapKeys[i]] || [];\n    //     if (arr.length < 1) {\n    //       continue;\n    //     } else if (arr.length == 1) {\n    //       rstLst.push(arr[0]);\n    //     } else {\n    //       let dataLst = arr[0];\n    //       for (let j = 1; j < arr.length; j++) {\n    //         dataLst = this.concatObject(dataLst, arr[j]);\n    //       }\n    //       rstLst.push(dataLst);\n    //     }\n    //   }\n    //   let result = { data: rstLst, column: rstAllColumns };\n    //   return result;\n    // },\n    // /**\n    //  * 根据字段数组（包含字字段）得到所有的字段数组，将子字段也放在列表中\n    //  */\n    // getAllColumn(columns) {\n    //   // 遍历字段，将子字段展开，找到最终不显示的字段\n    //   let allColumns = [];\n    //   for (let i = 0; i < columns.length; i++) {\n    //     let curColumn = deepJSONCopy(columns[i]);\n    //     allColumns.push(curColumn);\n    //     if (curColumn.children && curColumn.children.length > 0) {\n    //       let childs = this.getAllColumn(curColumn.children) || [];\n    //       allColumns = allColumns.concat(childs);\n    //     }\n    //   }\n    //   return allColumns;\n    // },\n    // /**\n    //  * 展开数据，仅进行数据处理\n    //  * 处理结果；类似{ equipType: 1, equipTypeName: \"中央空调\",id: 1, name: \"中央空调1#\", type: 1, equipId: 1, dataValue[2018-05][42]: 522.35, dataValue_key:\"dataValue[2018-05][42]\"}\n    //  * @param curDataArr 要处理的数组\n    //  * @param columns 显示字段\n    //  * @param uniqueField 唯一字段\n    //  * @param showDataField 最终显示数据的字段，如 dataValue[2018-04]\n    //  */\n    // openRecordNotOperation(curDataArr, columns, uniqueField, showDataField) {\n    //   // 遍历字段，将子字段展开，找到最终不显示的字段\n    //   // let allColumns = this.getAllColumn(columns);\n    //   // 最终显示数据的字段showDataField\n    //   let fieldObj = this.getExpressionField(columns);\n    //   let openF = fieldObj.open;\n    //   if (!openF || openF.length < 1) {\n    //     return curDataArr;\n    //   }\n    //   let openCol = openF[0].fields;\n    //   if (openCol == \"\" || openCol.indexOf(\",\") > -1) {\n    //     return curDataArr;\n    //   }\n    //   let openChildren = columns[openF[0].index].children || [];\n    //   // 如果子字段为空，返回\n    //   if (!openChildren || openChildren.length < 1) {\n    //     return curDataArr;\n    //   }\n    //   let childFieldObj = this.getExpressionField(openChildren);\n\n    //   // 改变最终显示字段的字段名，\n    //   // 如将\"dataValue\"改成\"dataValue[2018-04]\"，其中2018-04为open字段的值\n    //   // \"dataValue_key\"的值为新数据字段的字段名，如果该字段不存在，说明第一次进来\n    //   let keyField = fieldObj.open[0].fields;\n    //   for (let i = 0; i < curDataArr.length; i++) {\n    //     let openFValue = curDataArr[i][keyField];\n    //     for (let j = 0; j < openChildren.length; j++) {\n    //       let childField = openChildren[j].field;\n    //       if (!curDataArr[i][childField]) {\n    //         curDataArr[i][childField] = \"********\";\n    //       }\n    //       if (childField == showDataField) {\n    //         let dataField = curDataArr[i].dataValue_key || showDataField;\n    //         let key = dataField + \"[\" + openFValue + \"]\";\n    //         let reg = RegExp(dataField, \"g\");\n    //         curDataArr[i] = JSON.parse(\n    //           JSON.stringify(curDataArr[i]).replace(reg, key)\n    //         );\n    //         delete curDataArr[i][keyField];\n    //         curDataArr[i].dataValue_key = key;\n    //       } else {\n    //         let dataValueKey = curDataArr[i].dataValue_key;\n    //         let dataField = \"\";\n    //         if (dataValueKey) {\n    //           let vKeys = dataValueKey.match(/\\[(.+)\\]/g);\n    //           dataField = childField + vKeys[0];\n    //           dataField = dataField.replace(\"[\" + openFValue + \"]\", \"\");\n    //         } else {\n    //           dataField = childField;\n    //         }\n    //         let key = dataField + \"[\" + openFValue + \"]\";\n    //         let reg = RegExp(dataField, \"g\");\n    //         if (curDataArr[i][dataField] != undefined) {\n    //           curDataArr[i] = JSON.parse(\n    //             JSON.stringify(curDataArr[i]).replace(reg, key)\n    //           );\n    //           delete curDataArr[i][dataField];\n    //         }\n    //       }\n    //     }\n    //   }\n\n    //   // 如果子字段中没有需要展开的了，那么直接处理，否则继续递归调用\n    //   if (!childFieldObj.open || childFieldObj.open.length < 1) {\n    //     return curDataArr;\n    //   } else if (childFieldObj.open.length == 1) {\n    //     //递归调用\n    //     return this.openRecordNotOperation(\n    //       curDataArr,\n    //       columns,\n    //       uniqueField,\n    //       showDataField\n    //     );\n    //   } else {\n    //     return curDataArr;\n    //   }\n    // },\n    // /**\n    //  * 获取统计数量的数据\n    //  * @param dataObj 用唯一字段做key的Object对象\n    //  * @param uniqueField 唯一字段名数组\n    //  * @param countCol 统计字段\n    //  * @param dataArray 数据数组\n    //  */\n    // getCountRecord(dataObj, uniqueField, countCol, dataArray) {\n    //   let rst = [];\n    //   let dataObjKey = Object.keys(dataObj);\n    //   for (let i = 0; i < dataObjKey.length; i++) {\n    //     let keyDatas = deepJSONCopy(dataObj[dataObjKey[i]]);\n    //     if (keyDatas.length < 1) {\n    //       continue;\n    //     }\n    //     let record = {};\n    //     for (let j = 0; j < uniqueField.length; j++) {\n    //       record[uniqueField[j]] = keyDatas[0][uniqueField[j]] || \"\";\n    //     }\n    //     let countColStr = \",\";\n    //     let count = 0;\n    //     for (let j = 0; j < keyDatas.length; j++) {\n    //       if (countColStr.indexOf(\",\" + keyDatas[j][countCol] + \",\") < 0) {\n    //         count++;\n    //         countColStr += keyDatas[j][countCol] + \",\";\n    //       }\n    //     }\n    //     record[countCol] = count;\n    //     rst.push(record);\n    //   }\n    //   return this.concatArray(dataArray, rst, uniqueField);\n    // },\n    // /**\n    //  * 运算函数求值\n    //  * @param allDataArr 所有的数据\n    //  * @param dataObj 使用唯一性字段作为key的object\n    //  * @param column 当前处理的字段\n    //  * @param colObj 字段column的formula解析后的object\n    //  * @param rstDataList 已经处理的数据，根据column处理后的数据需要粘贴在该数据后面\n    //  */\n    // getDataByOperation(\n    //   allDataArr,\n    //   dataObj,\n    //   allColumns,\n    //   column,\n    //   colObj,\n    //   totalX,\n    //   rstDataList\n    // ) {\n    //   if (colObj.open && colObj.open.length > 0) {\n    //     return rstDataList;\n    //   }\n    //   // formula=\"SUM([dataValue])/[totalX[dataVlue]\"\n    //   let curDataList = deepJSONCopy(rstDataList);\n    //   let keys = Object.keys(dataObj);\n    //   let field = column.field;\n    //   let suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\n    //   for (let i = 0; i < keys.length; i++) {\n    //     let uniqueDataList = dataObj[keys[i]];\n    //     let countField =\n    //       colObj.count && colObj.count.length > 0\n    //         ? colObj.count[0].fields + suffix\n    //         : \"\";\n    //     let maxField =\n    //       colObj.max && colObj.max.length > 0\n    //         ? colObj.max[0].fields + suffix\n    //         : \"\";\n    //     let minField =\n    //       colObj.min && colObj.min.length > 0\n    //         ? colObj.min[0].fields + suffix\n    //         : \"\";\n    //     let sumField =\n    //       colObj.sum && colObj.sum.length > 0\n    //         ? colObj.sum[0].fields + suffix\n    //         : \"\";\n    //     let avgField =\n    //       colObj.avg && colObj.avg.length > 0\n    //         ? colObj.avg[0].fields + suffix\n    //         : \"\";\n    //     let countLst = \",\";\n    //     let count = 0;\n    //     let maxData = uniqueDataList[0][maxField] || \"\";\n    //     let minData = uniqueDataList[0][minField] || \"\";\n    //     let sumData = 0;\n    //     // 平均值的和值\n    //     let avgSumData = 0;\n    //     // 平均值叠加的数量\n    //     let avgCount = 0;\n    //     let formula = column.formula;\n    //     for (let j = 0; j < uniqueDataList.length; j++) {\n    //       let record = uniqueDataList[j];\n    //       if (\n    //         countField &&\n    //         countLst.indexOf(\",\" + record[countField] + \",\") == -1\n    //       ) {\n    //         countLst += record[countField] + \",\";\n    //         count++;\n    //       }\n    //       if (maxField && maxData < record[maxField]) {\n    //         maxData = record[maxField];\n    //       }\n    //       if (minField && minData > record[minField]) {\n    //         minData = record[minField];\n    //       }\n    //       if (sumField && record[sumField]) {\n    //         sumData += record[sumField];\n    //       }\n    //       if (avgField && record[avgField]) {\n    //         avgSumData += record[avgField];\n    //         avgCount++;\n    //       }\n    //     }\n    //     if (colObj.count && colObj.count.length > 0) {\n    //       formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\n    //     }\n    //     if (colObj.ringRatio && colObj.ringRatio.length > 0) {\n    //       // 针对结果数据进行环比、同比\n    //       let rField = colObj.ringRatio[0].fields;\n    //       let dataFields = [];\n    //       for (let k = 0; k < allColumns.length; k++) {\n    //         if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\n    //           let xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\n    //           if (xDataField == rField) {\n    //             dataFields.push(allColumns[k].field);\n    //           }\n    //         }\n    //       }\n    //       if (!dataFields || dataFields.length < 2) {\n    //         formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\n    //       } else {\n    //         dataFields.sort();\n    //         let curDataDateF = dataFields[dataFields.length - 1];\n    //         let lastDataDateF = dataFields[dataFields.length - 2];\n    //         let scaleR =\n    //           curDataList[keys[i]][curDataDateF] /\n    //             curDataList[keys[i]][lastDataDateF] -\n    //           1;\n    //         formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\n    //       }\n    //     }\n    //     if (colObj.sum && colObj.sum.length > 0) {\n    //       formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\n    //     }\n    //     if (colObj.avg && colObj.avg.length > 0) {\n    //       let avgData = avgSumData / avgCount;\n    //       formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\n    //     }\n    //     if (colObj.max && colObj.max.length > 0) {\n    //       formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\n    //     }\n    //     if (colObj.min && colObj.min.length > 0) {\n    //       formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\n    //     }\n    //     if (colObj.totalX && colObj.totalX.length > 0) {\n    //       let totalXF = colObj.totalX[0].fields + suffix;\n    //       formula = formula.replace(\n    //         /TOTALX\\(\\[(\\w+)\\]\\)/g,\n    //         rstDataList[totalX[0].formula][totalXF]\n    //       );\n    //     }\n    //     // 替换没有函数的字段\n    //     if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\n    //       let vKeys = formula.match(/\\[(.+)\\]/g);\n    //       formula = formula.replace(\n    //         /\\(\\[(\\w+)\\]\\)/g,\n    //         uniqueDataList[0][vKeys[0] + suffix]\n    //       );\n    //     }\n    //     // 后续需要修改eval(formula)该四则运算\n    //     let data = eval(formula);\n    //     curDataList[keys[i]][field] = data;\n    //   }\n    //   return curDataList;\n    // },\n    // /**\n    //  * 得到公式中的字段\n    //  * @param columns 需要显示的字段数组\n    //  */\n    // getExpressionField(columns) {\n    //   let fieldObj = {\n    //     count: [],\n    //     totalX: [],\n    //     open: [],\n    //     ringRatio: [],\n    //     sum: [],\n    //     avg: [],\n    //     max: [],\n    //     min: []\n    //   };\n    //   // 统计数量正则式\n    //   let countReg = /COUNT\\(\\[(\\w+)\\]\\)/g;\n    //   // 统计正则式\n    //   let totalXReg = /TOTALX\\(\\[(\\w+)\\]\\)/g;\n    //   // 展开正则式\n    //   let openReg = /OPEN\\(\\[(\\w+)\\]\\)/g;\n    //   // 求比例正则式\n    //   let ringRatioReg = /RINGRATIO\\(\\[(\\w+)\\]\\)/g;\n    //   // 求和正则式\n    //   let sumReg = /SUM\\(\\[(\\w+)\\]\\)/g;\n    //   // 平均值正则式\n    //   let avgReg = /AVG\\(\\[(\\w+)\\]\\)/g;\n    //   // 最大值正则式\n    //   let maxReg = /MAX\\(\\[(\\w+)\\]\\)/g;\n    //   // 最小值正则式\n    //   let minReg = /MIN\\(\\[(\\w+)\\]\\)/g;\n    //   if (columns instanceof Array) {\n    //     for (let i = 0; i < columns.length; i++) {\n    //       let item = columns[i];\n    //       // 得到所有的统计数量字段\n    //       if (countReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, countReg);\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.count.push(fieldSubObj);\n    //       }\n    //       // 得到所有的统计字段\n    //       if (totalXReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, totalXReg);\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.totalX.push(fieldSubObj);\n    //       }\n    //       // 得到所有的展开字段\n    //       if (openReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, openReg);\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.open.push(fieldSubObj);\n    //       }\n    //       // 得到所有的比例字段\n    //       if (ringRatioReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(\n    //           item.formula,\n    //           ringRatioReg\n    //         );\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.ringRatio.push(fieldSubObj);\n    //       }\n    //       // 得到所有的求和字段\n    //       if (sumReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, sumReg);\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.sum.push(fieldSubObj);\n    //       }\n    //       // 得到所有的平均值字段\n    //       if (avgReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, avgReg);\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.avg.push(fieldSubObj);\n    //       }\n    //       // 得到所有的最大值字段\n    //       if (maxReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, maxReg);\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.max.push(fieldSubObj);\n    //       }\n    //       // 得到所有的最小值字段\n    //       if (minReg.test(item.formula)) {\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, minReg);\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //         fieldObj.min.push(fieldSubObj);\n    //       }\n    //     }\n    //   } else {\n    //     let item = columns;\n    //     let i = 0;\n    //     // 得到所有的统计数量字段\n    //     if (countReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, countReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.count.push(fieldSubObj);\n    //     }\n    //     // 得到所有的统计字段\n    //     if (totalXReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, totalXReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.totalX.push(fieldSubObj);\n    //     }\n    //     // 得到所有的展开字段\n    //     if (openReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, openReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.open.push(fieldSubObj);\n    //     }\n    //     // 得到所有的比例字段\n    //     if (ringRatioReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, ringRatioReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.ringRatio.push(fieldSubObj);\n    //     }\n    //     // 得到所有的求和字段\n    //     if (sumReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, sumReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.sum.push(fieldSubObj);\n    //     }\n    //     // 得到所有的平均值字段\n    //     if (avgReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, avgReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.avg.push(fieldSubObj);\n    //     }\n    //     // 得到所有的最大值字段\n    //     if (maxReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, maxReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.max.push(fieldSubObj);\n    //     }\n    //     // 得到所有的最小值字段\n    //     if (minReg.test(item.formula)) {\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, minReg);\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\n    //       fieldObj.min.push(fieldSubObj);\n    //     }\n    //   }\n    //   return fieldObj;\n    // },\n    // /**\n    //  * 公式解析\n    //  * @param fieldFormula 字段的公式\n    //  * @param reg 匹配的正则式\n    //  */\n    // fieldFormulaAnalysis(fieldFormula, reg) {\n    //   let rst = [];\n    //   let lastIndex = 1;\n    //   reg.lastIndex = 0;\n    //   while (lastIndex) {\n    //     let rstArr1 = reg.exec(fieldFormula);\n    //     if (rstArr1 != null) {\n    //       rst.push(rstArr1[1]);\n    //     }\n    //     lastIndex = reg.lastIndex;\n    //   }\n    //   return rst;\n    // }\n    getMeterEnergy: function getMeterEnergy() {\n      this.$ajax({\n        url: \"rest/analysisData/meterEnergyData\",\n        method: \"get\",\n        params: {\n          title: \"表计数据测试\",\n          orgIds: 35,\n          energyIds: 35,\n          cycle: 3,\n          startTime: \"2018-06-01\",\n          endTime: \"2018-06-30\",\n          isCount: true,\n          groupBys: \"0001\"\n        }\n      }).then(function (res) {\n        if (res.data.status) {\n          var data = res.data.records;\n          var obj = {\n            num: 1,\n            dataArray: [data],\n            relation: [],\n            uniqueField: [\"dataTime\"],\n            column: [{\n              field: \"dataTime\",\n              formula: \"\",\n              children: null\n            }, {\n              field: \"meterId\",\n              formula: \"OPEN([meterId])\",\n              children: [{\n                field: \"displayData\",\n                formula: \"SUM([displayData])\",\n                children: null\n              }]\n            }],\n            totalX: [{\n              field: \"dataTime\",\n              formula: \"合计\",\n              children: null\n            }, {\n              field: \"meterId\",\n              formula: \"OPEN([meterId])\",\n              children: [{\n                field: \"displayData\",\n                formula: \"SUM([displayData])\",\n                children: null\n              }]\n            }],\n            totalY: [{\n              field: \"合计\",\n              formula: \"SUM([displayData])\",\n              children: null\n            }]\n          };\n          var d1 = new Date();\n          var rstTableData = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__util_dataUtil__[\"a\" /* getTableDataByOneArray */])(obj);\n          console.log(\"rstTableData=\", rstTableData);\n          var d2 = new Date();\n          console.log(\"耗时：\", d2.getTime() - d1.getTime());\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.getTbList();\n    this.getTargetTypeTree();\n    this.getOrgTree();\n    this.getOrgList();\n    this.getTargetTypeList();\n    this.getMeterEnergy();\n    // this.getTableDataTest();\n  }\n});\n\n/***/ }),\n\n/***/ \"YkxX\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(\"yt7g\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    value: {\n      type: [Object, Boolean],\n      default: false\n    },\n    targetType: {\n      type: Object\n    }\n  },\n  data: function data() {\n    return {\n      expressTableActive: \"0\",\n      expressionForm: {\n        expression: \"\",\n        expressionTrue: \"\",\n        level: \"\",\n        dependence: \"\",\n        indirect_dependence: \"\"\n      },\n      expressionBtn: [\"SUM()\", \"MAX()\", \"MIN()\", \"AVG()\", \"SD()\", \"(\", \")\", \"+\", \"*\", \"-\", \"/\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"],\n      expressTableUrl: [\"rest/target/targetConstant\", \"rest/target/baseTarget\"],\n      expressAttr: [\"identifyValue\", \"name\"],\n      expressTrueAttr: [\"identify\", \"id\"],\n      expressWrap: [\"{temp}\", \"[temp]\"],\n      expressionRules: this.eachValidate({\n        expression: { imeDisabled: true }\n      }),\n      tableList: {},\n      colsData: [[{ label: \"常量名称\", prop: \"identifyValue\", align: \"left\" }, { label: \"常量代码\", prop: \"code\", align: \"left\" }, { label: \"常量值\", prop: \"identify\", align: \"left\" }], [{ label: \"指标简称\", prop: \"shortName\", align: \"left\" }, { label: \"指标名称\", prop: \"name\", align: \"left\" }, { label: \"指标周期\", prop: \"targetCycle\", align: \"left\" }, {\n        label: \"指标类型\",\n        prop: \"targetType\",\n        align: \"left\",\n        displace: this.targetType\n      }, { label: \"所属组织\", prop: \"orgId\", align: \"left\", displace: {} }]],\n      searchForm: [{\n        formdata: {},\n        currentPage: 1,\n        pageSize: 10\n      }, {\n        name: \"\",\n        calculationLevel: \"\",\n        valueMethod: \"\",\n        currentPage: 1,\n        pageSize: 10\n      }]\n    };\n  },\n\n  watch: {\n    value: function value(val) {\n      if (val && this.expressionForm.expression.length === 0) {\n        this.expressionForm = val;\n      }\n    },\n    \"expressionForm.expression\": function expressionFormExpression() {\n      this.$emit(\"input\", false);\n    }\n  },\n  methods: {\n    keyUpElement: function keyUpElement(element) {\n      this.expressionForm.expression += element;\n      this.expressionForm.expressionTrue += element;\n    },\n\n    // 过滤掉输入的字母或特殊字符\n    handleKeyDown: function handleKeyDown(keyBoard) {\n      // 加了readonly后用不上\n      //   if (\n      //     keyBoard.keyCode !== 8 &&\n      //     this.expressionBtn.indexOf(keyBoard.key) === -1\n      //   ) {\n      //     keyBoard.preventDefault();\n      //     keyBoard.stopPropagation();\n      //   } else {\n      //   }\n    },\n\n    // tab切换\n    handleClick: function handleClick() {\n      this.getTargetTb();\n    },\n    selectRow: function selectRow(row) {\n      var temp = row[this.expressAttr[this.expressTableActive]];\n      var tempTrue = row[this.expressTrueAttr[this.expressTableActive]];\n      this.expressionForm.expression += this.expressWrap[this.expressTableActive].replace(\"temp\", temp);\n      this.expressionForm.expressionTrue += this.expressWrap[this.expressTableActive].replace(\"temp\", tempTrue);\n    },\n    getTargetTb: function getTargetTb() {\n      var _this = this;\n\n      this.$ajax.get(this.expressTableUrl[this.expressTableActive], {\n        params: this.searchForm[this.expressTableActive]\n      }).then(function (res) {\n        _this.tableList = res.data;\n      });\n    },\n    getOrgTree: function getOrgTree() {\n      var _this2 = this;\n\n      this.$ajax.get(\"rest/target/orgTree\", { loadingTarget: this.$refs.expressionTb }).then(function (res) {\n        var obj = {};\n        _this2.$each(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util_util__[\"b\" /* getListByTree */])(res.data.records, \"id\", \"children\"), function (item) {\n          obj[item.id] = item.name;\n        });\n        _this2.colsData[1][4].displace = obj;\n      });\n    },\n\n    // 校验表达式准确性\n    checkExpression: function checkExpression(form) {\n      var _this3 = this;\n\n      form.valueSource = this.expressionForm.expressionTrue;\n      this.$ajax.post(\"rest/target/expressionCheck\", form).then(function (res) {\n        if (res.data.status) {\n          _this3.expressionForm.level = res.data.records.level;\n          _this3.expressionForm.dependence = res.data.records.dependence;\n          _this3.expressionForm.indirect_dependence = res.data.records.indirect_dependence;\n          _this3.$emit(\"input\", _this3.expressionForm);\n        } else {\n          _this3.$message.error(res.data.answerMsg);\n        }\n      });\n    },\n    matchChar: function matchChar(str) {\n      var lastTarget = \"\",\n          sameTaget = 0,\n          target = \"\";\n      if (str.lastIndexOf(\"]\") === str.length - 1) {\n        //\t\t\treturn str.lastIndexOf(\"[\");\n        lastTarget = \"[\";\n        target = \"]\";\n      } else if (str.lastIndexOf(\"}\") === str.length - 1) {\n        //\t\t\treturn str.lastIndexOf(\"{\");\n        lastTarget = \"{\";\n        target = \"}\";\n      } else {\n        return str.length - 1;\n      }\n\n      for (var i = str.length - 2; i > -1; i--) {\n        if (sameTaget === 0 && str[i] === lastTarget) {\n          return i;\n        } else {\n          if (str[i] === target) {\n            sameTaget++;\n          } else if (str[i] === lastTarget) {\n            sameTaget--;\n          }\n        }\n      }\n    },\n    backSpace: function backSpace() {\n      var data = this.expressionForm.expression;\n      var dataTrue = this.expressionForm.expressionTrue;\n      this.expressionForm.expression = this.expressionForm.expression.substring(0, this.matchChar(data));\n      this.expressionForm.expressionTrue = this.expressionForm.expressionTrue.substring(0, this.matchChar(dataTrue));\n    },\n    clearAll: function clearAll() {\n      this.resetData();\n    },\n    getData: function getData() {\n      this.getOrgTree();\n      this.getTargetTb();\n    },\n    resetData: function resetData() {\n      this.expressionForm = {\n        expression: \"\",\n        expressionTrue: \"\",\n        level: \"\"\n      };\n    }\n  },\n  mounted: function mounted() {}\n});\n\n/***/ }),\n\n/***/ \"ZSZL\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"acE3\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".target-valuesource-btn{margin-left:10px}.target-flex{display:flex}.target-dialog .el-dialog{min-width:630px}\", \"\", {\"version\":3,\"sources\":[\"C:/vscode/ysems_webapp/src/views/platform/target/target.vue\"],\"names\":[],\"mappings\":\"AACA,wBACE,gBAAkB,CACnB,AACD,aACE,YAAc,CACf,AACD,0BACE,eAAiB,CAClB\",\"file\":\"target.vue\",\"sourcesContent\":[\"\\n.target-valuesource-btn {\\r\\n  margin-left: 10px;\\n}\\n.target-flex {\\r\\n  display: flex;\\n}\\n.target-dialog .el-dialog {\\r\\n  min-width: 630px;\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"aeOv\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_dataBase_vue__ = __webpack_require__(\"29sq\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_1050f97c_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_dataBase_vue__ = __webpack_require__(\"hkW3\");\nvar normalizeComponent = __webpack_require__(\"J0+h\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_dataBase_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_1050f97c_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_dataBase_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"al5a\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_target_vue__ = __webpack_require__(\"YjpV\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_6b969656_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_target_vue__ = __webpack_require__(\"GHae\");\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"NADl\")\n}\nvar normalizeComponent = __webpack_require__(\"J0+h\")\n/* script */\n\n/* template */\n\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_script_index_0_target_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_0_4_vue_loader_lib_template_compiler_index_id_data_v_6b969656_hasScoped_false_transformToRequire_video_src_source_src_img_src_image_xlink_href_node_modules_vue_loader_13_0_4_vue_loader_lib_selector_type_template_index_0_target_vue__[\"a\" /* default */],\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ \"hkW3\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-form', {\n    attrs: {\n      \"model\": _vm.dbForm,\n      \"label-width\": \"80px\"\n    }\n  }, [(_vm.type === 1) ? _c('el-form-item', {\n    attrs: {\n      \"prop\": \"source\"\n    }\n  }, [_c('el-select', {\n    model: {\n      value: (_vm.dbForm.source),\n      callback: function($$v) {\n        _vm.$set(_vm.dbForm, \"source\", $$v)\n      },\n      expression: \"dbForm.source\"\n    }\n  }, _vm._l((_vm.dbSourceList), function(item) {\n    return _c('el-option', {\n      key: item.id,\n      attrs: {\n        \"label\": item.name,\n        \"value\": item.id\n      }\n    })\n  }))], 1) : _vm._e(), _vm._v(\" \"), (_vm.type === 1) ? _c('el-form-item', {\n    attrs: {\n      \"prop\": \"sourceValue\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"rows\": 6,\n      \"type\": \"textarea\"\n    },\n    model: {\n      value: (_vm.dbForm.expression),\n      callback: function($$v) {\n        _vm.$set(_vm.dbForm, \"expression\", $$v)\n      },\n      expression: \"dbForm.expression\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), (_vm.type === 2) ? _c('el-form-item', {\n    attrs: {\n      \"prop\": \"source\",\n      \"label\": \"选择接口\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"value-key\": \"id\"\n    },\n    model: {\n      value: (_vm.dbForm.source),\n      callback: function($$v) {\n        _vm.$set(_vm.dbForm, \"source\", $$v)\n      },\n      expression: \"dbForm.source\"\n    }\n  }, _vm._l((_vm.dbInterfaceList), function(item) {\n    return _c('el-option', {\n      key: item.id,\n      attrs: {\n        \"label\": item.name,\n        \"value\": item\n      }\n    })\n  }))], 1) : _vm._e(), _vm._v(\" \"), (_vm.type === 2) ? _c('div', [_vm._v(\"接口参数\")]) : _vm._e(), _vm._v(\" \"), _vm._l((_vm.dbForm.source.list), function(item) {\n    return (_vm.type === 2) ? _c('el-form-item', {\n      key: item.id,\n      attrs: {\n        \"prop\": \"sourceValue\",\n        \"；:label\": \"item.name\"\n      }\n    }, [_c('el-input', {\n      model: {\n        value: (_vm.dbForm[item.value]),\n        callback: function($$v) {\n          _vm.$set(_vm.dbForm, item.value, $$v)\n        },\n        expression: \"dbForm[item.value]\"\n      }\n    })], 1) : _vm._e()\n  })], 2)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/10.71ddc33c878e02c4f923.js","<template>\r\n    <el-form :model=\"dbForm\" label-width=\"80px\">\r\n        <el-form-item prop=\"source\" v-if=\"type===1\">\r\n            <el-select v-model=\"dbForm.source\">\r\n                <el-option v-for=\"item in dbSourceList\" :key=\"item.id\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n            </el-select>\r\n        </el-form-item>\r\n        <el-form-item v-if=\"type===1\" prop=\"sourceValue\">\r\n            <el-input v-model=\"dbForm.expression\" :rows=\"6\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"source\" v-if=\"type===2\" label=\"选择接口\">\r\n            <el-select v-model=\"dbForm.source\" value-key=\"id\">\r\n                <el-option v-for=\"item in dbInterfaceList\" :key=\"item.id\" :label=\"item.name\" :value=\"item\"></el-option>\r\n            </el-select>\r\n        </el-form-item>\r\n        <div v-if=\"type===2\">接口参数</div>\r\n        <el-form-item v-if=\"type===2\" prop=\"sourceValue\" v-for=\"item in dbForm.source.list\" :key=\"item.id\" ；:label=\"item.name\">\r\n            <el-input v-model=\"dbForm[item.value]\"></el-input>\r\n        </el-form-item>\r\n    </el-form>\r\n</template>\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: [Object, Boolean]\r\n    },\r\n    type: {\r\n      default: [Number, String]\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      dbSourceList: [],\r\n      dbInterfaceList: [],\r\n      dbForm: {\r\n        source: \"\",\r\n        expression: \"\"\r\n      }\r\n    };\r\n  },\r\n  watch: {\r\n    dbForm: {\r\n      handler(valueObj) {\r\n        this.$emit(\"input\", valueObj);\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  methods: {\r\n    resetData() {\r\n      this.dbForm = {\r\n        source: \"\",\r\n        expression: \"\"\r\n      };\r\n    },\r\n    getDBSourse() {\r\n      this.$ajax(\"rest/target/targetDbSource\").then(res => {\r\n        this.dbSourceList = res.data.records;\r\n      });\r\n    },\r\n    getTargetInterface() {\r\n      this.$ajax\r\n        .get(\"rest/target/targetInterface\", { params: {} })\r\n        .then(res => {\r\n          this.$nextTick(() => {\r\n            this.dbInterfaceList = res.data.records;\r\n          });\r\n        });\r\n    },\r\n    getData() {\r\n      this.$nextTick(() => {\r\n        this.type === 1 ? this.getDBSourse() : this.getTargetInterface();\r\n      });\r\n    },\r\n    // 校验表达式准确性\r\n    checkExpression() {\r\n      return this.dbForm;\r\n      //   form.valueSource = this.expressionForm.expressionTrue;\r\n      //   this.$ajax.post(\"\", form).then(res => {\r\n      //     if (res.data.status) {\r\n      //       this.$emit(\"input\", this.dbForm);\r\n      //     } else {\r\n      //       this.$message.error(res.data.answerMsg);\r\n      //     }\r\n      //   });\r\n    }\r\n  },\r\n  updated() {\r\n    // this.getData();\r\n  },\r\n  mounted() {\r\n    // this.getDBSourse();\r\n    // this.getTargetInterface();\r\n  }\r\n};\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/platform/target/template/dataBase.vue?30014eb7","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('da-manage-page', [_c('div', {\n    attrs: {\n      \"slot\": \"button\"\n    },\n    slot: \"button\"\n  }, [_c('el-button', {\n    attrs: {\n      \"icon\": \"my-zengjia\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.dialogVisible = true;\n      }\n    }\n  }, [_vm._v(\"新增\")])], 1), _vm._v(\" \"), _c('el-form', {\n    attrs: {\n      \"slot\": \"search\",\n      \"inline\": true,\n      \"model\": _vm.searchForm.formdata\n    },\n    slot: \"search\"\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"指标名称\"\n    }\n  }, [_c('el-input', {\n    model: {\n      value: (_vm.searchForm.formdata.name),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"name\", $$v)\n      },\n      expression: \"searchForm.formdata.name\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标类型\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.targetTypeData,\n      \"defaultExpandAll\": true\n    },\n    model: {\n      value: (_vm.searchForm.formdata.targetType),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"targetType\", $$v)\n      },\n      expression: \"searchForm.formdata.targetType\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"组织机构\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.entOrgData,\n      \"defaultExpandAll\": true\n    },\n    model: {\n      value: (_vm.searchForm.formdata.orgId),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"orgId\", $$v)\n      },\n      expression: \"searchForm.formdata.orgId\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标周期\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"filterable\": \"\",\n      \"size\": \"medium\",\n      \"placeholder\": \"请选择\"\n    },\n    model: {\n      value: (_vm.searchForm.formdata.targetCycle),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"targetCycle\", $$v)\n      },\n      expression: \"searchForm.formdata.targetCycle\"\n    }\n  }, _vm._l((_vm.targetCycleOptions), function(item, index) {\n    return _c('el-option', {\n      key: index,\n      attrs: {\n        \"label\": item.dataText,\n        \"value\": parseInt(item.dataValue)\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"取值方式\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"filterable\": \"\",\n      \"size\": \"medium\",\n      \"placeholder\": \"请选择\"\n    },\n    model: {\n      value: (_vm.searchForm.formdata.valueMethod),\n      callback: function($$v) {\n        _vm.$set(_vm.searchForm.formdata, \"valueMethod\", $$v)\n      },\n      expression: \"searchForm.formdata.valueMethod\"\n    }\n  }, _vm._l((_vm.valueMethodOptions), function(item, index) {\n    return _c('el-option', {\n      key: index,\n      attrs: {\n        \"label\": item.dataText,\n        \"value\": parseInt(item.dataValue)\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('el-form-item', [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": _vm.getTbList\n    }\n  }, [_vm._v(\"查询\")])], 1)], 1), _vm._v(\" \"), _c('da-table', {\n    ref: \"table\",\n    attrs: {\n      \"slot\": \"content\",\n      \"colums\": _vm.colsData,\n      \"table-list\": _vm.tableList,\n      \"search-data\": _vm.searchForm,\n      \"showSelection\": false\n    },\n    on: {\n      \"callBack\": _vm.getTbList\n    },\n    slot: \"content\"\n  }, [_c('el-table-column', {\n    attrs: {\n      \"slot\": \"operation\",\n      \"property\": \"operation\",\n      \"label\": \"操作\",\n      \"width\": \"150\",\n      \"align\": \"center\",\n      \"fixed\": \"right\"\n    },\n    slot: \"operation\",\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              _vm.editTb(scope.row)\n            }\n          }\n        }, [_vm._v(\"编辑\")]), _vm._v(\" \"), _c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              _vm.delTb(scope.row)\n            }\n          }\n        }, [_vm._v(\"删除\")])]\n      }\n    }])\n  })], 1)], 1), _vm._v(\" \"), _c('da-dialog', {\n    staticClass: \"target-dialog\",\n    attrs: {\n      \"title\": _vm.title,\n      \"visible\": _vm.dialogVisible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.dialogVisible = $event\n      },\n      \"close\": function($event) {\n        _vm.closeDialog('addForm')\n      }\n    }\n  }, [_c('el-form', {\n    ref: \"addForm\",\n    staticClass: \"fm-line-50p clearfix\",\n    attrs: {\n      \"label-width\": \"100px\",\n      \"model\": _vm.addForm,\n      \"rules\": _vm.rules\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"指标名称\",\n      \"prop\": \"name\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.name),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"name\", $$v)\n      },\n      expression: \"addForm.name\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标简称\",\n      \"prop\": \"shortName\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.shortName),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"shortName\", $$v)\n      },\n      expression: \"addForm.shortName\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"组织机构\",\n      \"prop\": \"orgId\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.entOrgData,\n      \"defaultExpandAll\": true\n    },\n    model: {\n      value: (_vm.addForm.orgId),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"orgId\", $$v)\n      },\n      expression: \"addForm.orgId\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标类型\",\n      \"prop\": \"targetType\"\n    }\n  }, [_c('da-select-tree', {\n    attrs: {\n      \"data\": _vm.targetTypeData,\n      \"defaultExpandAll\": true\n    },\n    on: {\n      \"change\": _vm.getTargetUnitList\n    },\n    model: {\n      value: (_vm.addForm.targetType),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"targetType\", $$v)\n      },\n      expression: \"addForm.targetType\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标周期\",\n      \"prop\": \"targetCycle\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.addForm.targetCycle),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"targetCycle\", $$v)\n      },\n      expression: \"addForm.targetCycle\"\n    }\n  }, _vm._l((_vm.targetCycleOptions), function(item) {\n    return _c('el-radio', {\n      key: item.dataValue,\n      attrs: {\n        \"label\": parseInt(item.dataValue)\n      }\n    }, [_vm._v(_vm._s(item.dataText))])\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"指标单位\",\n      \"prop\": \"unit\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"filterable\": \"\",\n      \"placeholder\": \"请选择\"\n    },\n    model: {\n      value: (_vm.addForm.unit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"unit\", $$v)\n      },\n      expression: \"addForm.unit\"\n    }\n  }, _vm._l((_vm.unitOptions), function(item, index) {\n    return _c('el-option', {\n      key: index,\n      attrs: {\n        \"label\": item.identifyValue,\n        \"value\": item.identify\n      }\n    })\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"单位换算倍率\",\n      \"prop\": \"rate\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.rate),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"rate\", $$v)\n      },\n      expression: \"addForm.rate\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"数据上限\",\n      \"prop\": \"dataUpperLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.dataUpperLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dataUpperLimit\", $$v)\n      },\n      expression: \"addForm.dataUpperLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"数据下限\",\n      \"prop\": \"dataLowerLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.dataLowerLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dataLowerLimit\", $$v)\n      },\n      expression: \"addForm.dataLowerLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"统计上限\",\n      \"prop\": \"effectiveUpperLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.effectiveUpperLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"effectiveUpperLimit\", $$v)\n      },\n      expression: \"addForm.effectiveUpperLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"统计下限\",\n      \"prop\": \"effectiveLowerLimit\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.effectiveLowerLimit),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"effectiveLowerLimit\", $$v)\n      },\n      expression: \"addForm.effectiveLowerLimit\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"显示位数\",\n      \"prop\": \"dataDisplayPrecisions\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.dataDisplayPrecisions),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dataDisplayPrecisions\", $$v)\n      },\n      expression: \"addForm.dataDisplayPrecisions\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"正常使用\",\n      \"prop\": \"state\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.addForm.state),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"state\", $$v)\n      },\n      expression: \"addForm.state\"\n    }\n  }, _vm._l((_vm.stateOptions), function(item) {\n    return _c('el-radio', {\n      key: item.dataValue,\n      attrs: {\n        \"label\": item.dataValue\n      }\n    }, [_vm._v(_vm._s(item.dataText))])\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    staticClass: \"fm-item-100p\",\n    attrs: {\n      \"label\": \"取值方式\",\n      \"prop\": \"valueMethod\"\n    }\n  }, [_c('el-radio-group', {\n    model: {\n      value: (_vm.addForm.valueMethod),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"valueMethod\", $$v)\n      },\n      expression: \"addForm.valueMethod\"\n    }\n  }, _vm._l((_vm.valueMethodOptions), function(item) {\n    return _c('el-radio', {\n      key: item.dataValue,\n      attrs: {\n        \"label\": parseInt(item.dataValue)\n      }\n    }, [_vm._v(_vm._s(item.dataText))])\n  }))], 1), _vm._v(\" \"), _c('el-form-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.addForm.valueMethod !== '0'),\n      expression: \"addForm.valueMethod!=='0'\"\n    }],\n    staticClass: \"fm-item-100p\",\n    attrs: {\n      \"label\": \"表达式\",\n      \"prop\": \"valueSource\"\n    }\n  }, [_c('div', {\n    staticClass: \"target-flex\"\n  }, [_c('el-input', {\n    attrs: {\n      \"row\": 6,\n      \"type\": \"textarea\"\n    },\n    model: {\n      value: (_vm.addForm.valueSource),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"valueSource\", $$v)\n      },\n      expression: \"addForm.valueSource\"\n    }\n  }), _vm._v(\" \"), _c('el-button', {\n    staticClass: \"target-valuesource-btn\",\n    attrs: {\n      \"disabled\": _vm.addForm.valueMethod === '0' || !_vm.addForm.valueMethod\n    },\n    on: {\n      \"click\": _vm.editExpression\n    }\n  }, [_vm._v(\"重置\")])], 1)]), _vm._v(\" \"), _c('el-form-item', {\n    staticClass: \"fm-item-100p\",\n    attrs: {\n      \"label\": \"描述\",\n      \"prop\": \"valueContent\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"row\": 6,\n      \"type\": \"textarea\"\n    },\n    model: {\n      value: (_vm.addForm.valueContent),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"valueContent\", $$v)\n      },\n      expression: \"addForm.valueContent\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.addForm.valueMethod === 1),\n      expression: \"addForm.valueMethod===1\"\n    }],\n    attrs: {\n      \"label\": \"数据源\",\n      \"prop\": \"sourceId\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.sourceId),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"sourceId\", $$v)\n      },\n      expression: \"addForm.sourceId\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"直接依赖\",\n      \"prop\": \"dependence\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"disabled\": \"\"\n    },\n    model: {\n      value: (_vm.addForm.dependence),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"dependence\", $$v)\n      },\n      expression: \"addForm.dependence\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"间接依赖\",\n      \"prop\": \"indirectDependence\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\",\n      \"disabled\": \"\"\n    },\n    model: {\n      value: (_vm.addForm.indirectDependence),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"indirectDependence\", $$v)\n      },\n      expression: \"addForm.indirectDependence\"\n    }\n  })], 1), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"显示顺序\",\n      \"prop\": \"showSort\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"auto-complete\": \"off\"\n    },\n    model: {\n      value: (_vm.addForm.showSort),\n      callback: function($$v) {\n        _vm.$set(_vm.addForm, \"showSort\", $$v)\n      },\n      expression: \"addForm.showSort\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"dialog-footer\",\n    attrs: {\n      \"slot\": \"footer\"\n    },\n    slot: \"footer\"\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.saveDialog('addForm')\n      }\n    }\n  }, [_vm._v(\"确 定\")]), _vm._v(\" \"), _c('el-button', {\n    on: {\n      \"click\": function($event) {\n        _vm.dialogVisible = false\n      }\n    }\n  }, [_vm._v(\"取 消\")])], 1)], 1), _vm._v(\" \"), _c('da-dialog', {\n    attrs: {\n      \"title\": _vm.expressionTitle,\n      \"visible\": _vm.sourceDialogVisible\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.sourceDialogVisible = $event\n      },\n      \"close\": _vm.expressionClose\n    }\n  }, [(_vm.addForm.valueMethod === 3) ? _c('da-calculation', {\n    ref: \"targetExpression\",\n    attrs: {\n      \"target-type\": _vm.colsData[2].displace\n    },\n    model: {\n      value: (_vm.expression),\n      callback: function($$v) {\n        _vm.expression = $$v\n      },\n      expression: \"expression\"\n    }\n  }) : _vm._e(), _vm._v(\" \"), (_vm.addForm.valueMethod === 1 || _vm.addForm.valueMethod === 2) ? _c('data-base', {\n    ref: \"targetDBsourse\",\n    attrs: {\n      \"type\": _vm.addForm.valueMethod\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c('div', {\n    staticClass: \"dialog-footer\",\n    attrs: {\n      \"slot\": \"footer\"\n    },\n    slot: \"footer\"\n  }, [(_vm.addForm.valueMethod === 3) ? _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.checkExpression()\n      }\n    }\n  }, [_vm._v(\"校验\")]) : _vm._e(), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\",\n      \"disabled\": _vm.addForm.valueMethod === 3 && _vm.expression === false\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setExpression()\n      }\n    }\n  }, [_vm._v(\"保存\")]), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"primary\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.sourceDialogVisible = false\n      }\n    }\n  }, [_vm._v(\"关闭\")])], 1)], 1)], 1)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue-loader@13.0.4@vue-loader/lib/template-compiler?{\"id\":\"data-v-6b969656\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/_vue-loader@13.0.4@vue-loader/lib/selector.js?type=template&index=0!./src/views/platform/target/target.vue\n// module id = GHae\n// module chunks = 10","import { deepJSONCopy } from \"./util\";\r\n/**\r\n * 测试方法，obj结构可参照该方法中的obj\r\n */\r\nfunction getTableDataTest() {\r\n    let dataLst1 = [\r\n        { equipType: 1, equipTypeName: \"中央空调\" },\r\n        { equipType: 2, equipTypeName: \"抽风机\" },\r\n        { equipType: 3, equipTypeName: \"新风机\" }\r\n    ];\r\n    let dataLst2 = [\r\n        { id: 1, name: \"中央空调1#\", type: 1 },\r\n        { id: 2, name: \"中央空调2#\", type: 1 },\r\n        { id: 3, name: \"抽风机1#\", type: 2 },\r\n        { id: 4, name: \"抽风机2#\", type: 2 },\r\n        { id: 5, name: \"新风机1#\", type: 3 }\r\n    ];\r\n    let dataLst3 = [\r\n        {\r\n            id: 1,\r\n            equipId: 1,\r\n            time: \"2018-04\",\r\n            dataTime: \"2018-04-01\",\r\n            dataValue: 52.6\r\n        },\r\n        {\r\n            id: 2,\r\n            equipId: 1,\r\n            time: \"2018-05\",\r\n            dataTime: \"2018-05-01\",\r\n            dataValue: 56.3\r\n        },\r\n        {\r\n            id: 3,\r\n            equipId: 2,\r\n            time: \"2018-04\",\r\n            dataTime: \"2018-04-01\",\r\n            dataValue: 65.6\r\n        },\r\n        {\r\n            id: 4,\r\n            equipId: 2,\r\n            time: \"2018-05\",\r\n            dataTime: \"2018-05-01\",\r\n            dataValue: 64.2\r\n        },\r\n        {\r\n            id: 5,\r\n            equipId: 3,\r\n            time: \"2018-04\",\r\n            dataTime: \"2018-04-01\",\r\n            dataValue: 83.6\r\n        },\r\n        {\r\n            id: 6,\r\n            equipId: 3,\r\n            time: \"2018-05\",\r\n            dataTime: \"2018-05-01\",\r\n            dataValue: 76.6\r\n        },\r\n        {\r\n            id: 7,\r\n            equipId: 4,\r\n            time: \"2018-04\",\r\n            dataTime: \"2018-04-01\",\r\n            dataValue: 42.6\r\n        },\r\n        {\r\n            id: 8,\r\n            equipId: 4,\r\n            time: \"2018-05\",\r\n            dataTime: \"2018-05-01\",\r\n            dataValue: 47.6\r\n        },\r\n        {\r\n            id: 9,\r\n            equipId: 5,\r\n            time: \"2018-04\",\r\n            dataTime: \"2018-04-01\",\r\n            dataValue: 95.6\r\n        },\r\n        {\r\n            id: 10,\r\n            equipId: 5,\r\n            time: \"2018-05\",\r\n            dataTime: \"2018-05-01\",\r\n            dataValue: 88.6\r\n        }\r\n    ];\r\n    let obj = {\r\n        num: 3,\r\n        dataArray: [dataLst1, dataLst2, dataLst3],\r\n        relation: [\"equipType,type\", \"id,equipId\"],\r\n        uniqueField: [\"equipTypeName\"],\r\n        column: [\r\n            {\r\n                field: \"equipTypeName\",\r\n                formula: \"\",\r\n                children: null\r\n            },\r\n            {\r\n                field: \"equipId\",\r\n                formula: \"COUNT([equipId])\",\r\n                children: null\r\n            },\r\n            {\r\n                field: \"time\",\r\n                formula: \"OPEN([time])\",\r\n                children: [\r\n                    {\r\n                        field: \"dataValue\",\r\n                        formula: \"SUM([dataValue])\",\r\n                        children: null\r\n                    },\r\n                    {\r\n                        field: \"scale\",\r\n                        formula: \"SUM([dataValue])/TOTALX([dataValue])\",\r\n                        children: null\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                field: \"ringRatio\",\r\n                formula: \"RINGRATIO([dataValue])\",\r\n                children: null\r\n            }\r\n        ],\r\n        totalX: [\r\n            {\r\n                field: \"equipTypeName\",\r\n                formula: \"设备合计\",\r\n                children: null\r\n            },\r\n            {\r\n                field: \"equipId\",\r\n                formula: \"SUM([equipId])\",\r\n                children: null\r\n            },\r\n            {\r\n                field: \"time\",\r\n                formula: \"\",\r\n                children: [\r\n                    {\r\n                        field: \"dataValue\",\r\n                        formula: \"SUM([dataValue])\",\r\n                        children: null\r\n                    },\r\n                    {\r\n                        field: \"scale\",\r\n                        formula: \"1\",\r\n                        children: null\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                field: \"ringRatio\",\r\n                formula: \"RINGRATIO([dataValue])\",\r\n                children: null\r\n            }\r\n        ],\r\n        totalY: [\r\n            {\r\n                field: \"totalDataValue\",\r\n                formula: \"SUM([dataValue])\",\r\n                children: null\r\n            }\r\n        ]\r\n    };\r\n    let d1 = new Date();\r\n    getTableData(obj);\r\n    let d2 = new Date();\r\n    console.log(\"运算时间：\" + (d2.getTime() - d1.getTime()) + \"毫秒。\");\r\n}\r\n\r\n/**\r\n * 对象复制，针对不同属性\r\n * @param o 对象，合并时以该对象为准\r\n * @param n 被合并对象，合并时以牺牲对象为准\r\n */\r\nfunction concatObject(o, n) {\r\n    let obj = deepJSONCopy(o);\r\n    for (let p in n) {\r\n        if (n.hasOwnProperty(p) && !obj.hasOwnProperty(p)) {\r\n            obj[p] = n[p];\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 如果两个对象存在相同属性，并且字段值一致，则合并\r\n * @param dataList1 数组1，返回结果以该数组为准\r\n * @param dataList2 数组2，用来合并的数组\r\n * @param relationList 根据那些字段来合并\r\n */\r\nfunction concatArray(dataList1, dataList2, relationList) {\r\n    let list = [];\r\n    let dataList1Obj = {};\r\n    for (let j = 0; j < dataList1.length; j++) {\r\n        let obj1 = dataList1[j];\r\n        let key = \"\";\r\n        for (let k = 0; k < relationList.length; k++) {\r\n            key += obj1[relationList[k]];\r\n        }\r\n        dataList1Obj[key] = obj1;\r\n    }\r\n    let dataList2Obj = {};\r\n    for (let j = 0; j < dataList2.length; j++) {\r\n        let obj2 = dataList2[j];\r\n        let key = \"\";\r\n        for (let k = 0; k < relationList.length; k++) {\r\n            key += obj2[relationList[k]];\r\n        }\r\n        let rightData = dataList1Obj[key];\r\n        list.push(concatObject(obj2, rightData));\r\n    }\r\n    return list;\r\n}\r\n\r\n/**\r\n * 公式解析\r\n * @param fieldFormula 字段的公式\r\n * @param reg 匹配的正则式\r\n */\r\nfunction fieldFormulaAnalysis(fieldFormula, reg) {\r\n    let rst = [];\r\n    let lastIndex = 1;\r\n    reg.lastIndex = 0;\r\n    while (lastIndex) {\r\n        let rstArr1 = reg.exec(fieldFormula);\r\n        if (rstArr1 != null) {\r\n            rst.push(rstArr1[1]);\r\n        }\r\n        lastIndex = reg.lastIndex;\r\n    }\r\n    return rst;\r\n}\r\n\r\n/**\r\n * 得到公式中的字段\r\n * @param columns 需要显示的字段数组\r\n */\r\nfunction getExpressionField(columns) {\r\n    let fieldObj = {\r\n        count: [],\r\n        totalX: [],\r\n        open: [],\r\n        ringRatio: [],\r\n        sum: [],\r\n        avg: [],\r\n        max: [],\r\n        min: []\r\n    };\r\n    // 统计数量正则式\r\n    let countReg = /COUNT\\(\\[(\\w+)\\]\\)/g;\r\n    // 统计正则式\r\n    let totalXReg = /TOTALX\\(\\[(\\w+)\\]\\)/g;\r\n    // 展开正则式\r\n    let openReg = /OPEN\\(\\[(\\w+)\\]\\)/g;\r\n    // 求比例正则式\r\n    let ringRatioReg = /RINGRATIO\\(\\[(\\w+)\\]\\)/g;\r\n    // 求和正则式\r\n    let sumReg = /SUM\\(\\[(\\w+)\\]\\)/g;\r\n    // 平均值正则式\r\n    let avgReg = /AVG\\(\\[(\\w+)\\]\\)/g;\r\n    // 最大值正则式\r\n    let maxReg = /MAX\\(\\[(\\w+)\\]\\)/g;\r\n    // 最小值正则式\r\n    let minReg = /MIN\\(\\[(\\w+)\\]\\)/g;\r\n    if (columns instanceof Array) {\r\n        for (let i = 0; i < columns.length; i++) {\r\n            let item = columns[i];\r\n            // 得到所有的统计数量字段\r\n            if (countReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(item.formula, countReg);\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.count.push(fieldSubObj);\r\n            }\r\n            // 得到所有的统计字段\r\n            if (totalXReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(item.formula, totalXReg);\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.totalX.push(fieldSubObj);\r\n            }\r\n            // 得到所有的展开字段\r\n            if (openReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(item.formula, openReg);\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.open.push(fieldSubObj);\r\n            }\r\n            // 得到所有的比例字段\r\n            if (ringRatioReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(\r\n                    item.formula,\r\n                    ringRatioReg\r\n                );\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.ringRatio.push(fieldSubObj);\r\n            }\r\n            // 得到所有的求和字段\r\n            if (sumReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(item.formula, sumReg);\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.sum.push(fieldSubObj);\r\n            }\r\n            // 得到所有的平均值字段\r\n            if (avgReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(item.formula, avgReg);\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.avg.push(fieldSubObj);\r\n            }\r\n            // 得到所有的最大值字段\r\n            if (maxReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(item.formula, maxReg);\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.max.push(fieldSubObj);\r\n            }\r\n            // 得到所有的最小值字段\r\n            if (minReg.test(item.formula)) {\r\n                let fieldSub = fieldFormulaAnalysis(item.formula, minReg);\r\n                let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n                fieldObj.min.push(fieldSubObj);\r\n            }\r\n        }\r\n    } else {\r\n        let item = columns;\r\n        let i = 0;\r\n        // 得到所有的统计数量字段\r\n        if (countReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, countReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.count.push(fieldSubObj);\r\n        }\r\n        // 得到所有的统计字段\r\n        if (totalXReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, totalXReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.totalX.push(fieldSubObj);\r\n        }\r\n        // 得到所有的展开字段\r\n        if (openReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, openReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.open.push(fieldSubObj);\r\n        }\r\n        // 得到所有的比例字段\r\n        if (ringRatioReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, ringRatioReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.ringRatio.push(fieldSubObj);\r\n        }\r\n        // 得到所有的求和字段\r\n        if (sumReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, sumReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.sum.push(fieldSubObj);\r\n        }\r\n        // 得到所有的平均值字段\r\n        if (avgReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, avgReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.avg.push(fieldSubObj);\r\n        }\r\n        // 得到所有的最大值字段\r\n        if (maxReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, maxReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.max.push(fieldSubObj);\r\n        }\r\n        // 得到所有的最小值字段\r\n        if (minReg.test(item.formula)) {\r\n            let fieldSub = fieldFormulaAnalysis(item.formula, minReg);\r\n            let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n            fieldObj.min.push(fieldSubObj);\r\n        }\r\n    }\r\n    return fieldObj;\r\n}\r\n\r\n/**\r\n * 根据字段数组（包含字字段）得到所有的字段数组，将子字段也放在列表中\r\n * @param columns 原始显示字段\r\n */\r\nfunction getAllColumn(columns) {\r\n    // 遍历字段，将子字段展开，找到最终不显示的字段\r\n    let allColumns = [];\r\n    for (let i = 0; i < columns.length; i++) {\r\n        let curColumn = deepJSONCopy(columns[i]);\r\n        allColumns.push(curColumn);\r\n        if (curColumn.children && curColumn.children.length > 0) {\r\n            let childs = getAllColumn(curColumn.children) || [];\r\n            allColumns = allColumns.concat(childs);\r\n        }\r\n    }\r\n    return allColumns;\r\n}\r\n\r\n/**\r\n * X轴数据计算\r\n * @param rstDataList 结果数据数组，里面包含已经计算好的字段值，用于X轴的求和等处理\r\n * @param totalX 展开后并增加类似\"[2018-01]\"的X轴字段数组\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param columnX 当前需要计算的X轴字段\r\n */\r\nfunction getTotalXValue(rstDataList, totalX, allColumns, columnX) {\r\n    let formula = columnX.formula;\r\n    if (!formula) {\r\n        return \"\";\r\n    }\r\n    let colObj = getExpressionField(columnX);\r\n    if (colObj.open && colObj.open.length > 0) {\r\n        return \"\";\r\n    }\r\n    let rstDataArray = [];\r\n    let rstkeys = Object.keys(rstDataList);\r\n    for (let i = 0; i < rstkeys.length; i++) {\r\n        rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\r\n    }\r\n    let field = columnX.field;\r\n    let suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\r\n\r\n    let countField =\r\n        colObj.count && colObj.count.length > 0\r\n            ? colObj.count[0].fields + suffix\r\n            : \"\";\r\n    let maxField =\r\n        colObj.max && colObj.max.length > 0\r\n            ? colObj.max[0].fields + suffix\r\n            : \"\";\r\n    let minField =\r\n        colObj.min && colObj.min.length > 0\r\n            ? colObj.min[0].fields + suffix\r\n            : \"\";\r\n    let sumField =\r\n        colObj.sum && colObj.sum.length > 0\r\n            ? colObj.sum[0].fields + suffix\r\n            : \"\";\r\n    let avgField =\r\n        colObj.avg && colObj.avg.length > 0\r\n            ? colObj.avg[0].fields + suffix\r\n            : \"\";\r\n    let countLst = \",\";\r\n    let count = 0;\r\n    let maxData = rstDataArray[0][maxField] || \"\";\r\n    let minData = rstDataArray[0][minField] || \"\";\r\n    let sumData = 0;\r\n    // 平均值的和值\r\n    let avgSumData = 0;\r\n    // 平均值叠加的数量\r\n    let avgCount = 0;\r\n    for (let i = 0; i < rstDataArray.length - 1; i++) {\r\n        let record = rstDataArray[i];\r\n        if (\r\n            countField &&\r\n            countLst.indexOf(\",\" + record[countField] + \",\") == -1\r\n        ) {\r\n            countLst += record[countField] + \",\";\r\n            count++;\r\n        }\r\n        if (maxField && maxData < record[maxField]) {\r\n            maxData = record[maxField];\r\n        }\r\n        if (minField && minData > record[minField]) {\r\n            minData = record[minField];\r\n        }\r\n        if (sumField && record[sumField]) {\r\n            sumData += record[sumField];\r\n        }\r\n        if (avgField && record[avgField]) {\r\n            avgSumData += record[avgField];\r\n            avgCount++;\r\n        }\r\n    }\r\n    if (colObj.count && colObj.count.length > 0) {\r\n        formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\r\n    }\r\n    if (colObj.ringRatio && colObj.ringRatio.length > 0) {\r\n        // 针对结果数据进行环比、同比\r\n        let rField = colObj.ringRatio[0].fields;\r\n        let dataFields = [];\r\n        for (let k = 0; k < allColumns.length; k++) {\r\n            if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\r\n                let xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\r\n                if (xDataField == rField) {\r\n                    dataFields.push(allColumns[k].field);\r\n                }\r\n            }\r\n        }\r\n        if (!dataFields || dataFields.length < 2) {\r\n            formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\r\n        } else {\r\n            dataFields.sort();\r\n            let record = rstDataArray[rstDataArray.length - 1];\r\n            let curDataDateF = dataFields[dataFields.length - 1];\r\n            let lastDataDateF = dataFields[dataFields.length - 2];\r\n            let scaleR = record[curDataDateF] / record[lastDataDateF] - 1;\r\n            formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\r\n        }\r\n    }\r\n    if (colObj.sum && colObj.sum.length > 0) {\r\n        formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\r\n    }\r\n    if (colObj.avg && colObj.avg.length > 0) {\r\n        let avgData = avgSumData / avgCount;\r\n        formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\r\n    }\r\n    if (colObj.max && colObj.max.length > 0) {\r\n        formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\r\n    }\r\n    if (colObj.min && colObj.min.length > 0) {\r\n        formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\r\n    }\r\n    if (colObj.totalX && colObj.totalX.length > 0) {\r\n        formula = formula.replace(\r\n            /TOTALX\\(\\[(\\w+)\\]\\)/g,\r\n            rstDataArray[rstDataArray.length - 1][colObj.totalX[0].fields]\r\n        );\r\n    }\r\n    // 替换没有函数的字段\r\n    if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n        let vKeys = formula.match(/\\[(.+)\\]/g);\r\n        formula = formula.replace(\r\n            /\\(\\[(\\w+)\\]\\)/g,\r\n            rstDataArray[0][vKeys[0] + suffix]\r\n        );\r\n    }\r\n    // 后续需要修改eval(formula)该四则运算\r\n    let data = eval(formula);\r\n    return data;\r\n}\r\n\r\n/**\r\n * Y轴数据计算\r\n * @param totalY  X轴字段数组\r\n * @param allColumns  展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param rstDataArray  出了Y轴未计算，其他已经计算好的数组\r\n */\r\nfunction getTotalYValue(totalY, allColumns, rstDataArray) {\r\n    for (let i = 0; i < totalY.length; i++) {\r\n        let totaoYCol = totalY[i];\r\n        let formulaRaw = totaoYCol.formula;\r\n        let colObj = getExpressionField(totaoYCol);\r\n        let countField =\r\n            colObj.count && colObj.count.length > 0 ? colObj.count[0].fields : \"\";\r\n        let maxField =\r\n            colObj.max && colObj.max.length > 0 ? colObj.max[0].fields : \"\";\r\n        let minField =\r\n            colObj.min && colObj.min.length > 0 ? colObj.min[0].fields : \"\";\r\n        let sumField =\r\n            colObj.sum && colObj.sum.length > 0 ? colObj.sum[0].fields : \"\";\r\n        let avgField =\r\n            colObj.avg && colObj.avg.length > 0 ? colObj.avg[0].fields : \"\";\r\n        let countFieldArr = [];\r\n        let maxFieldArr = [];\r\n        let minFieldArr = [];\r\n        let sumFieldArr = [];\r\n        let avgFieldArr = [];\r\n        for (let j = 0; j < allColumns.length; j++) {\r\n            let column = allColumns[j].field.replace(/\\[(.+)\\]/g, \"\");\r\n            if (column == countField) {\r\n                countFieldArr.push(allColumns[j].field);\r\n            }\r\n            if (column == maxField) {\r\n                maxFieldArr.push(allColumns[j].field);\r\n            }\r\n            if (column == minField) {\r\n                minFieldArr.push(allColumns[j].field);\r\n            }\r\n            if (column == sumField) {\r\n                sumFieldArr.push(allColumns[j].field);\r\n            }\r\n            if (column == avgField) {\r\n                avgFieldArr.push(allColumns[j].field);\r\n            }\r\n        }\r\n        for (let ki = 0; ki < rstDataArray.length; ki++) {\r\n            let formula = formulaRaw;\r\n            let record = rstDataArray[ki];\r\n            let countLst = \",\";\r\n            let count = 0;\r\n            let maxData = record[maxFieldArr[0]] || \"\";\r\n            let minData = record[minFieldArr[0]] || \"\";\r\n            let sumData = 0;\r\n            // 平均值的和值\r\n            let avgSumData = 0;\r\n            // 平均值叠加的数量\r\n            let avgCount = 0;\r\n            if (colObj.count && colObj.count.length > 0) {\r\n                for (let k = 0; k < countFieldArr.length; k++) {\r\n                    if (\r\n                        countField &&\r\n                        countLst.indexOf(\",\" + record[countFieldArr[k]] + \",\") == -1\r\n                    ) {\r\n                        countLst += record[countFieldArr[k]] + \",\";\r\n                        count++;\r\n                    }\r\n                }\r\n                formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\r\n            }\r\n            if (colObj.ringRatio && colObj.ringRatio.length > 0) {\r\n                // 最后处理\r\n            }\r\n            if (colObj.sum && colObj.sum.length > 0) {\r\n                for (let k = 0; k < sumFieldArr.length; k++) {\r\n                    if (sumField && record[sumFieldArr[k]]) {\r\n                        sumData += record[sumFieldArr[k]];\r\n                    }\r\n                }\r\n                formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\r\n            }\r\n            if (colObj.avg && colObj.avg.length > 0) {\r\n                for (let k = 0; k < avgFieldArr.length; k++) {\r\n                    if (avgField && record[avgFieldArr[k]]) {\r\n                        avgSumData += record[avgFieldArr[k]];\r\n                        avgCount++;\r\n                    }\r\n                }\r\n                let avgData = avgSumData / avgCount;\r\n                formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\r\n            }\r\n            if (colObj.max && colObj.max.length > 0) {\r\n                for (let k = 0; k < maxFieldArr.length; k++) {\r\n                    if (maxField && record[maxFieldArr[k]]) {\r\n                        maxData =\r\n                            maxData < record[maxFieldArr[k]]\r\n                                ? record[maxFieldArr[k]]\r\n                                : maxData;\r\n                    }\r\n                }\r\n                formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\r\n            }\r\n            if (colObj.min && colObj.min.length > 0) {\r\n                for (let k = 0; k < minFieldArr.length; k++) {\r\n                    if (minField && record[minFieldArr[k]]) {\r\n                        minData =\r\n                            minData > record[minFieldArr[k]]\r\n                                ? record[minFieldArr[k]]\r\n                                : minData;\r\n                    }\r\n                }\r\n                formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\r\n            }\r\n            if (colObj.totalX && colObj.totalX.length > 0) {\r\n                // let totalXR=rstDataArray[rstDataArray.length-1];\r\n                // let totalXF = colObj.totalX[0].fields + suffix;\r\n                // formula = formula.replace(\r\n                //   /TOTALX\\(\\[(\\w+)\\]\\)/g,\r\n                //   rstDataList[totalX[0].formula][totalXF]\r\n                // );\r\n                // 后续需要改进\r\n                formula = formula.replace(/TOTALX\\(\\[(\\w+)\\]\\)/g, 1);\r\n            }\r\n            // 替换没有函数的字段\r\n            if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n                formula = formula.replace(\r\n                    /\\(\\[(\\w+)\\]\\)/g,\r\n                    record[totaoYCol.field]\r\n                );\r\n            }\r\n            // 后续需要修改eval(formula)该四则运算\r\n            let data = eval(formula);\r\n            rstDataArray[ki][totaoYCol.field] = data;\r\n        }\r\n    }\r\n    return rstDataArray;\r\n}\r\n\r\n/**\r\n * 运算函数求值\r\n * @param allDataArr 所有的数据\r\n * @param dataObj 使用唯一性字段作为key的object\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param column 当前处理的字段\r\n * @param colObj 字段column的formula解析后的object\r\n * @param totalX X轴显示字段数组\r\n * @param rstDataList 已经处理的数据，根据column处理后的数据需要粘贴在该数据后面\r\n */\r\nfunction getDataByOperation(\r\n    allDataArr,\r\n    dataObj,\r\n    allColumns,\r\n    column,\r\n    colObj,\r\n    totalX,\r\n    rstDataList\r\n) {\r\n    if (colObj.open && colObj.open.length > 0) {\r\n        return rstDataList;\r\n    }\r\n    // formula=\"SUM([dataValue])/[totalX[dataVlue]\"\r\n    let curDataList = deepJSONCopy(rstDataList);\r\n    let keys = Object.keys(dataObj);\r\n    let field = column.field;\r\n    let suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\r\n    for (let i = 0; i < keys.length; i++) {\r\n        let uniqueDataList = dataObj[keys[i]];\r\n        let countField =\r\n            colObj.count && colObj.count.length > 0\r\n                ? colObj.count[0].fields + suffix\r\n                : \"\";\r\n        let maxField =\r\n            colObj.max && colObj.max.length > 0\r\n                ? colObj.max[0].fields + suffix\r\n                : \"\";\r\n        let minField =\r\n            colObj.min && colObj.min.length > 0\r\n                ? colObj.min[0].fields + suffix\r\n                : \"\";\r\n        let sumField =\r\n            colObj.sum && colObj.sum.length > 0\r\n                ? colObj.sum[0].fields + suffix\r\n                : \"\";\r\n        let avgField =\r\n            colObj.avg && colObj.avg.length > 0\r\n                ? colObj.avg[0].fields + suffix\r\n                : \"\";\r\n        let countLst = \",\";\r\n        let count = 0;\r\n        let maxData = uniqueDataList[0][maxField] || \"\";\r\n        let minData = uniqueDataList[0][minField] || \"\";\r\n        let sumData = 0;\r\n        // 平均值的和值\r\n        let avgSumData = 0;\r\n        // 平均值叠加的数量\r\n        let avgCount = 0;\r\n        let formula = column.formula;\r\n        for (let j = 0; j < uniqueDataList.length; j++) {\r\n            let record = uniqueDataList[j];\r\n            if (\r\n                countField &&\r\n                countLst.indexOf(\",\" + record[countField] + \",\") == -1\r\n            ) {\r\n                countLst += record[countField] + \",\";\r\n                count++;\r\n            }\r\n            if (maxField && maxData < record[maxField]) {\r\n                maxData = record[maxField];\r\n            }\r\n            if (minField && minData > record[minField]) {\r\n                minData = record[minField];\r\n            }\r\n            if (sumField && record[sumField]) {\r\n                sumData += record[sumField];\r\n            }\r\n            if (avgField && record[avgField]) {\r\n                avgSumData += record[avgField];\r\n                avgCount++;\r\n            }\r\n        }\r\n        if (colObj.count && colObj.count.length > 0) {\r\n            formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\r\n        }\r\n        if (colObj.ringRatio && colObj.ringRatio.length > 0) {\r\n            // 针对结果数据进行环比、同比\r\n            let rField = colObj.ringRatio[0].fields;\r\n            let dataFields = [];\r\n            for (let k = 0; k < allColumns.length; k++) {\r\n                if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\r\n                    let xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\r\n                    if (xDataField == rField) {\r\n                        dataFields.push(allColumns[k].field);\r\n                    }\r\n                }\r\n            }\r\n            if (!dataFields || dataFields.length < 2) {\r\n                formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\r\n            } else {\r\n                dataFields.sort();\r\n                let curDataDateF = dataFields[dataFields.length - 1];\r\n                let lastDataDateF = dataFields[dataFields.length - 2];\r\n                let scaleR =\r\n                    curDataList[keys[i]][curDataDateF] /\r\n                    curDataList[keys[i]][lastDataDateF] -\r\n                    1;\r\n                formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\r\n            }\r\n        }\r\n        if (colObj.sum && colObj.sum.length > 0) {\r\n            formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\r\n        }\r\n        if (colObj.avg && colObj.avg.length > 0) {\r\n            let avgData = avgSumData / avgCount;\r\n            formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\r\n        }\r\n        if (colObj.max && colObj.max.length > 0) {\r\n            formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\r\n        }\r\n        if (colObj.min && colObj.min.length > 0) {\r\n            formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\r\n        }\r\n        if (colObj.totalX && colObj.totalX.length > 0) {\r\n            let totalXF = colObj.totalX[0].fields + suffix;\r\n            formula = formula.replace(\r\n                /TOTALX\\(\\[(\\w+)\\]\\)/g,\r\n                rstDataList[totalX[0].formula][totalXF]\r\n            );\r\n        }\r\n        // 替换没有函数的字段\r\n        if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n            let vKeys = formula.match(/\\[(.+)\\]/g);\r\n            formula = formula.replace(\r\n                /\\(\\[(\\w+)\\]\\)/g,\r\n                uniqueDataList[0][vKeys[0] + suffix]\r\n            );\r\n        }\r\n        // 后续需要修改eval(formula)该四则运算\r\n        let data = eval(formula);\r\n        curDataList[keys[i]][field] = data;\r\n    }\r\n    return curDataList;\r\n}\r\n\r\n\r\n/**\r\n * 得到最终展示的数据数组\r\n * @param allDataArr 所有结果的数据\r\n * @param dataObj 使用唯一性字段作为key的object\r\n * @param uniqueField 唯一字段数组\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n * @param column 当前处理的字段\r\n * @param rstDataList 所有结果的数据，用唯一性字段作为key的数组对象\r\n * @param totalX X轴显示字段数组\r\n * @param columnX 当前需要计算的X轴字段\r\n */\r\nfunction getShowDataList(\r\n    allDataArr,\r\n    dataObj,\r\n    uniqueField,\r\n    allColumns,\r\n    column,\r\n    rstDataList,\r\n    totalX,\r\n    columnX\r\n) {\r\n    let formula = column.formula;\r\n    let rstList = {};\r\n    if (!formula || formula == null) {\r\n        for (let i = 0; i < allDataArr.length - 1; i++) {\r\n            // 唯一字段和当前字段组成的Object\r\n            let ele = {};\r\n            // 字段值\r\n            let value = allDataArr[i][column.field];\r\n            // 唯一字段组成的key\r\n            let key = \"\";\r\n            uniqueField.forEach(unique => {\r\n                key += \"_\" + allDataArr[unique];\r\n                ele[unique] = allDataArr[unique];\r\n            });\r\n            ele[column.field] = value;\r\n            if (!rstList[key] || rstList[key] == {}) {\r\n                rstList[key] = ele;\r\n            }\r\n        }\r\n        let keys = Object.keys(rstDataList);\r\n        for (let i = 0; i < keys.length; i++) {\r\n            rstDataList[keys[i]] = concatObject(\r\n                rstDataList[keys[i]],\r\n                rstList[keys[i]]\r\n            );\r\n        }\r\n        if (columnX) {\r\n            rstDataList[rstDataList.length - 1][\r\n                columnX.field\r\n            ] = getTotalXValue(rstDataList, totalX, allColumns, columnX);\r\n        }\r\n    } else {\r\n        let colObj = getExpressionField(column);\r\n        rstDataList = getDataByOperation(\r\n            allDataArr,\r\n            dataObj,\r\n            allColumns,\r\n            column,\r\n            colObj,\r\n            totalX,\r\n            rstDataList\r\n        );\r\n        if (columnX) {\r\n            rstDataList[totalX[0].formula][columnX.field] = getTotalXValue(\r\n                rstDataList,\r\n                totalX,\r\n                allColumns,\r\n                columnX\r\n            );\r\n        }\r\n    }\r\n    return rstDataList;\r\n}\r\n\r\n/**\r\n * 数据合并，主要是将OPEN的数据进行合并\r\n * @param allDataArr 数据数组\r\n * @param columns 展示字段\r\n * @param allColumns 展开后并增加类似\"[2018-01]\"的所有显示字段数组\r\n */\r\nfunction getShowFieldDataList(allDataArr, columns, allColumns) {\r\n    let rstAllColumns = [];\r\n    let rstLst = [];\r\n    let dataArray = deepJSONCopy(allDataArr);\r\n    // 如果记录为1，那就不需要进行合并\r\n    if (!dataArray || dataArray.length < 2) {\r\n        return dataArray;\r\n    }\r\n    if (!dataArray[0].dataValue_key) {\r\n        return dataArray;\r\n    }\r\n    let haveFormulaColumns = {};\r\n    // 用于判断返回显示字段中是否存在该字段\r\n    let isExistsFields = [];\r\n    // 用于找到展开后字段的下标\r\n    let columnIndexObj = {};\r\n    // 展开后字段的下标\r\n    let index = 0;\r\n    for (let i = 0; i < allColumns.length; i++) {\r\n        if (allColumns[i].formula) {\r\n            let field = allColumns[i].field;\r\n            haveFormulaColumns[field] = allColumns[i];\r\n            isExistsFields.push(field);\r\n        }\r\n        let formula = allColumns[i].formula;\r\n        if (formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n            continue;\r\n        }\r\n        columnIndexObj[allColumns[i].field] = index++;\r\n    }\r\n    // 先将不需要展开的字段全部放进返回显示字段中\r\n    for (let j = 0; j < columns.length; j++) {\r\n        let colField = columns[j].field;\r\n        let formula = columns[j].formula;\r\n        if (formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n            continue;\r\n        }\r\n        rstAllColumns.push(columns[j]);\r\n        isExistsFields.push(colField);\r\n    }\r\n    // 将所有非展开字段且存在值的字段值作为key的Object\r\n    let map = {};\r\n    for (let i = 0; i < dataArray.length; i++) {\r\n        let dataRst = {};\r\n        let dataRecord = dataArray[i];\r\n        // 将所有非展开字段且存在值的字段值作为key，便于数组连接\r\n        let key = \"\";\r\n        for (let j = 0; j < columns.length; j++) {\r\n            let colField = columns[j].field;\r\n            dataRst[colField] = dataRecord[colField];\r\n            if (dataRecord[colField]) {\r\n                key += \"_\" + dataRecord[colField];\r\n            }\r\n        }\r\n        if (key) {\r\n            let dataKey = dataRecord.dataValue_key;\r\n            dataRst.dataValue_key = dataRecord.dataValue_key;\r\n            dataRst[dataKey] = dataRecord[dataKey];\r\n            // 生成显示字段\r\n            let showColumn = {};\r\n            let dataFieldKey = dataKey.replace(/\\[(.+)\\]/g, \"\");\r\n            showColumn.field = dataKey;\r\n            showColumn.formula = haveFormulaColumns[dataFieldKey].formula;\r\n            showColumn.children = null;\r\n            if (isExistsFields.indexOf(dataKey) == -1) {\r\n                let index = columnIndexObj[dataFieldKey];\r\n                rstAllColumns.splice(index, 0, showColumn);\r\n                isExistsFields.push(dataKey);\r\n            }\r\n            let recordKeys = Object.keys(dataRecord);\r\n            if (recordKeys && recordKeys.length > 1) {\r\n                for (let j = 0; j < recordKeys.length; j++) {\r\n                    if (\r\n                        dataRecord[recordKeys[j]] == \"********\" &&\r\n                        /\\[(.+)\\]/g.test(recordKeys[j])\r\n                    ) {\r\n                        dataRst[recordKeys[j]] = dataRecord[recordKeys[j]];\r\n                        // 生成显示字段\r\n                        let showColumn = {};\r\n                        let dataFieldKey = recordKeys[j].replace(/\\[(.+)\\]/g, \"\");\r\n                        showColumn.field = recordKeys[j];\r\n                        showColumn.formula = haveFormulaColumns[dataFieldKey].formula;\r\n                        showColumn.children = null;\r\n                        if (isExistsFields.indexOf(recordKeys[j]) == -1) {\r\n                            let index = columnIndexObj[dataFieldKey];\r\n                            rstAllColumns.splice(index, 0, showColumn);\r\n                            isExistsFields.push(recordKeys[j]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let arr = map[key] || [];\r\n            arr.push(dataRst);\r\n            map[key] = arr;\r\n        }\r\n    }\r\n    // 得到所有的分类，进行连接\r\n    let mapKeys = Object.keys(map);\r\n    for (let i = 0; i < mapKeys.length; i++) {\r\n        let arr = map[mapKeys[i]] || [];\r\n        if (arr.length < 1) {\r\n            continue;\r\n        } else if (arr.length == 1) {\r\n            rstLst.push(arr[0]);\r\n        } else {\r\n            let dataLst = arr[0];\r\n            for (let j = 1; j < arr.length; j++) {\r\n                dataLst = concatObject(dataLst, arr[j]);\r\n            }\r\n            rstLst.push(dataLst);\r\n        }\r\n    }\r\n    let result = { data: rstLst, column: rstAllColumns };\r\n    return result;\r\n}\r\n\r\n/**\r\n * 展开数据，仅进行数据处理\r\n * 处理结果；类似{ equipType: 1, equipTypeName: \"中央空调\",id: 1, name: \"中央空调1#\", type: 1, equipId: 1, dataValue[2018-05][42]: 522.35, dataValue_key:\"dataValue[2018-05][42]\"}\r\n * @param curDataArr 要处理的数组\r\n * @param columns 显示字段\r\n * @param uniqueField 唯一字段\r\n * @param showDataField 最终显示数据的字段，如 dataValue[2018-04]\r\n */\r\nfunction openRecordNotOperation(curDataArr, columns, uniqueField, showDataField) {\r\n    // 最终显示数据的字段showDataField\r\n    let fieldObj = getExpressionField(columns);\r\n    let openF = fieldObj.open;\r\n    if (!openF || openF.length < 1) {\r\n        return curDataArr;\r\n    }\r\n    let openCol = openF[0].fields;\r\n    if (openCol == \"\" || openCol.indexOf(\",\") > -1) {\r\n        return curDataArr;\r\n    }\r\n    let openChildren = columns[openF[0].index].children || [];\r\n    // 如果子字段为空，返回\r\n    if (!openChildren || openChildren.length < 1) {\r\n        return curDataArr;\r\n    }\r\n    let childFieldObj = getExpressionField(openChildren);\r\n\r\n    // 改变最终显示字段的字段名，\r\n    // 如将\"dataValue\"改成\"dataValue[2018-04]\"，其中2018-04为open字段的值\r\n    // \"dataValue_key\"的值为新数据字段的字段名，如果该字段不存在，说明第一次进来\r\n    let keyField = fieldObj.open[0].fields;\r\n    for (let i = 0; i < curDataArr.length; i++) {\r\n        let openFValue = curDataArr[i][keyField];\r\n        for (let j = 0; j < openChildren.length; j++) {\r\n            let childField = openChildren[j].field;\r\n            if (!curDataArr[i][childField]) {\r\n                curDataArr[i][childField] = \"********\";\r\n            }\r\n            if (childField == showDataField) {\r\n                let dataField = curDataArr[i].dataValue_key || showDataField;\r\n                let key = dataField + \"[\" + openFValue + \"]\";\r\n                let reg = RegExp(dataField, \"g\");\r\n                curDataArr[i] = JSON.parse(\r\n                    JSON.stringify(curDataArr[i]).replace(reg, key)\r\n                );\r\n                delete curDataArr[i][keyField];\r\n                curDataArr[i].dataValue_key = key;\r\n            } else {\r\n                let dataValueKey = curDataArr[i].dataValue_key;\r\n                let dataField = \"\";\r\n                if (dataValueKey) {\r\n                    let vKeys = dataValueKey.match(/\\[(.+)\\]/g);\r\n                    dataField = childField + vKeys[0];\r\n                    dataField = dataField.replace(\"[\" + openFValue + \"]\", \"\");\r\n                } else {\r\n                    dataField = childField;\r\n                }\r\n                let key = dataField + \"[\" + openFValue + \"]\";\r\n                let reg = RegExp(dataField, \"g\");\r\n                if (curDataArr[i][dataField] != undefined) {\r\n                    curDataArr[i] = JSON.parse(\r\n                        JSON.stringify(curDataArr[i]).replace(reg, key)\r\n                    );\r\n                    delete curDataArr[i][dataField];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 如果子字段中没有需要展开的了，那么直接处理，否则继续递归调用\r\n    if (!childFieldObj.open || childFieldObj.open.length < 1) {\r\n        return curDataArr;\r\n    } else if (childFieldObj.open.length == 1) {\r\n        //递归调用\r\n        return openRecordNotOperation(\r\n            curDataArr,\r\n            columns,\r\n            uniqueField,\r\n            showDataField\r\n        );\r\n    } else {\r\n        return curDataArr;\r\n    }\r\n}\r\n\r\n/**\r\n * 根据传入的对象，得到表格数据（终极方法）\r\n * @param obj 需要处理的对象，对象结构参照文件开始所示\r\n */\r\nfunction getTableDataByManyArray(obj) {\r\n    if (!obj) {\r\n        return null;\r\n    }\r\n    let num = obj.num;\r\n    let dataArrays = obj.dataArray;\r\n    let relations = obj.relation;\r\n    let columns = obj.column;\r\n    let uniqueField = obj.uniqueField;\r\n    let totalY = obj.totalY || [];\r\n    let totalX = obj.totalX || [];\r\n    if (!num || !dataArrays || !relations || !columns || !uniqueField) {\r\n        return null;\r\n    }\r\n    if (\r\n        num < 1 ||\r\n        dataArrays.length != num ||\r\n        relations.length != num - 1 ||\r\n        uniqueField.length < 1\r\n    ) {\r\n        return null;\r\n    }\r\n    // 第一步把所有的数组数据连成一个数组\r\n    let allDataArr = [];\r\n    if (dataArrays[0] instanceof Array) {\r\n        dataArrays[0].forEach(item => {\r\n            allDataArr.push(item);\r\n        });\r\n    } else if (dataArrays[0] instanceof Object) {\r\n        allDataArr.push(dataArrays[0]);\r\n    } else {\r\n        return;\r\n    }\r\n    for (let i = 0; i < num - 1; i++) {\r\n        // \"equipType,type\"中的\"equipType\"\r\n        let fieldLeft = relations[i].split(\",\")[0];\r\n        // \"equipType,type\"中的\"type\"\r\n        let fieldRight = relations[i].split(\",\")[1];\r\n        // 把右边的数组全部按关联关系分类\r\n        let objData = {};\r\n        // 右边的数组，将有关联关系的字段对应的值作为Object的key，便于匹配\r\n        if (dataArrays[i + 1] instanceof Array) {\r\n            dataArrays[i + 1].forEach(item => {\r\n                // item[fieldRight] 有关联关系的字段对应的值\r\n                let arr1 = objData[item[fieldRight]] || [];\r\n                arr1.push(item);\r\n                objData[item[fieldRight]] = arr1;\r\n            });\r\n        } else if (dataArrays[i + 1] instanceof Object) {\r\n            objData[dataArrays[i + 1][fieldRight]] = dataArrays[i + 1];\r\n        } else {\r\n            continue;\r\n        }\r\n        // 根据关联关系将数组合并\r\n        let newArr = [];\r\n        allDataArr.forEach(item => {\r\n            // 找到左边数组的记录关联字段的值\r\n            let leftF = item[fieldLeft];\r\n            // 利用左边数组的记录关联字段的值找到右边对应的数组\r\n            let rightArr = objData[leftF];\r\n            // 将右边数组的每条记录都复制到左边，结果为m*n条记录\r\n            rightArr.forEach(itemRight => {\r\n                let newData = concatObject(item, itemRight);\r\n                newArr.push(newData);\r\n            });\r\n        });\r\n        allDataArr = newArr;\r\n    }\r\n\r\n    let fieldObj = getExpressionField(columns);\r\n    // 对分组后的N个数组根据需要展开的字段分成M个数组，只单纯展开\r\n    if (!fieldObj.open || fieldObj.open.length < 1) {\r\n        // 如果需要展开的字段为空，那么连接分组后的数组就是实际数组\r\n        // afterOpenDataObj = allDataArr;\r\n    } else {\r\n        // 找到最终字段\r\n        let openF = fieldObj.open;\r\n        let openColumn = columns[openF[0].index];\r\n        let showDataField = \"\";\r\n        while (openColumn && openColumn.children) {\r\n            let childrenCol = openColumn.children;\r\n            let childrenOpenObj = getExpressionField(childrenCol);\r\n            if (\r\n                childrenOpenObj.open &&\r\n                childrenOpenObj.open.field &&\r\n                childrenOpenObj.open.field.indexOf(\",\") == -1\r\n            ) {\r\n                openColumn = deepJSONCopy(childrenCol);\r\n            } else {\r\n                openColumn = null;\r\n                for (let kk = 0; kk < childrenCol.length; kk++) {\r\n                    let key = childrenCol[kk].field;\r\n                    if (allDataArr[0][key]) {\r\n                        showDataField = key;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 仅仅展开数据\r\n        allDataArr = openRecordNotOperation(\r\n            allDataArr,\r\n            columns,\r\n            uniqueField,\r\n            showDataField\r\n        );\r\n    }\r\n\r\n    // 根据字段计算，就是遍历columns，然后一个字段一个字段拼接\r\n    // 遍历字段，将子字段展开，找到最终不显示的字段\r\n    let allColumns = getAllColumn(columns);\r\n    // OPEN 根据columns将数组整理成需要显示的字段的数组\r\n    let showResult =\r\n        getShowFieldDataList(allDataArr, columns, allColumns) || {};\r\n    allDataArr = showResult.data;\r\n    allColumns = showResult.column;\r\n\r\n    // 对合并的数组进行分类，按需要显示的字段一个个分类，从左至右\r\n    // 先根据uniqueField分成N个数组\r\n    let dataObj = {};\r\n    // 根据唯一性统计数量\r\n    let dataCount = {};\r\n    let rstDataList = {};\r\n    allDataArr.forEach(item => {\r\n        let key = \"\";\r\n        // if (uniqueField.length < 1) {\r\n        //   key = \"all\";\r\n        // } else\r\n        let uniqueEle = {};\r\n        if ((uniqueField.length = 1)) {\r\n            key = item[uniqueField[0]];\r\n            uniqueEle[uniqueField[0]] = key;\r\n        } else {\r\n            uniqueField.forEach(unique => {\r\n                key += \"_\" + item[unique];\r\n                uniqueEle[unique] = item[unique];\r\n            });\r\n            key = key.substring(1);\r\n        }\r\n        let curDataArr = dataObj[key] || [];\r\n        curDataArr.push(item);\r\n        dataObj[key] = curDataArr;\r\n        dataCount[key] = curDataArr.length;\r\n        if (!rstDataList[key] || rstDataList[key] == {}) {\r\n            rstDataList[key] = uniqueEle;\r\n        }\r\n    });\r\n    let totalX01 = {};\r\n    let totalKey = \"\";\r\n    uniqueField.forEach((unique, index) => {\r\n        totalX01[unique] = totalX[index].formula;\r\n        totalKey += \"_\" + totalX[index].formula;\r\n    });\r\n    rstDataList[totalKey.substring(1)] = totalX01;\r\n\r\n    // 处理TotalX字段，使其跟显示字段column一致\r\n    let allTotalX = getAllColumn(totalX) || null;\r\n    let totalXFields = [];\r\n    let totalXObj = {};\r\n    if (allTotalX) {\r\n        for (let i = 0; i < allTotalX.length; i++) {\r\n            totalXFields.push(allTotalX[i].field);\r\n            totalXObj[allTotalX[i].field] = allTotalX[i];\r\n        }\r\n    }\r\n    let newTotalX = [];\r\n    newTotalX.push(allTotalX[0]);\r\n    for (let i = uniqueField.length; i < allColumns.length; i++) {\r\n        if (totalXFields.indexOf(allColumns[i].field) > -1) {\r\n            newTotalX.push(totalXObj[allColumns[i].field]);\r\n        } else {\r\n            let dataFieldX = allColumns[i].field;\r\n            if (/\\[(.+)\\]/g.test(dataFieldX)) {\r\n                let xDataField = dataFieldX.replace(/\\[(.+)\\]/g, \"\");\r\n                if (totalXFields.indexOf(xDataField) > -1) {\r\n                    let totalXCurCol = deepJSONCopy(totalXObj[xDataField]);\r\n                    totalXCurCol.field = dataFieldX;\r\n                    newTotalX.push(totalXCurCol);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 唯一字段不需要处理\r\n    for (let i = uniqueField.length; i < allColumns.length; i++) {\r\n        let columnX = newTotalX && newTotalX[i] ? newTotalX[i] : null;\r\n        rstDataList = getShowDataList(\r\n            allDataArr,\r\n            dataObj,\r\n            uniqueField,\r\n            allColumns,\r\n            allColumns[i],\r\n            rstDataList,\r\n            newTotalX,\r\n            columnX\r\n        );\r\n    }\r\n    // 将结果Object转为数组\r\n    let rstDataArray = [];\r\n    let rstkeys = Object.keys(rstDataList);\r\n    for (let i = 0; i < rstkeys.length; i++) {\r\n        rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\r\n    }\r\n    if (totalY && totalY.length > 0) {\r\n        rstDataArray = getTotalYValue(totalY, allColumns, rstDataArray);\r\n    }\r\n    return rstDataArray;\r\n}\r\n\r\n/**\r\n * 根据传入的对象，得到表格数据（终极方法）\r\n * @param obj 需要处理的对象，对象结构参照文件开始所示\r\n */\r\nfunction getTableDataByOneArray(obj) {\r\n    if (!obj) {\r\n        return null;\r\n    }\r\n    let num = obj.num;\r\n    let dataArrays = obj.dataArray;\r\n    let relations = obj.relation;\r\n    let columns = obj.column;\r\n    let uniqueField = obj.uniqueField;\r\n    let totalY = obj.totalY || [];\r\n    let totalX = obj.totalX || [];\r\n    if (num != 1 || !dataArrays || !columns || !uniqueField) {\r\n        return null;\r\n    }\r\n    // 第一步把所有的数组数据连成一个数组\r\n    let allDataArr = dataArrays[0];\r\n\r\n    let fieldObj = getExpressionField(columns);\r\n    // 对分组后的N个数组根据需要展开的字段分成M个数组，只单纯展开\r\n    if (!fieldObj.open || fieldObj.open.length < 1) {\r\n        // 如果需要展开的字段为空，那么连接分组后的数组就是实际数组\r\n        // afterOpenDataObj = allDataArr;\r\n    } else {\r\n        // 找到最终字段\r\n        let openF = fieldObj.open;\r\n        let openColumn = columns[openF[0].index];\r\n        let showDataField = \"\";\r\n        while (openColumn && openColumn.children) {\r\n            let childrenCol = openColumn.children;\r\n            let childrenOpenObj = getExpressionField(childrenCol);\r\n            if (\r\n                childrenOpenObj.open &&\r\n                childrenOpenObj.open.field &&\r\n                childrenOpenObj.open.field.indexOf(\",\") == -1\r\n            ) {\r\n                openColumn = deepJSONCopy(childrenCol);\r\n            } else {\r\n                openColumn = null;\r\n                for (let kk = 0; kk < childrenCol.length; kk++) {\r\n                    let key = childrenCol[kk].field;\r\n                    if (allDataArr[0][key]) {\r\n                        showDataField = key;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // 仅仅展开数据\r\n        allDataArr = openRecordNotOperation(\r\n            allDataArr,\r\n            columns,\r\n            uniqueField,\r\n            showDataField\r\n        );\r\n    }\r\n\r\n    // 根据字段计算，就是遍历columns，然后一个字段一个字段拼接\r\n    // 遍历字段，将子字段展开，找到最终不显示的字段\r\n    let allColumns = getAllColumn(columns);\r\n    // OPEN 根据columns将数组整理成需要显示的字段的数组\r\n    let showResult =\r\n        getShowFieldDataList(allDataArr, columns, allColumns) || {};\r\n    allDataArr = showResult.data;\r\n    allColumns = showResult.column;\r\n\r\n    // 对合并的数组进行分类，按需要显示的字段一个个分类，从左至右\r\n    // 先根据uniqueField分成N个数组\r\n    let dataObj = {};\r\n    // 根据唯一性统计数量\r\n    let dataCount = {};\r\n    let rstDataList = {};\r\n    allDataArr.forEach(item => {\r\n        let key = \"\";\r\n        // if (uniqueField.length < 1) {\r\n        //   key = \"all\";\r\n        // } else\r\n        let uniqueEle = {};\r\n        if ((uniqueField.length = 1)) {\r\n            key = item[uniqueField[0]];\r\n            uniqueEle[uniqueField[0]] = key;\r\n        } else {\r\n            uniqueField.forEach(unique => {\r\n                key += \"_\" + item[unique];\r\n                uniqueEle[unique] = item[unique];\r\n            });\r\n            key = key.substring(1);\r\n        }\r\n        let curDataArr = dataObj[key] || [];\r\n        curDataArr.push(item);\r\n        dataObj[key] = curDataArr;\r\n        dataCount[key] = curDataArr.length;\r\n        if (!rstDataList[key] || rstDataList[key] == {}) {\r\n            rstDataList[key] = uniqueEle;\r\n        }\r\n    });\r\n    let totalX01 = {};\r\n    let totalKey = \"\";\r\n    uniqueField.forEach((unique, index) => {\r\n        totalX01[unique] = totalX[index].formula;\r\n        totalKey += \"_\" + totalX[index].formula;\r\n    });\r\n    rstDataList[totalKey.substring(1)] = totalX01;\r\n\r\n    // 处理TotalX字段，使其跟显示字段column一致\r\n    let allTotalX = getAllColumn(totalX) || null;\r\n    let totalXFields = [];\r\n    let totalXObj = {};\r\n    if (allTotalX) {\r\n        for (let i = 0; i < allTotalX.length; i++) {\r\n            totalXFields.push(allTotalX[i].field);\r\n            totalXObj[allTotalX[i].field] = allTotalX[i];\r\n        }\r\n    }\r\n    let newTotalX = [];\r\n    newTotalX.push(allTotalX[0]);\r\n    for (let i = uniqueField.length; i < allColumns.length; i++) {\r\n        if (totalXFields.indexOf(allColumns[i].field) > -1) {\r\n            newTotalX.push(totalXObj[allColumns[i].field]);\r\n        } else {\r\n            let dataFieldX = allColumns[i].field;\r\n            if (/\\[(.+)\\]/g.test(dataFieldX)) {\r\n                let xDataField = dataFieldX.replace(/\\[(.+)\\]/g, \"\");\r\n                if (totalXFields.indexOf(xDataField) > -1) {\r\n                    let totalXCurCol = deepJSONCopy(totalXObj[xDataField]);\r\n                    totalXCurCol.field = dataFieldX;\r\n                    newTotalX.push(totalXCurCol);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 唯一字段不需要处理\r\n    for (let i = uniqueField.length; i < allColumns.length; i++) {\r\n        let columnX = newTotalX && newTotalX[i] ? newTotalX[i] : null;\r\n        rstDataList = getShowDataList(\r\n            allDataArr,\r\n            dataObj,\r\n            uniqueField,\r\n            allColumns,\r\n            allColumns[i],\r\n            rstDataList,\r\n            newTotalX,\r\n            columnX\r\n        );\r\n    }\r\n    // 将结果Object转为数组\r\n    let rstDataArray = [];\r\n    let rstkeys = Object.keys(rstDataList);\r\n    for (let i = 0; i < rstkeys.length; i++) {\r\n        rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\r\n    }\r\n    if (totalY && totalY.length > 0) {\r\n        rstDataArray = getTotalYValue(totalY, allColumns, rstDataArray);\r\n    }\r\n    return rstDataArray;\r\n}\r\n\r\nexport {\r\n    getTableDataTest, // 测试方法，obj结构可参照该方法中的obj\r\n    getTableDataByOneArray, // 根据传入的对象，得到表格数据（终极方法）\r\n    getTableDataByManyArray // 根据传入的对象，得到表格数据（终极方法）\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/dataUtil.js","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/_css-loader@0.28.0@css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6b969656\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector.js?type=styles&index=0!./target.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/_vue-style-loader@3.1.2@vue-style-loader/lib/addStylesClient.js\")(\"0022a34e\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_extract-text-webpack-plugin@2.0.0@extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/_vue-style-loader@3.1.2@vue-style-loader!./~/_css-loader@0.28.0@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/_vue-loader@13.0.4@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-6b969656\",\"scoped\":false,\"hasInlineConfig\":false}!./~/_vue-loader@13.0.4@vue-loader/lib/selector.js?type=styles&index=0!./src/views/platform/target/target.vue\n// module id = NADl\n// module chunks = 10","var normalizeComponent = require(\"!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector?type=script&index=0!./calculation.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1174c510\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector?type=template&index=0!./calculation.vue\"\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/platform/target/template/calculation.vue\n// module id = VVME\n// module chunks = 10","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('el-form', {\n    attrs: {\n      \"model\": _vm.expressionForm,\n      \"rules\": _vm.expressionRules\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"prop\": \"expression\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"readonly\": \"\",\n      \"type\": \"textarea\",\n      \"rows\": 8\n    },\n    nativeOn: {\n      \"keydown\": function($event) {\n        _vm.handleKeyDown($event)\n      }\n    },\n    model: {\n      value: (_vm.expressionForm.expression),\n      callback: function($$v) {\n        _vm.$set(_vm.expressionForm, \"expression\", $$v)\n      },\n      expression: \"expressionForm.expression\"\n    }\n  })], 1)], 1), _vm._v(\" \"), _vm._l((_vm.expressionBtn), function(item, index) {\n    return _c('el-button', {\n      key: index,\n      on: {\n        \"click\": function($event) {\n          _vm.keyUpElement(item)\n        }\n      }\n    }, [_vm._v(_vm._s(item))])\n  }), _vm._v(\" \"), _c('el-button', {\n    on: {\n      \"click\": _vm.backSpace\n    }\n  }, [_vm._v(\"退格\")]), _vm._v(\" \"), _c('el-button', {\n    on: {\n      \"click\": _vm.clearAll\n    }\n  }, [_vm._v(\"清空\")]), _vm._v(\" \"), _c('el-tabs', {\n    attrs: {\n      \"type\": \"card\"\n    },\n    on: {\n      \"tab-click\": _vm.handleClick\n    },\n    model: {\n      value: (_vm.expressTableActive),\n      callback: function($$v) {\n        _vm.expressTableActive = $$v\n      },\n      expression: \"expressTableActive\"\n    }\n  }, [_c('el-tab-pane', {\n    attrs: {\n      \"label\": \"常量\",\n      \"name\": \"0\"\n    }\n  }, [_vm._v(\"用户管理\")]), _vm._v(\" \"), _c('el-tab-pane', {\n    attrs: {\n      \"label\": \"基础指标\",\n      \"name\": \"1\"\n    }\n  }, [_vm._v(\"配置管理\")])], 1), _vm._v(\" \"), _c('da-table', {\n    ref: \"expressionTb\",\n    attrs: {\n      \"slot\": \"content\",\n      \"colums\": _vm.colsData[_vm.expressTableActive],\n      \"table-list\": _vm.tableList,\n      \"search-data\": _vm.searchForm[_vm.expressTableActive],\n      \"showSelection\": false\n    },\n    on: {\n      \"callBack\": _vm.getTargetTb\n    },\n    slot: \"content\"\n  }, [_c('el-table-column', {\n    attrs: {\n      \"slot\": \"operation\",\n      \"property\": \"operation\",\n      \"label\": \"操作\",\n      \"width\": \"150\",\n      \"align\": \"center\",\n      \"fixed\": \"right\"\n    },\n    slot: \"operation\",\n    scopedSlots: _vm._u([{\n      key: \"default\",\n      fn: function(scope) {\n        return [_c('el-button', {\n          attrs: {\n            \"size\": \"small\"\n          },\n          on: {\n            \"click\": function($event) {\n              _vm.selectRow(scope.row)\n            }\n          }\n        }, [_vm._v(\"选择\")])]\n      }\n    }])\n  })], 1)], 2)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue-loader@13.0.4@vue-loader/lib/template-compiler?{\"id\":\"data-v-1174c510\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/_vue-loader@13.0.4@vue-loader/lib/selector.js?type=template&index=0!./src/views/platform/target/template/calculation.vue\n// module id = WQVX\n// module chunks = 10","<template>\r\n  <div>\r\n    <da-manage-page>\r\n      <div slot=\"button\">\r\n        <el-button icon=\"my-zengjia\" @click=\"dialogVisible=true;\">新增</el-button>\r\n      </div>\r\n      <el-form slot=\"search\" :inline=\"true\" :model=\"searchForm.formdata\">\r\n        <el-form-item label=\"指标名称\">\r\n          <el-input v-model=\"searchForm.formdata.name\"></el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"指标类型\">\r\n          <!-- <el-input v-model=\"searchForm.formdata.targetType\"></el-input> -->\r\n          <da-select-tree :data=\"targetTypeData\" v-model=\"searchForm.formdata.targetType\" :defaultExpandAll=\"true\"></da-select-tree>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"组织机构\">\r\n          <!-- <el-input v-model=\"searchForm.formdata.orgId\"></el-input> -->\r\n          <da-select-tree :data=\"entOrgData\" v-model=\"searchForm.formdata.orgId\" :defaultExpandAll=\"true\"></da-select-tree>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"指标周期\">\r\n          <!-- <el-input v-model=\"searchForm.formdata.targetCycle\"></el-input> -->\r\n          <el-select auto-complete=\"off\" v-model=\"searchForm.formdata.targetCycle\" filterable size=\"medium\" placeholder=\"请选择\">\r\n            <el-option v-for=\"(item, index) in targetCycleOptions\" :key=\"index\" :label=\"item.dataText\" :value=\"parseInt(item.dataValue)\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"取值方式\">\r\n          <!-- <el-input v-model=\"searchForm.formdata.valueMethod\"></el-input> -->\r\n          <el-select auto-complete=\"off\" v-model=\"searchForm.formdata.valueMethod\" filterable size=\"medium\" placeholder=\"请选择\">\r\n            <el-option v-for=\"(item, index) in valueMethodOptions\" :key=\"index\" :label=\"item.dataText\" :value=\"parseInt(item.dataValue)\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"getTbList\">查询</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      <da-table ref=\"table\" slot=\"content\" :colums=\"colsData\" :table-list=\"tableList\" :search-data=\"searchForm\" @callBack=\"getTbList\" :showSelection=\"false\">\r\n        <el-table-column property=\"operation\" label=\"操作\" width=\"150\" slot=\"operation\" align=\"center\" fixed=\"right\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button size=\"small\" @click=\"editTb(scope.row)\">编辑</el-button>\r\n            <el-button size=\"small\" @click=\"delTb(scope.row)\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n\r\n      </da-table>\r\n    </da-manage-page>\r\n\r\n    <da-dialog class=\"target-dialog\" :title=\"title\" :visible.sync=\"dialogVisible\" @close=\"closeDialog('addForm')\">\r\n      <el-form label-width=\"100px\" class=\"fm-line-50p clearfix\" :model=\"addForm\" :rules=\"rules\" ref=\"addForm\">\r\n        <el-form-item label=\"指标名称\" prop=\"name\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"指标简称\" prop=\"shortName\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.shortName\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"组织机构\" prop=\"orgId\">\r\n          <!-- <el-input auto-complete=\"off\" v-model=\"addForm.orgId\"></el-input> -->\r\n          <da-select-tree :data=\"entOrgData\" v-model=\"addForm.orgId\" :defaultExpandAll=\"true\"></da-select-tree>\r\n        </el-form-item>\r\n        <el-form-item label=\"指标类型\" prop=\"targetType\">\r\n          <!-- <el-input auto-complete=\"off\" v-model=\"addForm.targetType\"></el-input> -->\r\n          <da-select-tree :data=\"targetTypeData\" v-model=\"addForm.targetType\" :defaultExpandAll=\"true\" @change=\"getTargetUnitList\"></da-select-tree>\r\n        </el-form-item>\r\n        <el-form-item label=\"指标周期\" prop=\"targetCycle\">\r\n          <el-radio-group v-model=\"addForm.targetCycle\">\r\n            <el-radio v-for=\"item in targetCycleOptions\" :key=\"item.dataValue\" :label=\"parseInt(item.dataValue)\">{{item.dataText}}</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item label=\"指标单位\" prop=\"unit\">\r\n          <!-- <el-input auto-complete=\"off\" v-model=\"addForm.unit\"></el-input> -->\r\n          <el-select auto-complete=\"off\" v-model=\"addForm.unit\" filterable placeholder=\"请选择\">\r\n            <el-option v-for=\"(item, index) in unitOptions\" :key=\"index\" :label=\"item.identifyValue\" :value=\"item.identify\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"单位换算倍率\" prop=\"rate\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.rate\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"数据上限\" prop=\"dataUpperLimit\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.dataUpperLimit\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"数据下限\" prop=\"dataLowerLimit\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.dataLowerLimit\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"统计上限\" prop=\"effectiveUpperLimit\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.effectiveUpperLimit\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"统计下限\" prop=\"effectiveLowerLimit\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.effectiveLowerLimit\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"显示位数\" prop=\"dataDisplayPrecisions\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.dataDisplayPrecisions\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"正常使用\" prop=\"state\">\r\n          <!-- <el-input auto-complete=\"off\" v-model=\"addForm.state\"></el-input> -->\r\n          <el-radio-group v-model=\"addForm.state\">\r\n            <el-radio v-for=\"item in stateOptions\" :key=\"item.dataValue\" :label=\"item.dataValue\">{{item.dataText}}</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item label=\"取值方式\" prop=\"valueMethod\" class=\"fm-item-100p\">\r\n          <el-radio-group v-model=\"addForm.valueMethod\">\r\n            <el-radio v-for=\"item in valueMethodOptions\" :key=\"item.dataValue\" :label=\"parseInt(item.dataValue)\">{{item.dataText}}</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item label=\"表达式\" prop=\"valueSource\" class=\"fm-item-100p\" v-show=\"addForm.valueMethod!=='0'\">\r\n          <div class=\"target-flex\">\r\n            <el-input v-model=\"addForm.valueSource\" :row=\"6\" type=\"textarea\">\r\n            </el-input>\r\n            <el-button class=\"target-valuesource-btn\" @click=\"editExpression\" :disabled=\"addForm.valueMethod==='0'||!addForm.valueMethod\">重置</el-button>\r\n          </div>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\" prop=\"valueContent\" class=\"fm-item-100p\">\r\n          <el-input v-model=\"addForm.valueContent\" :row=\"6\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"数据源\" prop=\"sourceId\" v-show=\"addForm.valueMethod===1\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.sourceId\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"直接依赖\" prop=\"dependence\">\r\n          <el-input auto-complete=\"off\" disabled v-model=\"addForm.dependence\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"间接依赖\" prop=\"indirectDependence\">\r\n          <el-input auto-complete=\"off\" disabled v-model=\"addForm.indirectDependence\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"显示顺序\" prop=\"showSort\">\r\n          <el-input auto-complete=\"off\" v-model=\"addForm.showSort\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"saveDialog('addForm')\">确 定</el-button>\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n      </div>\r\n    </da-dialog>\r\n\r\n    <da-dialog :title=\"expressionTitle\" :visible.sync=\"sourceDialogVisible\" @close=\"expressionClose\">\r\n      <da-calculation v-if=\"addForm.valueMethod===3\" ref=\"targetExpression\" v-model=\"expression\" :target-type=\"colsData[2].displace\"></da-calculation>\r\n      <data-base v-if=\"addForm.valueMethod===1||addForm.valueMethod===2\" ref=\"targetDBsourse\" :type=\"addForm.valueMethod\"></data-base>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button v-if=\"addForm.valueMethod===3\" type=\"primary\" @click=\"checkExpression()\">校验</el-button>\r\n        <!-- ||addForm.valueMethod==='1' -->\r\n        <el-button type=\"primary\" @click=\"setExpression()\" :disabled=\"addForm.valueMethod===3&&expression===false\">保存</el-button>\r\n        <el-button type=\"primary\" @click=\"sourceDialogVisible=false\">关闭</el-button>\r\n        <!-- <el-button @click=\"dialogVisible = false\">取 消</el-button> -->\r\n      </div>\r\n    </da-dialog>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { changeTree, difference, deepCopy } from \"@/util/util.js\";\r\nimport daCalculation from \"./template/calculation\";\r\nimport dataBase from \"./template/dataBase\";\r\nimport { deepJSONCopy } from \"../../../util/util\";\r\nimport {\r\n  getTableDataTest,\r\n  getTableDataByOneArray,\r\n  getTableDataByManyArray\r\n} from \"../../../util/dataUtil\";\r\nexport default {\r\n  name: \"target\",\r\n  components: {\r\n    daCalculation,\r\n    dataBase\r\n  },\r\n  data() {\r\n    return {\r\n      targetTypeData: [],\r\n      entOrgData: [],\r\n      unitOptions: [],\r\n      stateOptions: [\r\n        { dataText: \"正常使用\", dataValue: true },\r\n        { dataText: \"停用\", dataValue: false }\r\n      ],\r\n      targetCycleOptions: [\r\n        // { dataText: \"小时\", dataValue: \"1\" },\r\n        // {\r\n        //   dataText: \"班\",\r\n        //   dataValue: \"2\"\r\n        // },\r\n        { dataText: \"日\", dataValue: \"3\" },\r\n        // { dataText: \"周\", dataValue: \"4\" },\r\n        {\r\n          dataText: \"月\",\r\n          dataValue: \"5\"\r\n        },\r\n        // { dataText: \"季度\", dataValue: \"6\" },\r\n        // { dataText: \"半年\", dataValue: \"7\" },\r\n        {\r\n          dataText: \"年\",\r\n          dataValue: \"8\"\r\n        }\r\n      ],\r\n      valueMethodOptions: [\r\n        { dataText: \"手动录入\", dataValue: \"0\" },\r\n        {\r\n          dataText: \"SQL取值\",\r\n          dataValue: \"1\"\r\n        },\r\n        { dataText: \"接口取值\", dataValue: \"2\" },\r\n        { dataText: \"计算取值\", dataValue: \"3\" }\r\n        // { dataText: \"计量点数据\", dataValue: \"4\" }\r\n      ],\r\n      // 查询表单\r\n      searchForm: {\r\n        formdata: {\r\n          name: \"\",\r\n          targetType: \"\",\r\n          orgId: \"\",\r\n          targetCycle: \"\",\r\n          valueMethod: \"\"\r\n        },\r\n        currentPage: 1,\r\n        pageSize: 20\r\n      },\r\n      tableList: {}, // 数据列表\r\n      colsData: [\r\n        // 表头\r\n        { label: \"指标名称\", prop: \"name\", align: \"left\", sortable: true },\r\n        { label: \"指标简称\", prop: \"shortName\", align: \"left\", sortable: true },\r\n        {\r\n          label: \"指标类型\",\r\n          prop: \"targetType\",\r\n          align: \"left\",\r\n          sortable: true,\r\n          displace: {}\r\n        },\r\n        {\r\n          label: \"组织机构\",\r\n          prop: \"orgId\",\r\n          align: \"left\",\r\n          sortable: true,\r\n          displace: {}\r\n        },\r\n        {\r\n          label: \"指标周期\",\r\n          prop: \"targetCycle\",\r\n          align: \"left\",\r\n          sortable: true,\r\n          displace: {\r\n            3: \"日\",\r\n            5: \"月\",\r\n            8: \"年\"\r\n          }\r\n        },\r\n        { label: \"指标单位\", prop: \"unit\", align: \"left\", sortable: true },\r\n        {\r\n          label: \"取值方式\",\r\n          prop: \"valueMethod\",\r\n          align: \"left\",\r\n          sortable: true,\r\n          displace: {\r\n            0: \"手动录入\",\r\n            1: \"SQL取值\",\r\n            2: \"接口取值\",\r\n            3: \"计算取值\",\r\n            4: \"计量点数据\"\r\n          }\r\n        },\r\n        {\r\n          label: \"表达式\",\r\n          prop: \"valueSource\",\r\n          align: \"left\",\r\n          subStr: true,\r\n          sortable: true\r\n        },\r\n        { label: \"描述\", prop: \"valueContent\", align: \"left\", sortable: true }\r\n      ],\r\n      dialogVisible: false,\r\n      addForm: {\r\n        name: \"\",\r\n        shortName: \"\",\r\n        targetType: \"\",\r\n        orgId: \"\",\r\n        targetCycle: 3,\r\n        unit: \"\",\r\n        rate: 1,\r\n        dataUpperLimit: \"9999999.9999\",\r\n        dataLowerLimit: \"-9999999.9999\",\r\n        effectiveUpperLimit: \"9999999.9999\",\r\n        effectiveLowerLimit: \"-9999999.9999\",\r\n        dataDisplayPrecisions: \"2\",\r\n        state: true,\r\n        valueMethod: 3,\r\n        valueSource: \"\",\r\n        valueContent: \"\",\r\n        sourceId: \"-1\",\r\n        dependence: \"\",\r\n        indirectDependence: \"\",\r\n        showSort: \"\",\r\n        calculationLevel: \"\"\r\n      },\r\n      rules: this.eachValidate({\r\n        name: { required: true, maxString: \"60\" },\r\n        shortName: { maxString: \"60\" },\r\n        rate: { number: true },\r\n        targetType: { required: { required: true, trigger: \"change\" } },\r\n        orgId: { required: true },\r\n        targetCycle: { required: true },\r\n        unit: { maxString: \"20\" },\r\n        valueMethod: { required: true },\r\n        valueSource: { maxString: \"1800\" },\r\n        valueContent: { maxString: \"200\" }\r\n      }),\r\n      sourceDialogVisible: false,\r\n      expression: false,\r\n      expressionObj: {}\r\n    };\r\n  },\r\n  computed: {\r\n    title() {\r\n      //弹窗标题\r\n      return this.addForm.id ? \"编辑指标资料\" : \"新增指标资料\";\r\n    },\r\n    urlType() {\r\n      //URL请求方式\r\n      return this.addForm.id ? \"put\" : \"post\";\r\n    },\r\n    expressionTitle() {\r\n      let titles = [\"\", \"SQL取值\", \"接口取值\", \"计算取值\"];\r\n      return titles[this.addForm.valueMethod];\r\n    }\r\n  },\r\n  watch: {},\r\n  methods: {\r\n    /**\r\n     * 查询指标类型树\r\n     */\r\n    getTargetTypeTree(val) {\r\n      let me = this;\r\n      me\r\n        .$ajax({\r\n          url: \"rest/targetData/targetTypeTree\",\r\n          method: \"get\"\r\n        })\r\n        .then(res => {\r\n          if (res.data.status) {\r\n            me.targetTypeData = res.data.records;\r\n            //编辑设值\r\n            if (val != undefined) {\r\n              //没有parentname时\r\n              let parentTreeObj = {};\r\n              changeTree(res.data.records, \"treeCode\", \"name\", parentTreeObj);\r\n              // this.$refs.parentModuleTree.setText(parentTreeObj[val.parentId]);\r\n            }\r\n          }\r\n        });\r\n    },\r\n    /**\r\n     * 查询指标类型列表\r\n     */\r\n    getTargetTypeList() {\r\n      let me = this;\r\n      me\r\n        .$ajax({\r\n          url: \"rest/target/targetType\",\r\n          method: \"get\"\r\n        })\r\n        .then(res => {\r\n          if (res.data.status) {\r\n            let toObj = {};\r\n            this.$each(res.data.records, item => {\r\n              toObj[item.id] = item.name;\r\n            });\r\n            this.colsData[2].displace = toObj;\r\n          }\r\n        });\r\n    },\r\n    /**\r\n     * 用能对象树\r\n     */\r\n    getOrgTree(val) {\r\n      let me = this;\r\n      let paramsObj = { title: \"指标资料\" };\r\n      paramsObj.isAll = false;\r\n      paramsObj.groupBys = \"0100000000\";\r\n      me\r\n        .$ajax({\r\n          url: \"rest/analysisData/departTree\",\r\n          method: \"get\",\r\n          params: paramsObj\r\n        })\r\n        .then(res => {\r\n          if (res.data.status) {\r\n            me.entOrgData = res.data.records;\r\n            //编辑设值\r\n            if (val != undefined) {\r\n              //没有parentname时\r\n              let parentTreeObj = {};\r\n              changeTree(res.data.records, \"treeCode\", \"name\", parentTreeObj);\r\n              // this.$refs.parentModuleTree.setText(parentTreeObj[val.parentId]);\r\n            }\r\n          }\r\n        });\r\n    },\r\n    /**\r\n     * 用能对象列表\r\n     */\r\n    getOrgList() {\r\n      let me = this;\r\n      let paramsObj = { title: \"指标资料\" };\r\n      me\r\n        .$ajax({\r\n          url: \"rest/analysisData/depart\",\r\n          method: \"get\",\r\n          params: paramsObj\r\n        })\r\n        .then(res => {\r\n          if (res.data.status) {\r\n            let toObj = {};\r\n            this.$each(res.data.records, item => {\r\n              toObj[item.id] = item.name;\r\n            });\r\n            this.colsData[3].displace = toObj;\r\n          }\r\n        });\r\n    },\r\n    // 单位\r\n    getTargetUnitList() {\r\n      let me = this;\r\n      me\r\n        .$ajax({\r\n          url: \"rest/target/targetUnit\",\r\n          method: \"get\",\r\n          params: {\r\n            unitType: \"\",\r\n            targetType: this.addForm.targetType\r\n          }\r\n        })\r\n        .then(res => {\r\n          if (res.data.status) {\r\n            this.unitOptions = res.data.records;\r\n          }\r\n        });\r\n    },\r\n    getTbList() {\r\n      let formName = \"table\";\r\n      this.$ajax\r\n        .get(\"rest/target/page\", {\r\n          params: this.searchForm,\r\n          loadingTarget: this.$refs[formName]\r\n        })\r\n        .then(res => {\r\n          if (res.data.status) {\r\n            this.tableList = res.data;\r\n          }\r\n        });\r\n    },\r\n    editTb(row) {\r\n      this.dialogVisible = true;\r\n      this.addForm = JSON.parse(JSON.stringify(row));\r\n    },\r\n    closeDialog(formName) {\r\n      this.$nextTick(function() {\r\n        this.$refs[formName].resetFields();\r\n        this.addForm = {\r\n          name: \"\",\r\n          shortName: \"\",\r\n          targetType: \"\",\r\n          orgId: \"\",\r\n          targetCycle: 3,\r\n          unit: \"\",\r\n          rate: 1,\r\n          dataUpperLimit: \"9999999.9999\",\r\n          dataLowerLimit: \"-9999999.9999\",\r\n          effectiveUpperLimit: \"9999999.9999\",\r\n          effectiveLowerLimit: \"-9999999.9999\",\r\n          dataDisplayPrecisions: \"2\",\r\n          state: true,\r\n          valueMethod: 3,\r\n          valueSource: \"\",\r\n          valueContent: \"\",\r\n          sourceId: \"-1\",\r\n          dependence: \"\",\r\n          indirectDependence: \"\",\r\n          showSort: \"\",\r\n          calculationLevel: \"\"\r\n        };\r\n      });\r\n      this.expression = false;\r\n    },\r\n    saveDialog(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          this.$ajax[this.urlType](\"rest/target\", this.addForm).then(res => {\r\n            if (res.data.status) {\r\n              this.$message.success(res.data.answerMsg);\r\n              this.dialogVisible = false;\r\n              this.getTbList();\r\n            } else {\r\n              this.$message.error(res.data.answerMsg);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    delTb(row) {\r\n      this.$confirm(\"是否删除该记录?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      }).then(() => {\r\n        this.$ajax\r\n          .delete(\"rest/target\", { params: { id: row.id } })\r\n          .then(res => {\r\n            if (res.data.status) {\r\n              this.$message.success(res.data.answerMsg);\r\n              this.getTbList();\r\n            } else {\r\n              this.$message.error(res.data.answerMsg);\r\n            }\r\n          });\r\n      });\r\n    },\r\n    editExpression() {\r\n      this.sourceDialogVisible = true;\r\n      this.$nextTick(() => {\r\n        switch (this.addForm.valueMethod) {\r\n          case 3:\r\n            this.$refs.targetExpression.getData();\r\n            this.expression = {\r\n              expression: this.addForm.valueContent,\r\n              expressionTrue: this.addForm.valueSource,\r\n              level: this.addForm.calculationLevel,\r\n              dependence: this.addForm.dependence,\r\n              indirect_dependence: this.addForm.indirectDependence\r\n            };\r\n            break;\r\n          case 2:\r\n          case 1:\r\n            this.$refs.targetDBsourse.getData();\r\n            break;\r\n        }\r\n      });\r\n    },\r\n    // 校验表达式\r\n    checkExpression() {\r\n      this.$refs.targetExpression.checkExpression(deepJSONCopy(this.addForm));\r\n    },\r\n    // 保存表达式\r\n    setExpression() {\r\n      this.sourceDialogVisible = false;\r\n      switch (this.addForm.valueMethod) {\r\n        case 3:\r\n          // this.$set(this.addForm, \"valueSource\", this.expression);\r\n          this.addForm.valueSource = this.expression.expressionTrue;\r\n          this.addForm.calculationLevel = this.expression.level;\r\n          this.addForm.valueContent = this.expression.expression;\r\n          this.addForm.dependence = this.expression.dependence;\r\n          this.addForm.indirectDependence = this.expression.indirectDependence;\r\n          break;\r\n        case 1:\r\n          let obj = this.$refs.targetDBsourse.checkExpression();\r\n          this.addForm.valueSource = obj.expression;\r\n          this.addForm.sourceId = obj.source;\r\n          break;\r\n      }\r\n    },\r\n    expressionClose() {\r\n      switch (this.addForm.valueMethod) {\r\n        case 3:\r\n          this.$refs.targetExpression.resetData();\r\n          break;\r\n        case 2:\r\n          this.$refs.targetDBsourse.resetData();\r\n          break;\r\n        case 1:\r\n          this.$refs.targetDBsourse.resetData();\r\n          break;\r\n      }\r\n    }, //,\r\n    // getTableDataTest() {\r\n    //   let dataLst1 = [\r\n    //     { equipType: 1, equipTypeName: \"中央空调\" },\r\n    //     { equipType: 2, equipTypeName: \"抽风机\" },\r\n    //     { equipType: 3, equipTypeName: \"新风机\" }\r\n    //   ];\r\n    //   let dataLst2 = [\r\n    //     { id: 1, name: \"中央空调1#\", type: 1 },\r\n    //     { id: 2, name: \"中央空调2#\", type: 1 },\r\n    //     { id: 3, name: \"抽风机1#\", type: 2 },\r\n    //     { id: 4, name: \"抽风机2#\", type: 2 },\r\n    //     { id: 5, name: \"新风机1#\", type: 3 }\r\n    //   ];\r\n    //   let dataLst3 = [\r\n    //     {\r\n    //       id: 1,\r\n    //       equipId: 1,\r\n    //       time: \"2018-04\",\r\n    //       dataTime: \"2018-04-01\",\r\n    //       dataValue: 52.6\r\n    //     },\r\n    //     {\r\n    //       id: 2,\r\n    //       equipId: 1,\r\n    //       time: \"2018-05\",\r\n    //       dataTime: \"2018-05-01\",\r\n    //       dataValue: 56.3\r\n    //     },\r\n    //     {\r\n    //       id: 3,\r\n    //       equipId: 2,\r\n    //       time: \"2018-04\",\r\n    //       dataTime: \"2018-04-01\",\r\n    //       dataValue: 65.6\r\n    //     },\r\n    //     {\r\n    //       id: 4,\r\n    //       equipId: 2,\r\n    //       time: \"2018-05\",\r\n    //       dataTime: \"2018-05-01\",\r\n    //       dataValue: 64.2\r\n    //     },\r\n    //     {\r\n    //       id: 5,\r\n    //       equipId: 3,\r\n    //       time: \"2018-04\",\r\n    //       dataTime: \"2018-04-01\",\r\n    //       dataValue: 83.6\r\n    //     },\r\n    //     {\r\n    //       id: 6,\r\n    //       equipId: 3,\r\n    //       time: \"2018-05\",\r\n    //       dataTime: \"2018-05-01\",\r\n    //       dataValue: 76.6\r\n    //     },\r\n    //     {\r\n    //       id: 7,\r\n    //       equipId: 4,\r\n    //       time: \"2018-04\",\r\n    //       dataTime: \"2018-04-01\",\r\n    //       dataValue: 42.6\r\n    //     },\r\n    //     {\r\n    //       id: 8,\r\n    //       equipId: 4,\r\n    //       time: \"2018-05\",\r\n    //       dataTime: \"2018-05-01\",\r\n    //       dataValue: 47.6\r\n    //     },\r\n    //     {\r\n    //       id: 9,\r\n    //       equipId: 5,\r\n    //       time: \"2018-04\",\r\n    //       dataTime: \"2018-04-01\",\r\n    //       dataValue: 95.6\r\n    //     },\r\n    //     {\r\n    //       id: 10,\r\n    //       equipId: 5,\r\n    //       time: \"2018-05\",\r\n    //       dataTime: \"2018-05-01\",\r\n    //       dataValue: 88.6\r\n    //     }\r\n    //   ];\r\n    //   let obj = {\r\n    //     num: 3,\r\n    //     dataArray: [dataLst1, dataLst2, dataLst3],\r\n    //     relation: [\"equipType,type\", \"id,equipId\"],\r\n    //     uniqueField: [\"equipTypeName\"],\r\n    //     column: [\r\n    //       {\r\n    //         field: \"equipTypeName\",\r\n    //         formula: \"\",\r\n    //         children: null\r\n    //       },\r\n    //       {\r\n    //         field: \"equipId\",\r\n    //         formula: \"COUNT([equipId])\",\r\n    //         children: null\r\n    //       },\r\n    //       {\r\n    //         field: \"time\",\r\n    //         formula: \"OPEN([time])\",\r\n    //         children: [\r\n    //           {\r\n    //             field: \"dataValue\",\r\n    //             formula: \"SUM([dataValue])\",\r\n    //             children: null\r\n    //           },\r\n    //           {\r\n    //             field: \"scale\",\r\n    //             formula: \"SUM([dataValue])/TOTALX([dataValue])\",\r\n    //             children: null\r\n    //           }\r\n    //         ]\r\n    //       },\r\n    //       {\r\n    //         field: \"ringRatio\",\r\n    //         formula: \"RINGRATIO([dataValue])\",\r\n    //         children: null\r\n    //       }\r\n    //     ],\r\n    //     totalX: [\r\n    //       {\r\n    //         field: \"equipTypeName\",\r\n    //         formula: \"设备合计\",\r\n    //         children: null\r\n    //       },\r\n    //       {\r\n    //         field: \"equipId\",\r\n    //         formula: \"SUM([equipId])\",\r\n    //         children: null\r\n    //       },\r\n    //       {\r\n    //         field: \"time\",\r\n    //         formula: \"\",\r\n    //         children: [\r\n    //           {\r\n    //             field: \"dataValue\",\r\n    //             formula: \"SUM([dataValue])\",\r\n    //             children: null\r\n    //           },\r\n    //           {\r\n    //             field: \"scale\",\r\n    //             formula: \"1\",\r\n    //             children: null\r\n    //           }\r\n    //         ]\r\n    //       },\r\n    //       {\r\n    //         field: \"ringRatio\",\r\n    //         formula: \"RINGRATIO([dataValue])\",\r\n    //         children: null\r\n    //       }\r\n    //     ],\r\n    //     totalY: [\r\n    //       {\r\n    //         field: \"totalDataValue\",\r\n    //         formula: \"SUM([dataValue])\",\r\n    //         children: null\r\n    //       }\r\n    //     ]\r\n    //   };\r\n    //   let d1 = new Date();\r\n    //   this.getTableData(obj);\r\n    //   let d2 = new Date();\r\n    //   console.log(\"运算时间：\" + (d2.getTime() - d1.getTime()) + \"毫秒。\");\r\n    // },\r\n    // /**\r\n    //  * 对象复制，针对不同属性\r\n    //  * @param o 对象，合并时以该对象为准\r\n    //  * @param n 被合并对象，合并时以牺牲对象为准\r\n    //  */\r\n    // concatObject(o, n) {\r\n    //   let obj = deepJSONCopy(o);\r\n    //   for (let p in n) {\r\n    //     if (n.hasOwnProperty(p) && !obj.hasOwnProperty(p)) {\r\n    //       obj[p] = n[p];\r\n    //     }\r\n    //   }\r\n    //   return obj;\r\n    // },\r\n    // /**\r\n    //  * 如果两个对象存在相同属性，并且字段值一致，则合并\r\n    //  * @param dataList1 数组1，返回结果以该数组为准\r\n    //  * @param dataList2 数组2，用来合并的数组\r\n    //  * @param relationList 根据那些字段来合并\r\n    //  */\r\n    // concatArray(dataList1, dataList2, relationList) {\r\n    //   let list = [];\r\n    //   let dataList1Obj = {};\r\n    //   for (let j = 0; j < dataList1.length; j++) {\r\n    //     let obj1 = dataList1[j];\r\n    //     let key = \"\";\r\n    //     for (let k = 0; k < relationList.length; k++) {\r\n    //       key += obj1[relationList[k]];\r\n    //     }\r\n    //     dataList1Obj[key] = obj1;\r\n    //   }\r\n    //   let dataList2Obj = {};\r\n    //   for (let j = 0; j < dataList2.length; j++) {\r\n    //     let obj2 = dataList2[j];\r\n    //     let key = \"\";\r\n    //     for (let k = 0; k < relationList.length; k++) {\r\n    //       key += obj2[relationList[k]];\r\n    //     }\r\n    //     let rightData = dataList1Obj[key];\r\n    //     list.push(this.concatObject(obj2, rightData));\r\n    //   }\r\n    //   return list;\r\n    // },\r\n    // getTableData(obj) {\r\n    //   if (!obj) {\r\n    //     return null;\r\n    //   }\r\n    //   let num = obj.num;\r\n    //   let dataArrays = obj.dataArray;\r\n    //   let relations = obj.relation;\r\n    //   let columns = obj.column;\r\n    //   let uniqueField = obj.uniqueField;\r\n    //   let totalY = obj.totalY || [];\r\n    //   let totalX = obj.totalX || [];\r\n    //   if (!num || !dataArrays || !relations || !columns || !uniqueField) {\r\n    //     return null;\r\n    //   }\r\n    //   if (\r\n    //     num < 1 ||\r\n    //     dataArrays.length != num ||\r\n    //     relations.length != num - 1 ||\r\n    //     uniqueField.length < 1\r\n    //   ) {\r\n    //     return null;\r\n    //   }\r\n    //   // 第一步把所有的数组数据连成一个数组\r\n    //   let allDataArr = [];\r\n    //   if (dataArrays[0] instanceof Array) {\r\n    //     dataArrays[0].forEach(item => {\r\n    //       allDataArr.push(item);\r\n    //     });\r\n    //   } else if (dataArrays[0] instanceof Object) {\r\n    //     allDataArr.push(dataArrays[0]);\r\n    //   } else {\r\n    //     return;\r\n    //   }\r\n    //   for (let i = 0; i < num - 1; i++) {\r\n    //     // \"equipType,type\"中的\"equipType\"\r\n    //     let fieldLeft = relations[i].split(\",\")[0];\r\n    //     // \"equipType,type\"中的\"type\"\r\n    //     let fieldRight = relations[i].split(\",\")[1];\r\n    //     // 把右边的数组全部按关联关系分类\r\n    //     let objData = {};\r\n    //     // 右边的数组，将有关联关系的字段对应的值作为Object的key，便于匹配\r\n    //     if (dataArrays[i + 1] instanceof Array) {\r\n    //       dataArrays[i + 1].forEach(item => {\r\n    //         // item[fieldRight] 有关联关系的字段对应的值\r\n    //         let arr1 = objData[item[fieldRight]] || [];\r\n    //         arr1.push(item);\r\n    //         objData[item[fieldRight]] = arr1;\r\n    //       });\r\n    //     } else if (dataArrays[i + 1] instanceof Object) {\r\n    //       objData[dataArrays[i + 1][fieldRight]] = dataArrays[i + 1];\r\n    //     } else {\r\n    //       continue;\r\n    //     }\r\n    //     // 根据关联关系将数组合并\r\n    //     let newArr = [];\r\n    //     allDataArr.forEach(item => {\r\n    //       // 找到左边数组的记录关联字段的值\r\n    //       let leftF = item[fieldLeft];\r\n    //       // 利用左边数组的记录关联字段的值找到右边对应的数组\r\n    //       let rightArr = objData[leftF];\r\n    //       // 将右边数组的每条记录都复制到左边，结果为m*n条记录\r\n    //       rightArr.forEach(itemRight => {\r\n    //         let newData = this.concatObject(item, itemRight);\r\n    //         newArr.push(newData);\r\n    //       });\r\n    //     });\r\n    //     allDataArr = newArr;\r\n    //   }\r\n\r\n    //   let fieldObj = this.getExpressionField(columns);\r\n    //   // 对分组后的N个数组根据需要展开的字段分成M个数组，只单纯展开\r\n    //   if (!fieldObj.open || fieldObj.open.length < 1) {\r\n    //     // 如果需要展开的字段为空，那么连接分组后的数组就是实际数组\r\n    //     // afterOpenDataObj = allDataArr;\r\n    //   } else {\r\n    //     // 找到最终字段\r\n    //     let openF = fieldObj.open;\r\n    //     let openColumn = columns[openF[0].index];\r\n    //     let showDataField = \"\";\r\n    //     while (openColumn && openColumn.children) {\r\n    //       let childrenCol = openColumn.children;\r\n    //       let childrenOpenObj = this.getExpressionField(childrenCol);\r\n    //       if (\r\n    //         childrenOpenObj.open &&\r\n    //         childrenOpenObj.open.field &&\r\n    //         childrenOpenObj.open.field.indexOf(\",\") == -1\r\n    //       ) {\r\n    //         openColumn = deepJSONCopy(childrenCol);\r\n    //       } else {\r\n    //         openColumn = null;\r\n    //         for (let kk = 0; kk < childrenCol.length; kk++) {\r\n    //           let key = childrenCol[kk].field;\r\n    //           if (allDataArr[0][key]) {\r\n    //             showDataField = key;\r\n    //           }\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //     // 仅仅展开数据\r\n    //     allDataArr = this.openRecordNotOperation(\r\n    //       allDataArr,\r\n    //       columns,\r\n    //       uniqueField,\r\n    //       showDataField\r\n    //     );\r\n    //   }\r\n\r\n    //   // 根据字段计算，就是遍历columns，然后一个字段一个字段拼接\r\n    //   // 遍历字段，将子字段展开，找到最终不显示的字段\r\n    //   let allColumns = this.getAllColumn(columns);\r\n    //   // OPEN 根据columns将数组整理成需要显示的字段的数组\r\n    //   let showResult =\r\n    //     this.getShowFieldDataList(allDataArr, columns, allColumns) || {};\r\n    //   allDataArr = showResult.data;\r\n    //   allColumns = showResult.column;\r\n\r\n    //   // 对合并的数组进行分类，按需要显示的字段一个个分类，从左至右\r\n    //   // 先根据uniqueField分成N个数组\r\n    //   let dataObj = {};\r\n    //   // 根据唯一性统计数量\r\n    //   let dataCount = {};\r\n    //   let rstDataList = {};\r\n    //   allDataArr.forEach(item => {\r\n    //     let key = \"\";\r\n    //     // if (uniqueField.length < 1) {\r\n    //     //   key = \"all\";\r\n    //     // } else\r\n    //     let uniqueEle = {};\r\n    //     if ((uniqueField.length = 1)) {\r\n    //       key = item[uniqueField[0]];\r\n    //       uniqueEle[uniqueField[0]] = key;\r\n    //     } else {\r\n    //       uniqueField.forEach(unique => {\r\n    //         key += \"_\" + item[unique];\r\n    //         uniqueEle[unique] = item[unique];\r\n    //       });\r\n    //       key = key.substring(1);\r\n    //     }\r\n    //     let curDataArr = dataObj[key] || [];\r\n    //     curDataArr.push(item);\r\n    //     dataObj[key] = curDataArr;\r\n    //     dataCount[key] = curDataArr.length;\r\n    //     if (!rstDataList[key] || rstDataList[key] == {}) {\r\n    //       rstDataList[key] = uniqueEle;\r\n    //     }\r\n    //   });\r\n    //   let totalX01 = {};\r\n    //   let totalKey = \"\";\r\n    //   uniqueField.forEach((unique, index) => {\r\n    //     totalX01[unique] = totalX[index].formula;\r\n    //     totalKey += \"_\" + totalX[index].formula;\r\n    //   });\r\n    //   rstDataList[totalKey.substring(1)] = totalX01;\r\n\r\n    //   // 处理TotalX字段，使其跟显示字段column一致\r\n    //   let allTotalX = this.getAllColumn(totalX) || null;\r\n    //   let totalXFields = [];\r\n    //   let totalXObj = {};\r\n    //   if (allTotalX) {\r\n    //     for (let i = 0; i < allTotalX.length; i++) {\r\n    //       totalXFields.push(allTotalX[i].field);\r\n    //       totalXObj[allTotalX[i].field] = allTotalX[i];\r\n    //     }\r\n    //   }\r\n    //   let newTotalX = [];\r\n    //   newTotalX.push(allTotalX[0]);\r\n    //   for (let i = uniqueField.length; i < allColumns.length; i++) {\r\n    //     if (totalXFields.indexOf(allColumns[i].field) > -1) {\r\n    //       newTotalX.push(totalXObj[allColumns[i].field]);\r\n    //     } else {\r\n    //       let dataFieldX = allColumns[i].field;\r\n    //       if (/\\[(.+)\\]/g.test(dataFieldX)) {\r\n    //         let xDataField = dataFieldX.replace(/\\[(.+)\\]/g, \"\");\r\n    //         if (totalXFields.indexOf(xDataField) > -1) {\r\n    //           let totalXCurCol = deepJSONCopy(totalXObj[xDataField]);\r\n    //           totalXCurCol.field = dataFieldX;\r\n    //           newTotalX.push(totalXCurCol);\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   }\r\n    //   // 唯一字段不需要处理\r\n    //   for (let i = uniqueField.length; i < allColumns.length; i++) {\r\n    //     let columnX = newTotalX && newTotalX[i] ? newTotalX[i] : null;\r\n    //     rstDataList = this.getShowDataList(\r\n    //       allDataArr,\r\n    //       dataObj,\r\n    //       uniqueField,\r\n    //       allColumns,\r\n    //       allColumns[i],\r\n    //       rstDataList,\r\n    //       newTotalX,\r\n    //       columnX\r\n    //     );\r\n    //   }\r\n    //   // 将结果Object转为数组\r\n    //   let rstDataArray = [];\r\n    //   let rstkeys = Object.keys(rstDataList);\r\n    //   for (let i = 0; i < rstkeys.length; i++) {\r\n    //     rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\r\n    //   }\r\n    //   if (totalY && totalY.length > 0) {\r\n    //     rstDataArray = this.getTotalYValue(totalY, allColumns, rstDataArray);\r\n    //   }\r\n    //   return rstDataArray;\r\n    // },\r\n    // /**\r\n    //  * 得到最终展示的数据数组\r\n    //  */\r\n    // getShowDataList(\r\n    //   allDataArr,\r\n    //   dataObj,\r\n    //   uniqueField,\r\n    //   allColumns,\r\n    //   column,\r\n    //   rstDataList,\r\n    //   totalX,\r\n    //   columnX\r\n    // ) {\r\n    //   let formula = column.formula;\r\n    //   let rstList = {};\r\n    //   if (!formula || formula == null) {\r\n    //     for (let i = 0; i < allDataArr.length - 1; i++) {\r\n    //       // 唯一字段和当前字段组成的Object\r\n    //       let ele = {};\r\n    //       // 字段值\r\n    //       let value = allDataArr[i][column.field];\r\n    //       // 唯一字段组成的key\r\n    //       let key = \"\";\r\n    //       uniqueField.forEach(unique => {\r\n    //         key += \"_\" + allDataArr[unique];\r\n    //         ele[unique] = allDataArr[unique];\r\n    //       });\r\n    //       ele[column.field] = value;\r\n    //       if (!rstList[key] || rstList[key] == {}) {\r\n    //         rstList[key] = ele;\r\n    //       }\r\n    //     }\r\n    //     let keys = Object.keys(rstDataList);\r\n    //     for (let i = 0; i < keys.length; i++) {\r\n    //       rstDataList[keys[i]] = this.concatObject(\r\n    //         rstDataList[keys[i]],\r\n    //         rstList[keys[i]]\r\n    //       );\r\n    //     }\r\n    //     if (columnX) {\r\n    //       rstDataList[rstDataList.length - 1][\r\n    //         columnX.field\r\n    //       ] = this.getTotalXValue(rstDataList, totalX, allColumns, columnX);\r\n    //     }\r\n    //   } else {\r\n    //     let colObj = this.getExpressionField(column);\r\n    //     rstDataList = this.getDataByOperation(\r\n    //       allDataArr,\r\n    //       dataObj,\r\n    //       allColumns,\r\n    //       column,\r\n    //       colObj,\r\n    //       totalX,\r\n    //       rstDataList\r\n    //     );\r\n    //     if (columnX) {\r\n    //       rstDataList[totalX[0].formula][columnX.field] = this.getTotalXValue(\r\n    //         rstDataList,\r\n    //         totalX,\r\n    //         allColumns,\r\n    //         columnX\r\n    //       );\r\n    //     }\r\n    //   }\r\n    //   return rstDataList;\r\n    // },\r\n    // /**\r\n    //  * X轴数据计算\r\n    //  */\r\n    // getTotalXValue(rstDataList, totalX, allColumns, columnX) {\r\n    //   let formula = columnX.formula;\r\n    //   if (!formula) {\r\n    //     return \"\";\r\n    //   }\r\n    //   let colObj = this.getExpressionField(columnX);\r\n    //   if (colObj.open && colObj.open.length > 0) {\r\n    //     return \"\";\r\n    //   }\r\n    //   let rstDataArray = [];\r\n    //   let rstkeys = Object.keys(rstDataList);\r\n    //   for (let i = 0; i < rstkeys.length; i++) {\r\n    //     rstDataArray = rstDataArray.concat(rstDataList[rstkeys[i]]);\r\n    //   }\r\n    //   let field = columnX.field;\r\n    //   let suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\r\n\r\n    //   let countField =\r\n    //     colObj.count && colObj.count.length > 0\r\n    //       ? colObj.count[0].fields + suffix\r\n    //       : \"\";\r\n    //   let maxField =\r\n    //     colObj.max && colObj.max.length > 0\r\n    //       ? colObj.max[0].fields + suffix\r\n    //       : \"\";\r\n    //   let minField =\r\n    //     colObj.min && colObj.min.length > 0\r\n    //       ? colObj.min[0].fields + suffix\r\n    //       : \"\";\r\n    //   let sumField =\r\n    //     colObj.sum && colObj.sum.length > 0\r\n    //       ? colObj.sum[0].fields + suffix\r\n    //       : \"\";\r\n    //   let avgField =\r\n    //     colObj.avg && colObj.avg.length > 0\r\n    //       ? colObj.avg[0].fields + suffix\r\n    //       : \"\";\r\n    //   let countLst = \",\";\r\n    //   let count = 0;\r\n    //   let maxData = rstDataArray[0][maxField] || \"\";\r\n    //   let minData = rstDataArray[0][minField] || \"\";\r\n    //   let sumData = 0;\r\n    //   // 平均值的和值\r\n    //   let avgSumData = 0;\r\n    //   // 平均值叠加的数量\r\n    //   let avgCount = 0;\r\n    //   for (let i = 0; i < rstDataArray.length - 1; i++) {\r\n    //     let record = rstDataArray[i];\r\n    //     if (\r\n    //       countField &&\r\n    //       countLst.indexOf(\",\" + record[countField] + \",\") == -1\r\n    //     ) {\r\n    //       countLst += record[countField] + \",\";\r\n    //       count++;\r\n    //     }\r\n    //     if (maxField && maxData < record[maxField]) {\r\n    //       maxData = record[maxField];\r\n    //     }\r\n    //     if (minField && minData > record[minField]) {\r\n    //       minData = record[minField];\r\n    //     }\r\n    //     if (sumField && record[sumField]) {\r\n    //       sumData += record[sumField];\r\n    //     }\r\n    //     if (avgField && record[avgField]) {\r\n    //       avgSumData += record[avgField];\r\n    //       avgCount++;\r\n    //     }\r\n    //   }\r\n    //   if (colObj.count && colObj.count.length > 0) {\r\n    //     formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\r\n    //   }\r\n    //   if (colObj.ringRatio && colObj.ringRatio.length > 0) {\r\n    //     // 针对结果数据进行环比、同比\r\n    //     let rField = colObj.ringRatio[0].fields;\r\n    //     let dataFields = [];\r\n    //     for (let k = 0; k < allColumns.length; k++) {\r\n    //       if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\r\n    //         let xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\r\n    //         if (xDataField == rField) {\r\n    //           dataFields.push(allColumns[k].field);\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //     if (!dataFields || dataFields.length < 2) {\r\n    //       formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\r\n    //     } else {\r\n    //       dataFields.sort();\r\n    //       let record = rstDataArray[rstDataArray.length - 1];\r\n    //       let curDataDateF = dataFields[dataFields.length - 1];\r\n    //       let lastDataDateF = dataFields[dataFields.length - 2];\r\n    //       let scaleR = record[curDataDateF] / record[lastDataDateF] - 1;\r\n    //       formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\r\n    //     }\r\n    //   }\r\n    //   if (colObj.sum && colObj.sum.length > 0) {\r\n    //     formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\r\n    //   }\r\n    //   if (colObj.avg && colObj.avg.length > 0) {\r\n    //     let avgData = avgSumData / avgCount;\r\n    //     formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\r\n    //   }\r\n    //   if (colObj.max && colObj.max.length > 0) {\r\n    //     formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\r\n    //   }\r\n    //   if (colObj.min && colObj.min.length > 0) {\r\n    //     formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\r\n    //   }\r\n    //   if (colObj.totalX && colObj.totalX.length > 0) {\r\n    //     formula = formula.replace(\r\n    //       /TOTALX\\(\\[(\\w+)\\]\\)/g,\r\n    //       rstDataArray[rstDataArray.length - 1][colObj.totalX[0].fields]\r\n    //     );\r\n    //   }\r\n    //   // 替换没有函数的字段\r\n    //   if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n    //     let vKeys = formula.match(/\\[(.+)\\]/g);\r\n    //     formula = formula.replace(\r\n    //       /\\(\\[(\\w+)\\]\\)/g,\r\n    //       rstDataArray[0][vKeys[0] + suffix]\r\n    //     );\r\n    //   }\r\n    //   // 后续需要修改eval(formula)该四则运算\r\n    //   let data = eval(formula);\r\n    //   return data;\r\n    // },\r\n    // /**\r\n    //  * Y轴数据计算\r\n    //  */\r\n    // getTotalYValue(totalY, allColumns, rstDataArray) {\r\n    //   for (let i = 0; i < totalY.length; i++) {\r\n    //     let totaoYCol = totalY[i];\r\n    //     let formula = totaoYCol.formula;\r\n    //     let colObj = this.getExpressionField(totaoYCol);\r\n    //     let countField =\r\n    //       colObj.count && colObj.count.length > 0 ? colObj.count[0].fields : \"\";\r\n    //     let maxField =\r\n    //       colObj.max && colObj.max.length > 0 ? colObj.max[0].fields : \"\";\r\n    //     let minField =\r\n    //       colObj.min && colObj.min.length > 0 ? colObj.min[0].fields : \"\";\r\n    //     let sumField =\r\n    //       colObj.sum && colObj.sum.length > 0 ? colObj.sum[0].fields : \"\";\r\n    //     let avgField =\r\n    //       colObj.avg && colObj.avg.length > 0 ? colObj.avg[0].fields : \"\";\r\n    //     let countFieldArr = [];\r\n    //     let maxFieldArr = [];\r\n    //     let minFieldArr = [];\r\n    //     let sumFieldArr = [];\r\n    //     let avgFieldArr = [];\r\n    //     for (let j = 0; j < allColumns.length; j++) {\r\n    //       let column = allColumns[j].field.replace(/\\[(.+)\\]/g, \"\");\r\n    //       if (column == countField) {\r\n    //         countFieldArr.push(allColumns[j].field);\r\n    //       }\r\n    //       if (column == maxField) {\r\n    //         maxFieldArr.push(allColumns[j].field);\r\n    //       }\r\n    //       if (column == minField) {\r\n    //         minFieldArr.push(allColumns[j].field);\r\n    //       }\r\n    //       if (column == sumField) {\r\n    //         sumFieldArr.push(allColumns[j].field);\r\n    //       }\r\n    //       if (column == avgField) {\r\n    //         avgFieldArr.push(allColumns[j].field);\r\n    //       }\r\n    //     }\r\n    //     for (let j = 0; j < rstDataArray.length; j++) {\r\n    //       let record = rstDataArray[i];\r\n    //       let countLst = \",\";\r\n    //       let count = 0;\r\n    //       let maxData = record[maxFieldArr[0]] || \"\";\r\n    //       let minData = record[minFieldArr[0]] || \"\";\r\n    //       let sumData = 0;\r\n    //       // 平均值的和值\r\n    //       let avgSumData = 0;\r\n    //       // 平均值叠加的数量\r\n    //       let avgCount = 0;\r\n    //       if (colObj.count && colObj.count.length > 0) {\r\n    //         for (let k = 0; k < countFieldArr.length; k++) {\r\n    //           if (\r\n    //             countField &&\r\n    //             countLst.indexOf(\",\" + record[countFieldArr[k]] + \",\") == -1\r\n    //           ) {\r\n    //             countLst += record[countFieldArr[k]] + \",\";\r\n    //             count++;\r\n    //           }\r\n    //         }\r\n    //         formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\r\n    //       }\r\n    //       if (colObj.ringRatio && colObj.ringRatio.length > 0) {\r\n    //         // 最后处理\r\n    //       }\r\n    //       if (colObj.sum && colObj.sum.length > 0) {\r\n    //         for (let k = 0; k < sumFieldArr.length; k++) {\r\n    //           if (sumField && record[sumFieldArr[k]]) {\r\n    //             sumData += record[sumFieldArr[k]];\r\n    //           }\r\n    //         }\r\n    //         formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\r\n    //       }\r\n    //       if (colObj.avg && colObj.avg.length > 0) {\r\n    //         for (let k = 0; k < avgFieldArr.length; k++) {\r\n    //           if (avgField && record[avgFieldArr[k]]) {\r\n    //             avgSumData += record[avgFieldArr[k]];\r\n    //             avgCount++;\r\n    //           }\r\n    //         }\r\n    //         let avgData = avgSumData / avgCount;\r\n    //         formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\r\n    //       }\r\n    //       if (colObj.max && colObj.max.length > 0) {\r\n    //         for (let k = 0; k < maxFieldArr.length; k++) {\r\n    //           if (maxField && record[maxFieldArr[k]]) {\r\n    //             maxData =\r\n    //               maxData < record[maxFieldArr[k]]\r\n    //                 ? record[maxFieldArr[k]]\r\n    //                 : maxData;\r\n    //           }\r\n    //         }\r\n    //         formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\r\n    //       }\r\n    //       if (colObj.min && colObj.min.length > 0) {\r\n    //         for (let k = 0; k < minFieldArr.length; k++) {\r\n    //           if (minField && record[minFieldArr[k]]) {\r\n    //             minData =\r\n    //               minData > record[minFieldArr[k]]\r\n    //                 ? record[minFieldArr[k]]\r\n    //                 : minData;\r\n    //           }\r\n    //         }\r\n    //         formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\r\n    //       }\r\n    //       if (colObj.totalX && colObj.totalX.length > 0) {\r\n    //         // let totalXR=rstDataArray[rstDataArray.length-1];\r\n    //         // let totalXF = colObj.totalX[0].fields + suffix;\r\n    //         // formula = formula.replace(\r\n    //         //   /TOTALX\\(\\[(\\w+)\\]\\)/g,\r\n    //         //   rstDataList[totalX[0].formula][totalXF]\r\n    //         // );\r\n    //         // 后续需要改进\r\n    //         formula = formula.replace(/TOTALX\\(\\[(\\w+)\\]\\)/g, 1);\r\n    //       }\r\n    //       // 替换没有函数的字段\r\n    //       if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n    //         formula = formula.replace(\r\n    //           /\\(\\[(\\w+)\\]\\)/g,\r\n    //           record[totaoYCol.field]\r\n    //         );\r\n    //       }\r\n    //       // 后续需要修改eval(formula)该四则运算\r\n    //       let data = eval(formula);\r\n    //       rstDataArray[j][totaoYCol.field] = data;\r\n    //     }\r\n    //   }\r\n    //   return rstDataArray;\r\n    // },\r\n    // /**\r\n    //  * 数据合并，主要是将OPEN的数据进行合并\r\n    //  * @param allDataArr 数据数组\r\n    //  * @param columns 展示字段\r\n    //  */\r\n    // getShowFieldDataList(allDataArr, columns, allColumns) {\r\n    //   let rstAllColumns = [];\r\n    //   let rstLst = [];\r\n    //   let dataArray = deepJSONCopy(allDataArr);\r\n    //   // 如果记录为1，那就不需要进行合并\r\n    //   if (!dataArray || dataArray.length < 2) {\r\n    //     return dataArray;\r\n    //   }\r\n    //   if (!dataArray[0].dataValue_key) {\r\n    //     return dataArray;\r\n    //   }\r\n    //   let haveFormulaColumns = {};\r\n    //   // 用于判断返回显示字段中是否存在该字段\r\n    //   let isExistsFields = [];\r\n    //   // 用于找到展开后字段的下标\r\n    //   let columnIndexObj = {};\r\n    //   // 展开后字段的下标\r\n    //   let index = 0;\r\n    //   for (let i = 0; i < allColumns.length; i++) {\r\n    //     if (allColumns[i].formula) {\r\n    //       let field = allColumns[i].field;\r\n    //       haveFormulaColumns[field] = allColumns[i];\r\n    //       isExistsFields.push(field);\r\n    //     }\r\n    //     let formula = allColumns[i].formula;\r\n    //     if (formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n    //       continue;\r\n    //     }\r\n    //     columnIndexObj[allColumns[i].field] = index++;\r\n    //   }\r\n    //   // 先将不需要展开的字段全部放进返回显示字段中\r\n    //   for (let j = 0; j < columns.length; j++) {\r\n    //     let colField = columns[j].field;\r\n    //     let formula = columns[j].formula;\r\n    //     if (formula && /OPEN\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n    //       continue;\r\n    //     }\r\n    //     rstAllColumns.push(columns[j]);\r\n    //     isExistsFields.push(colField);\r\n    //   }\r\n    //   // 将所有非展开字段且存在值的字段值作为key的Object\r\n    //   let map = {};\r\n    //   for (let i = 0; i < dataArray.length; i++) {\r\n    //     let dataRst = {};\r\n    //     let dataRecord = dataArray[i];\r\n    //     // 将所有非展开字段且存在值的字段值作为key，便于数组连接\r\n    //     let key = \"\";\r\n    //     for (let j = 0; j < columns.length; j++) {\r\n    //       let colField = columns[j].field;\r\n    //       dataRst[colField] = dataRecord[colField];\r\n    //       if (dataRecord[colField]) {\r\n    //         key += \"_\" + dataRecord[colField];\r\n    //       }\r\n    //     }\r\n    //     if (key) {\r\n    //       let dataKey = dataRecord.dataValue_key;\r\n    //       dataRst.dataValue_key = dataRecord.dataValue_key;\r\n    //       dataRst[dataKey] = dataRecord[dataKey];\r\n    //       // 生成显示字段\r\n    //       let showColumn = {};\r\n    //       let dataFieldKey = dataKey.replace(/\\[(.+)\\]/g, \"\");\r\n    //       showColumn.field = dataKey;\r\n    //       showColumn.formula = haveFormulaColumns[dataFieldKey].formula;\r\n    //       showColumn.children = null;\r\n    //       if (isExistsFields.indexOf(dataKey) == -1) {\r\n    //         let index = columnIndexObj[dataFieldKey];\r\n    //         rstAllColumns.splice(index, 0, showColumn);\r\n    //         isExistsFields.push(dataKey);\r\n    //       }\r\n    //       let recordKeys = Object.keys(dataRecord);\r\n    //       if (recordKeys && recordKeys.length > 1) {\r\n    //         for (let j = 0; j < recordKeys.length; j++) {\r\n    //           if (\r\n    //             dataRecord[recordKeys[j]] == \"********\" &&\r\n    //             /\\[(.+)\\]/g.test(recordKeys[j])\r\n    //           ) {\r\n    //             dataRst[recordKeys[j]] = dataRecord[recordKeys[j]];\r\n    //             // 生成显示字段\r\n    //             let showColumn = {};\r\n    //             let dataFieldKey = recordKeys[j].replace(/\\[(.+)\\]/g, \"\");\r\n    //             showColumn.field = recordKeys[j];\r\n    //             showColumn.formula = haveFormulaColumns[dataFieldKey].formula;\r\n    //             showColumn.children = null;\r\n    //             if (isExistsFields.indexOf(recordKeys[j]) == -1) {\r\n    //               let index = columnIndexObj[dataFieldKey];\r\n    //               rstAllColumns.splice(index, 0, showColumn);\r\n    //               isExistsFields.push(recordKeys[j]);\r\n    //             }\r\n    //           }\r\n    //         }\r\n    //       }\r\n    //       let arr = map[key] || [];\r\n    //       arr.push(dataRst);\r\n    //       map[key] = arr;\r\n    //     }\r\n    //   }\r\n    //   // 得到所有的分类，进行连接\r\n    //   let mapKeys = Object.keys(map);\r\n    //   for (let i = 0; i < mapKeys.length; i++) {\r\n    //     let arr = map[mapKeys[i]] || [];\r\n    //     if (arr.length < 1) {\r\n    //       continue;\r\n    //     } else if (arr.length == 1) {\r\n    //       rstLst.push(arr[0]);\r\n    //     } else {\r\n    //       let dataLst = arr[0];\r\n    //       for (let j = 1; j < arr.length; j++) {\r\n    //         dataLst = this.concatObject(dataLst, arr[j]);\r\n    //       }\r\n    //       rstLst.push(dataLst);\r\n    //     }\r\n    //   }\r\n    //   let result = { data: rstLst, column: rstAllColumns };\r\n    //   return result;\r\n    // },\r\n    // /**\r\n    //  * 根据字段数组（包含字字段）得到所有的字段数组，将子字段也放在列表中\r\n    //  */\r\n    // getAllColumn(columns) {\r\n    //   // 遍历字段，将子字段展开，找到最终不显示的字段\r\n    //   let allColumns = [];\r\n    //   for (let i = 0; i < columns.length; i++) {\r\n    //     let curColumn = deepJSONCopy(columns[i]);\r\n    //     allColumns.push(curColumn);\r\n    //     if (curColumn.children && curColumn.children.length > 0) {\r\n    //       let childs = this.getAllColumn(curColumn.children) || [];\r\n    //       allColumns = allColumns.concat(childs);\r\n    //     }\r\n    //   }\r\n    //   return allColumns;\r\n    // },\r\n    // /**\r\n    //  * 展开数据，仅进行数据处理\r\n    //  * 处理结果；类似{ equipType: 1, equipTypeName: \"中央空调\",id: 1, name: \"中央空调1#\", type: 1, equipId: 1, dataValue[2018-05][42]: 522.35, dataValue_key:\"dataValue[2018-05][42]\"}\r\n    //  * @param curDataArr 要处理的数组\r\n    //  * @param columns 显示字段\r\n    //  * @param uniqueField 唯一字段\r\n    //  * @param showDataField 最终显示数据的字段，如 dataValue[2018-04]\r\n    //  */\r\n    // openRecordNotOperation(curDataArr, columns, uniqueField, showDataField) {\r\n    //   // 遍历字段，将子字段展开，找到最终不显示的字段\r\n    //   // let allColumns = this.getAllColumn(columns);\r\n    //   // 最终显示数据的字段showDataField\r\n    //   let fieldObj = this.getExpressionField(columns);\r\n    //   let openF = fieldObj.open;\r\n    //   if (!openF || openF.length < 1) {\r\n    //     return curDataArr;\r\n    //   }\r\n    //   let openCol = openF[0].fields;\r\n    //   if (openCol == \"\" || openCol.indexOf(\",\") > -1) {\r\n    //     return curDataArr;\r\n    //   }\r\n    //   let openChildren = columns[openF[0].index].children || [];\r\n    //   // 如果子字段为空，返回\r\n    //   if (!openChildren || openChildren.length < 1) {\r\n    //     return curDataArr;\r\n    //   }\r\n    //   let childFieldObj = this.getExpressionField(openChildren);\r\n\r\n    //   // 改变最终显示字段的字段名，\r\n    //   // 如将\"dataValue\"改成\"dataValue[2018-04]\"，其中2018-04为open字段的值\r\n    //   // \"dataValue_key\"的值为新数据字段的字段名，如果该字段不存在，说明第一次进来\r\n    //   let keyField = fieldObj.open[0].fields;\r\n    //   for (let i = 0; i < curDataArr.length; i++) {\r\n    //     let openFValue = curDataArr[i][keyField];\r\n    //     for (let j = 0; j < openChildren.length; j++) {\r\n    //       let childField = openChildren[j].field;\r\n    //       if (!curDataArr[i][childField]) {\r\n    //         curDataArr[i][childField] = \"********\";\r\n    //       }\r\n    //       if (childField == showDataField) {\r\n    //         let dataField = curDataArr[i].dataValue_key || showDataField;\r\n    //         let key = dataField + \"[\" + openFValue + \"]\";\r\n    //         let reg = RegExp(dataField, \"g\");\r\n    //         curDataArr[i] = JSON.parse(\r\n    //           JSON.stringify(curDataArr[i]).replace(reg, key)\r\n    //         );\r\n    //         delete curDataArr[i][keyField];\r\n    //         curDataArr[i].dataValue_key = key;\r\n    //       } else {\r\n    //         let dataValueKey = curDataArr[i].dataValue_key;\r\n    //         let dataField = \"\";\r\n    //         if (dataValueKey) {\r\n    //           let vKeys = dataValueKey.match(/\\[(.+)\\]/g);\r\n    //           dataField = childField + vKeys[0];\r\n    //           dataField = dataField.replace(\"[\" + openFValue + \"]\", \"\");\r\n    //         } else {\r\n    //           dataField = childField;\r\n    //         }\r\n    //         let key = dataField + \"[\" + openFValue + \"]\";\r\n    //         let reg = RegExp(dataField, \"g\");\r\n    //         if (curDataArr[i][dataField] != undefined) {\r\n    //           curDataArr[i] = JSON.parse(\r\n    //             JSON.stringify(curDataArr[i]).replace(reg, key)\r\n    //           );\r\n    //           delete curDataArr[i][dataField];\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    //   // 如果子字段中没有需要展开的了，那么直接处理，否则继续递归调用\r\n    //   if (!childFieldObj.open || childFieldObj.open.length < 1) {\r\n    //     return curDataArr;\r\n    //   } else if (childFieldObj.open.length == 1) {\r\n    //     //递归调用\r\n    //     return this.openRecordNotOperation(\r\n    //       curDataArr,\r\n    //       columns,\r\n    //       uniqueField,\r\n    //       showDataField\r\n    //     );\r\n    //   } else {\r\n    //     return curDataArr;\r\n    //   }\r\n    // },\r\n    // /**\r\n    //  * 获取统计数量的数据\r\n    //  * @param dataObj 用唯一字段做key的Object对象\r\n    //  * @param uniqueField 唯一字段名数组\r\n    //  * @param countCol 统计字段\r\n    //  * @param dataArray 数据数组\r\n    //  */\r\n    // getCountRecord(dataObj, uniqueField, countCol, dataArray) {\r\n    //   let rst = [];\r\n    //   let dataObjKey = Object.keys(dataObj);\r\n    //   for (let i = 0; i < dataObjKey.length; i++) {\r\n    //     let keyDatas = deepJSONCopy(dataObj[dataObjKey[i]]);\r\n    //     if (keyDatas.length < 1) {\r\n    //       continue;\r\n    //     }\r\n    //     let record = {};\r\n    //     for (let j = 0; j < uniqueField.length; j++) {\r\n    //       record[uniqueField[j]] = keyDatas[0][uniqueField[j]] || \"\";\r\n    //     }\r\n    //     let countColStr = \",\";\r\n    //     let count = 0;\r\n    //     for (let j = 0; j < keyDatas.length; j++) {\r\n    //       if (countColStr.indexOf(\",\" + keyDatas[j][countCol] + \",\") < 0) {\r\n    //         count++;\r\n    //         countColStr += keyDatas[j][countCol] + \",\";\r\n    //       }\r\n    //     }\r\n    //     record[countCol] = count;\r\n    //     rst.push(record);\r\n    //   }\r\n    //   return this.concatArray(dataArray, rst, uniqueField);\r\n    // },\r\n    // /**\r\n    //  * 运算函数求值\r\n    //  * @param allDataArr 所有的数据\r\n    //  * @param dataObj 使用唯一性字段作为key的object\r\n    //  * @param column 当前处理的字段\r\n    //  * @param colObj 字段column的formula解析后的object\r\n    //  * @param rstDataList 已经处理的数据，根据column处理后的数据需要粘贴在该数据后面\r\n    //  */\r\n    // getDataByOperation(\r\n    //   allDataArr,\r\n    //   dataObj,\r\n    //   allColumns,\r\n    //   column,\r\n    //   colObj,\r\n    //   totalX,\r\n    //   rstDataList\r\n    // ) {\r\n    //   if (colObj.open && colObj.open.length > 0) {\r\n    //     return rstDataList;\r\n    //   }\r\n    //   // formula=\"SUM([dataValue])/[totalX[dataVlue]\"\r\n    //   let curDataList = deepJSONCopy(rstDataList);\r\n    //   let keys = Object.keys(dataObj);\r\n    //   let field = column.field;\r\n    //   let suffix = /\\[(.+)\\]/g.test(field) ? field.match(/\\[(.+)\\]/g)[0] : \"\";\r\n    //   for (let i = 0; i < keys.length; i++) {\r\n    //     let uniqueDataList = dataObj[keys[i]];\r\n    //     let countField =\r\n    //       colObj.count && colObj.count.length > 0\r\n    //         ? colObj.count[0].fields + suffix\r\n    //         : \"\";\r\n    //     let maxField =\r\n    //       colObj.max && colObj.max.length > 0\r\n    //         ? colObj.max[0].fields + suffix\r\n    //         : \"\";\r\n    //     let minField =\r\n    //       colObj.min && colObj.min.length > 0\r\n    //         ? colObj.min[0].fields + suffix\r\n    //         : \"\";\r\n    //     let sumField =\r\n    //       colObj.sum && colObj.sum.length > 0\r\n    //         ? colObj.sum[0].fields + suffix\r\n    //         : \"\";\r\n    //     let avgField =\r\n    //       colObj.avg && colObj.avg.length > 0\r\n    //         ? colObj.avg[0].fields + suffix\r\n    //         : \"\";\r\n    //     let countLst = \",\";\r\n    //     let count = 0;\r\n    //     let maxData = uniqueDataList[0][maxField] || \"\";\r\n    //     let minData = uniqueDataList[0][minField] || \"\";\r\n    //     let sumData = 0;\r\n    //     // 平均值的和值\r\n    //     let avgSumData = 0;\r\n    //     // 平均值叠加的数量\r\n    //     let avgCount = 0;\r\n    //     let formula = column.formula;\r\n    //     for (let j = 0; j < uniqueDataList.length; j++) {\r\n    //       let record = uniqueDataList[j];\r\n    //       if (\r\n    //         countField &&\r\n    //         countLst.indexOf(\",\" + record[countField] + \",\") == -1\r\n    //       ) {\r\n    //         countLst += record[countField] + \",\";\r\n    //         count++;\r\n    //       }\r\n    //       if (maxField && maxData < record[maxField]) {\r\n    //         maxData = record[maxField];\r\n    //       }\r\n    //       if (minField && minData > record[minField]) {\r\n    //         minData = record[minField];\r\n    //       }\r\n    //       if (sumField && record[sumField]) {\r\n    //         sumData += record[sumField];\r\n    //       }\r\n    //       if (avgField && record[avgField]) {\r\n    //         avgSumData += record[avgField];\r\n    //         avgCount++;\r\n    //       }\r\n    //     }\r\n    //     if (colObj.count && colObj.count.length > 0) {\r\n    //       formula = formula.replace(/COUNT\\(\\[(\\w+)\\]\\)/g, count);\r\n    //     }\r\n    //     if (colObj.ringRatio && colObj.ringRatio.length > 0) {\r\n    //       // 针对结果数据进行环比、同比\r\n    //       let rField = colObj.ringRatio[0].fields;\r\n    //       let dataFields = [];\r\n    //       for (let k = 0; k < allColumns.length; k++) {\r\n    //         if (/\\[(.+)\\]/g.test(allColumns[k].field)) {\r\n    //           let xDataField = allColumns[k].field.replace(/\\[(.+)\\]/g, \"\");\r\n    //           if (xDataField == rField) {\r\n    //             dataFields.push(allColumns[k].field);\r\n    //           }\r\n    //         }\r\n    //       }\r\n    //       if (!dataFields || dataFields.length < 2) {\r\n    //         formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, 0);\r\n    //       } else {\r\n    //         dataFields.sort();\r\n    //         let curDataDateF = dataFields[dataFields.length - 1];\r\n    //         let lastDataDateF = dataFields[dataFields.length - 2];\r\n    //         let scaleR =\r\n    //           curDataList[keys[i]][curDataDateF] /\r\n    //             curDataList[keys[i]][lastDataDateF] -\r\n    //           1;\r\n    //         formula = formula.replace(/RINGRATIO\\(\\[(\\w+)\\]\\)/g, scaleR);\r\n    //       }\r\n    //     }\r\n    //     if (colObj.sum && colObj.sum.length > 0) {\r\n    //       formula = formula.replace(/SUM\\(\\[(\\w+)\\]\\)/g, sumData);\r\n    //     }\r\n    //     if (colObj.avg && colObj.avg.length > 0) {\r\n    //       let avgData = avgSumData / avgCount;\r\n    //       formula = formula.replace(/AVG\\(\\[(\\w+)\\]\\)/g, avgData);\r\n    //     }\r\n    //     if (colObj.max && colObj.max.length > 0) {\r\n    //       formula = formula.replace(/MAX\\(\\[(\\w+)\\]\\)/g, maxData);\r\n    //     }\r\n    //     if (colObj.min && colObj.min.length > 0) {\r\n    //       formula = formula.replace(/MIN\\(\\[(\\w+)\\]\\)/g, minData);\r\n    //     }\r\n    //     if (colObj.totalX && colObj.totalX.length > 0) {\r\n    //       let totalXF = colObj.totalX[0].fields + suffix;\r\n    //       formula = formula.replace(\r\n    //         /TOTALX\\(\\[(\\w+)\\]\\)/g,\r\n    //         rstDataList[totalX[0].formula][totalXF]\r\n    //       );\r\n    //     }\r\n    //     // 替换没有函数的字段\r\n    //     if (/\\(\\[(\\w+)\\]\\)/g.test(formula)) {\r\n    //       let vKeys = formula.match(/\\[(.+)\\]/g);\r\n    //       formula = formula.replace(\r\n    //         /\\(\\[(\\w+)\\]\\)/g,\r\n    //         uniqueDataList[0][vKeys[0] + suffix]\r\n    //       );\r\n    //     }\r\n    //     // 后续需要修改eval(formula)该四则运算\r\n    //     let data = eval(formula);\r\n    //     curDataList[keys[i]][field] = data;\r\n    //   }\r\n    //   return curDataList;\r\n    // },\r\n    // /**\r\n    //  * 得到公式中的字段\r\n    //  * @param columns 需要显示的字段数组\r\n    //  */\r\n    // getExpressionField(columns) {\r\n    //   let fieldObj = {\r\n    //     count: [],\r\n    //     totalX: [],\r\n    //     open: [],\r\n    //     ringRatio: [],\r\n    //     sum: [],\r\n    //     avg: [],\r\n    //     max: [],\r\n    //     min: []\r\n    //   };\r\n    //   // 统计数量正则式\r\n    //   let countReg = /COUNT\\(\\[(\\w+)\\]\\)/g;\r\n    //   // 统计正则式\r\n    //   let totalXReg = /TOTALX\\(\\[(\\w+)\\]\\)/g;\r\n    //   // 展开正则式\r\n    //   let openReg = /OPEN\\(\\[(\\w+)\\]\\)/g;\r\n    //   // 求比例正则式\r\n    //   let ringRatioReg = /RINGRATIO\\(\\[(\\w+)\\]\\)/g;\r\n    //   // 求和正则式\r\n    //   let sumReg = /SUM\\(\\[(\\w+)\\]\\)/g;\r\n    //   // 平均值正则式\r\n    //   let avgReg = /AVG\\(\\[(\\w+)\\]\\)/g;\r\n    //   // 最大值正则式\r\n    //   let maxReg = /MAX\\(\\[(\\w+)\\]\\)/g;\r\n    //   // 最小值正则式\r\n    //   let minReg = /MIN\\(\\[(\\w+)\\]\\)/g;\r\n    //   if (columns instanceof Array) {\r\n    //     for (let i = 0; i < columns.length; i++) {\r\n    //       let item = columns[i];\r\n    //       // 得到所有的统计数量字段\r\n    //       if (countReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, countReg);\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.count.push(fieldSubObj);\r\n    //       }\r\n    //       // 得到所有的统计字段\r\n    //       if (totalXReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, totalXReg);\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.totalX.push(fieldSubObj);\r\n    //       }\r\n    //       // 得到所有的展开字段\r\n    //       if (openReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, openReg);\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.open.push(fieldSubObj);\r\n    //       }\r\n    //       // 得到所有的比例字段\r\n    //       if (ringRatioReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(\r\n    //           item.formula,\r\n    //           ringRatioReg\r\n    //         );\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.ringRatio.push(fieldSubObj);\r\n    //       }\r\n    //       // 得到所有的求和字段\r\n    //       if (sumReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, sumReg);\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.sum.push(fieldSubObj);\r\n    //       }\r\n    //       // 得到所有的平均值字段\r\n    //       if (avgReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, avgReg);\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.avg.push(fieldSubObj);\r\n    //       }\r\n    //       // 得到所有的最大值字段\r\n    //       if (maxReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, maxReg);\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.max.push(fieldSubObj);\r\n    //       }\r\n    //       // 得到所有的最小值字段\r\n    //       if (minReg.test(item.formula)) {\r\n    //         let fieldSub = this.fieldFormulaAnalysis(item.formula, minReg);\r\n    //         let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //         fieldObj.min.push(fieldSubObj);\r\n    //       }\r\n    //     }\r\n    //   } else {\r\n    //     let item = columns;\r\n    //     let i = 0;\r\n    //     // 得到所有的统计数量字段\r\n    //     if (countReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, countReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.count.push(fieldSubObj);\r\n    //     }\r\n    //     // 得到所有的统计字段\r\n    //     if (totalXReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, totalXReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.totalX.push(fieldSubObj);\r\n    //     }\r\n    //     // 得到所有的展开字段\r\n    //     if (openReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, openReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.open.push(fieldSubObj);\r\n    //     }\r\n    //     // 得到所有的比例字段\r\n    //     if (ringRatioReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, ringRatioReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.ringRatio.push(fieldSubObj);\r\n    //     }\r\n    //     // 得到所有的求和字段\r\n    //     if (sumReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, sumReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.sum.push(fieldSubObj);\r\n    //     }\r\n    //     // 得到所有的平均值字段\r\n    //     if (avgReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, avgReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.avg.push(fieldSubObj);\r\n    //     }\r\n    //     // 得到所有的最大值字段\r\n    //     if (maxReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, maxReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.max.push(fieldSubObj);\r\n    //     }\r\n    //     // 得到所有的最小值字段\r\n    //     if (minReg.test(item.formula)) {\r\n    //       let fieldSub = this.fieldFormulaAnalysis(item.formula, minReg);\r\n    //       let fieldSubObj = { index: i, fields: fieldSub.toString() };\r\n    //       fieldObj.min.push(fieldSubObj);\r\n    //     }\r\n    //   }\r\n    //   return fieldObj;\r\n    // },\r\n    // /**\r\n    //  * 公式解析\r\n    //  * @param fieldFormula 字段的公式\r\n    //  * @param reg 匹配的正则式\r\n    //  */\r\n    // fieldFormulaAnalysis(fieldFormula, reg) {\r\n    //   let rst = [];\r\n    //   let lastIndex = 1;\r\n    //   reg.lastIndex = 0;\r\n    //   while (lastIndex) {\r\n    //     let rstArr1 = reg.exec(fieldFormula);\r\n    //     if (rstArr1 != null) {\r\n    //       rst.push(rstArr1[1]);\r\n    //     }\r\n    //     lastIndex = reg.lastIndex;\r\n    //   }\r\n    //   return rst;\r\n    // }\r\n    getMeterEnergy() {\r\n      this.$ajax({\r\n        url: \"rest/analysisData/meterEnergyData\",\r\n        method: \"get\",\r\n        params: {\r\n          title: \"表计数据测试\",\r\n          orgIds: 35,\r\n          energyIds: 35,\r\n          cycle: 3,\r\n          startTime: \"2018-06-01\",\r\n          endTime: \"2018-06-30\",\r\n          isCount: true,\r\n          groupBys: \"0001\"\r\n        }\r\n      }).then(res => {\r\n        if (res.data.status) {\r\n          let data = res.data.records;\r\n          let obj = {\r\n            num: 1,\r\n            dataArray: [data],\r\n            relation: [],\r\n            uniqueField: [\"dataTime\"],\r\n            column: [\r\n              {\r\n                field: \"dataTime\",\r\n                formula: \"\",\r\n                children: null\r\n              },\r\n              {\r\n                field: \"meterId\",\r\n                formula: \"OPEN([meterId])\",\r\n                children: [\r\n                  {\r\n                    field: \"displayData\",\r\n                    formula: \"SUM([displayData])\",\r\n                    children: null\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            totalX: [\r\n              {\r\n                field: \"dataTime\",\r\n                formula: \"合计\",\r\n                children: null\r\n              },\r\n              {\r\n                field: \"meterId\",\r\n                formula: \"OPEN([meterId])\",\r\n                children: [\r\n                  {\r\n                    field: \"displayData\",\r\n                    formula: \"SUM([displayData])\",\r\n                    children: null\r\n                  }\r\n                ]\r\n              }\r\n            ],\r\n            totalY: [\r\n              {\r\n                field: \"合计\",\r\n                formula: \"SUM([displayData])\",\r\n                children: null\r\n              }\r\n            ]\r\n          };\r\n          let d1 = new Date();\r\n          let rstTableData = getTableDataByOneArray(obj);\r\n          console.log(\"rstTableData=\", rstTableData);\r\n          let d2 = new Date();\r\n          console.log(\"耗时：\", d2.getTime() - d1.getTime());\r\n        }\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getTbList();\r\n    this.getTargetTypeTree();\r\n    this.getOrgTree();\r\n    this.getOrgList();\r\n    this.getTargetTypeList();\r\n    this.getMeterEnergy();\r\n    // this.getTableDataTest();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.target-valuesource-btn {\r\n  margin-left: 10px;\r\n}\r\n.target-flex {\r\n  display: flex;\r\n}\r\n.target-dialog .el-dialog {\r\n  min-width: 630px;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/platform/target/target.vue?612b4350","<template>\r\n    <div>\r\n        <el-form :model=\"expressionForm\" :rules=\"expressionRules\">\r\n            <el-form-item prop=\"expression\">\r\n                <el-input v-model=\"expressionForm.expression\" readonly type=\"textarea\" :rows=\"8\" @keydown.native=\"handleKeyDown\"></el-input>\r\n            </el-form-item>\r\n        </el-form>\r\n        <el-button v-for=\"(item,index) in expressionBtn\" :key=\"index\" @click=\"keyUpElement(item)\">{{item}}</el-button>\r\n        <el-button @click=\"backSpace\">退格</el-button>\r\n        <el-button @click=\"clearAll\">清空</el-button>\r\n        <el-tabs v-model=\"expressTableActive\" type=\"card\" @tab-click=\"handleClick\">\r\n            <el-tab-pane label=\"常量\" name=\"0\">用户管理</el-tab-pane>\r\n            <el-tab-pane label=\"基础指标\" name=\"1\">配置管理</el-tab-pane>\r\n            <!-- <el-tab-pane label=\"统计指标\" name=\"2\">角色管理</el-tab-pane> -->\r\n        </el-tabs>\r\n        <da-table ref=\"expressionTb\" slot=\"content\" :colums=\"colsData[expressTableActive]\" :table-list=\"tableList\" :search-data=\"searchForm[expressTableActive]\" @callBack=\"getTargetTb\" :showSelection=\"false\">\r\n            <el-table-column property=\"operation\" label=\"操作\" width=\"150\" slot=\"operation\" align=\"center\" fixed=\"right\">\r\n                <template slot-scope=\"scope\">\r\n                    <!-- <el-button size=\"small\" @click=\"editTb(scope.row)\">编辑</el-button>\r\n                    <el-button size=\"small\" @click=\"delTb(scope.row)\">删除</el-button> -->\r\n                    <el-button size=\"small\" @click=\"selectRow(scope.row)\">选择</el-button>\r\n                </template>\r\n            </el-table-column>\r\n        </da-table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { getListByTree } from \"../../../../util/util\";\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: [Object, Boolean],\r\n      default: false\r\n    },\r\n    targetType: {\r\n      type: Object\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      expressTableActive: \"0\",\r\n      expressionForm: {\r\n        expression: \"\",\r\n        expressionTrue: \"\",\r\n        level: \"\",\r\n        dependence: \"\",\r\n        indirect_dependence: \"\"\r\n      },\r\n      expressionBtn: [\r\n        \"SUM()\",\r\n        \"MAX()\",\r\n        \"MIN()\",\r\n        \"AVG()\",\r\n        \"SD()\",\r\n        \"(\",\r\n        \")\",\r\n        \"+\",\r\n        \"*\",\r\n        \"-\",\r\n        \"/\",\r\n        \"0\",\r\n        \"1\",\r\n        \"2\",\r\n        \"3\",\r\n        \"4\",\r\n        \"5\",\r\n        \"6\",\r\n        \"7\",\r\n        \"8\",\r\n        \"9\",\r\n        \".\"\r\n      ],\r\n      expressTableUrl: [\"rest/target/targetConstant\", \"rest/target/baseTarget\"],\r\n      expressAttr: [\"identifyValue\", \"name\"],\r\n      expressTrueAttr: [\"identify\", \"id\"],\r\n      expressWrap: [\"{temp}\", \"[temp]\"],\r\n      expressionRules: this.eachValidate({\r\n        expression: { imeDisabled: true }\r\n      }),\r\n      tableList: {},\r\n      colsData: [\r\n        [\r\n          { label: \"常量名称\", prop: \"identifyValue\", align: \"left\" },\r\n          { label: \"常量代码\", prop: \"code\", align: \"left\" },\r\n          { label: \"常量值\", prop: \"identify\", align: \"left\" }\r\n        ],\r\n        [\r\n          { label: \"指标简称\", prop: \"shortName\", align: \"left\" },\r\n          { label: \"指标名称\", prop: \"name\", align: \"left\" },\r\n          { label: \"指标周期\", prop: \"targetCycle\", align: \"left\" },\r\n          {\r\n            label: \"指标类型\",\r\n            prop: \"targetType\",\r\n            align: \"left\",\r\n            displace: this.targetType\r\n          },\r\n          { label: \"所属组织\", prop: \"orgId\", align: \"left\", displace: {} }\r\n        ]\r\n      ],\r\n      searchForm: [\r\n        {\r\n          formdata: {},\r\n          currentPage: 1,\r\n          pageSize: 10\r\n        },\r\n        {\r\n          name: \"\",\r\n          calculationLevel: \"\",\r\n          valueMethod: \"\",\r\n          currentPage: 1,\r\n          pageSize: 10\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  watch: {\r\n    value(val) {\r\n      if (val && this.expressionForm.expression.length === 0) {\r\n        this.expressionForm = val;\r\n      }\r\n    },\r\n    \"expressionForm.expression\"() {\r\n      this.$emit(\"input\", false);\r\n    }\r\n  },\r\n  methods: {\r\n    keyUpElement(element) {\r\n      this.expressionForm.expression += element;\r\n      this.expressionForm.expressionTrue += element;\r\n    },\r\n    // 过滤掉输入的字母或特殊字符\r\n    handleKeyDown(keyBoard) {\r\n      // 加了readonly后用不上\r\n      //   if (\r\n      //     keyBoard.keyCode !== 8 &&\r\n      //     this.expressionBtn.indexOf(keyBoard.key) === -1\r\n      //   ) {\r\n      //     keyBoard.preventDefault();\r\n      //     keyBoard.stopPropagation();\r\n      //   } else {\r\n      //   }\r\n    },\r\n    // tab切换\r\n    handleClick() {\r\n      this.getTargetTb();\r\n    },\r\n    selectRow(row) {\r\n      let temp = row[this.expressAttr[this.expressTableActive]];\r\n      let tempTrue = row[this.expressTrueAttr[this.expressTableActive]];\r\n      this.expressionForm.expression += this.expressWrap[\r\n        this.expressTableActive\r\n      ].replace(\"temp\", temp);\r\n      this.expressionForm.expressionTrue += this.expressWrap[\r\n        this.expressTableActive\r\n      ].replace(\"temp\", tempTrue);\r\n    },\r\n    getTargetTb() {\r\n      this.$ajax\r\n        .get(this.expressTableUrl[this.expressTableActive], {\r\n          params: this.searchForm[this.expressTableActive]\r\n        })\r\n        .then(res => {\r\n          this.tableList = res.data;\r\n        });\r\n    },\r\n    getOrgTree() {\r\n      this.$ajax\r\n        .get(\"rest/target/orgTree\", { loadingTarget: this.$refs.expressionTb })\r\n        .then(res => {\r\n          let obj = {};\r\n          this.$each(\r\n            getListByTree(res.data.records, \"id\", \"children\"),\r\n            item => {\r\n              obj[item.id] = item.name;\r\n            }\r\n          );\r\n          this.colsData[1][4].displace = obj;\r\n        });\r\n    },\r\n    // 校验表达式准确性\r\n    checkExpression(form) {\r\n      form.valueSource = this.expressionForm.expressionTrue;\r\n      this.$ajax.post(\"rest/target/expressionCheck\", form).then(res => {\r\n        if (res.data.status) {\r\n          this.expressionForm.level = res.data.records.level;\r\n          this.expressionForm.dependence = res.data.records.dependence;\r\n          this.expressionForm.indirect_dependence =\r\n            res.data.records.indirect_dependence;\r\n          this.$emit(\"input\", this.expressionForm);\r\n        } else {\r\n          this.$message.error(res.data.answerMsg);\r\n        }\r\n      });\r\n    },\r\n    matchChar(str) {\r\n      var lastTarget = \"\",\r\n        sameTaget = 0,\r\n        target = \"\";\r\n      if (str.lastIndexOf(\"]\") === str.length - 1) {\r\n        //\t\t\treturn str.lastIndexOf(\"[\");\r\n        lastTarget = \"[\";\r\n        target = \"]\";\r\n      } else if (str.lastIndexOf(\"}\") === str.length - 1) {\r\n        //\t\t\treturn str.lastIndexOf(\"{\");\r\n        lastTarget = \"{\";\r\n        target = \"}\";\r\n      } else {\r\n        return str.length - 1;\r\n      }\r\n\r\n      for (var i = str.length - 2; i > -1; i--) {\r\n        if (sameTaget === 0 && str[i] === lastTarget) {\r\n          return i;\r\n        } else {\r\n          if (str[i] === target) {\r\n            sameTaget++;\r\n          } else if (str[i] === lastTarget) {\r\n            sameTaget--;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    backSpace() {\r\n      let data = this.expressionForm.expression;\r\n      let dataTrue = this.expressionForm.expressionTrue;\r\n      this.expressionForm.expression = this.expressionForm.expression.substring(\r\n        0,\r\n        this.matchChar(data)\r\n      );\r\n      this.expressionForm.expressionTrue = this.expressionForm.expressionTrue.substring(\r\n        0,\r\n        this.matchChar(dataTrue)\r\n      );\r\n    },\r\n    clearAll() {\r\n      this.resetData();\r\n    },\r\n    getData() {\r\n      this.getOrgTree();\r\n      this.getTargetTb();\r\n    },\r\n    resetData() {\r\n      this.expressionForm = {\r\n        expression: \"\",\r\n        expressionTrue: \"\",\r\n        level: \"\"\r\n      };\r\n    }\r\n  },\r\n  mounted() {}\r\n};\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// src/views/platform/target/template/calculation.vue?10c0a1ca","exports = module.exports = require(\"../../../../node_modules/_css-loader@0.28.0@css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".target-valuesource-btn{margin-left:10px}.target-flex{display:flex}.target-dialog .el-dialog{min-width:630px}\", \"\", {\"version\":3,\"sources\":[\"C:/vscode/ysems_webapp/src/views/platform/target/target.vue\"],\"names\":[],\"mappings\":\"AACA,wBACE,gBAAkB,CACnB,AACD,aACE,YAAc,CACf,AACD,0BACE,eAAiB,CAClB\",\"file\":\"target.vue\",\"sourcesContent\":[\"\\n.target-valuesource-btn {\\r\\n  margin-left: 10px;\\n}\\n.target-flex {\\r\\n  display: flex;\\n}\\n.target-dialog .el-dialog {\\r\\n  min-width: 630px;\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_css-loader@0.28.0@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/_vue-loader@13.0.4@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-6b969656\",\"scoped\":false,\"hasInlineConfig\":false}!./~/_vue-loader@13.0.4@vue-loader/lib/selector.js?type=styles&index=0!./src/views/platform/target/target.vue\n// module id = ZSZL\n// module chunks = 10","var normalizeComponent = require(\"!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector?type=script&index=0!./dataBase.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1050f97c\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector?type=template&index=0!./dataBase.vue\"\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/platform/target/template/dataBase.vue\n// module id = aeOv\n// module chunks = 10","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/_extract-text-webpack-plugin@2.0.0@extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6b969656\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector?type=styles&index=0!./target.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/component-normalizer\")\n/* script */\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector?type=script&index=0!./target.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6b969656\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"}}!../../../../node_modules/_vue-loader@13.0.4@vue-loader/lib/selector?type=template&index=0!./target.vue\"\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/platform/target/target.vue\n// module id = al5a\n// module chunks = 10","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-form', {\n    attrs: {\n      \"model\": _vm.dbForm,\n      \"label-width\": \"80px\"\n    }\n  }, [(_vm.type === 1) ? _c('el-form-item', {\n    attrs: {\n      \"prop\": \"source\"\n    }\n  }, [_c('el-select', {\n    model: {\n      value: (_vm.dbForm.source),\n      callback: function($$v) {\n        _vm.$set(_vm.dbForm, \"source\", $$v)\n      },\n      expression: \"dbForm.source\"\n    }\n  }, _vm._l((_vm.dbSourceList), function(item) {\n    return _c('el-option', {\n      key: item.id,\n      attrs: {\n        \"label\": item.name,\n        \"value\": item.id\n      }\n    })\n  }))], 1) : _vm._e(), _vm._v(\" \"), (_vm.type === 1) ? _c('el-form-item', {\n    attrs: {\n      \"prop\": \"sourceValue\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"rows\": 6,\n      \"type\": \"textarea\"\n    },\n    model: {\n      value: (_vm.dbForm.expression),\n      callback: function($$v) {\n        _vm.$set(_vm.dbForm, \"expression\", $$v)\n      },\n      expression: \"dbForm.expression\"\n    }\n  })], 1) : _vm._e(), _vm._v(\" \"), (_vm.type === 2) ? _c('el-form-item', {\n    attrs: {\n      \"prop\": \"source\",\n      \"label\": \"选择接口\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"value-key\": \"id\"\n    },\n    model: {\n      value: (_vm.dbForm.source),\n      callback: function($$v) {\n        _vm.$set(_vm.dbForm, \"source\", $$v)\n      },\n      expression: \"dbForm.source\"\n    }\n  }, _vm._l((_vm.dbInterfaceList), function(item) {\n    return _c('el-option', {\n      key: item.id,\n      attrs: {\n        \"label\": item.name,\n        \"value\": item\n      }\n    })\n  }))], 1) : _vm._e(), _vm._v(\" \"), (_vm.type === 2) ? _c('div', [_vm._v(\"接口参数\")]) : _vm._e(), _vm._v(\" \"), _vm._l((_vm.dbForm.source.list), function(item) {\n    return (_vm.type === 2) ? _c('el-form-item', {\n      key: item.id,\n      attrs: {\n        \"prop\": \"sourceValue\",\n        \"；:label\": \"item.name\"\n      }\n    }, [_c('el-input', {\n      model: {\n        value: (_vm.dbForm[item.value]),\n        callback: function($$v) {\n          _vm.$set(_vm.dbForm, item.value, $$v)\n        },\n        expression: \"dbForm[item.value]\"\n      }\n    })], 1) : _vm._e()\n  })], 2)\n}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_vue-loader@13.0.4@vue-loader/lib/template-compiler?{\"id\":\"data-v-1050f97c\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"}}!./~/_vue-loader@13.0.4@vue-loader/lib/selector.js?type=template&index=0!./src/views/platform/target/template/dataBase.vue\n// module id = hkW3\n// module chunks = 10"],"sourceRoot":""}